
HiFiDAC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08004bc8  08004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e5c  08004e5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e5c  08004e5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000070  08004ed4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08004ed4  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a82  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1c  00000000  00000000  00038b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f025  00000000  00000000  0003b736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0004a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  0004b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001580d  00000000  00000000  0004c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192df  00000000  00000000  000619bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ca01  00000000  00000000  0007ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f769d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d84  00000000  00000000  000f76f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bb0 	.word	0x08004bb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004bb0 	.word	0x08004bb0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <DAC_CheckChipID>:
#include <stdio.h>

/**
 * Check that the DAC chip ID is correct, confirming that the chip functions and can communicate
 */
HAL_StatusTypeDef DAC_CheckChipID() {
 8000408:	b530      	push	{r4, r5, lr}
 800040a:	b083      	sub	sp, #12
  uint8_t chip_id = 0;
 800040c:	466b      	mov	r3, sp
 800040e:	1dd9      	adds	r1, r3, #7
 8000410:	2300      	movs	r3, #0
 8000412:	700b      	strb	r3, [r1, #0]

  ReturnOnError(DAC_SPI_Read8(REG_CHIP_ID_READ, &chip_id));
 8000414:	20e1      	movs	r0, #225	; 0xe1
 8000416:	f000 f98d 	bl	8000734 <DAC_SPI_Read8>
 800041a:	1e04      	subs	r4, r0, #0
 800041c:	d002      	beq.n	8000424 <DAC_CheckChipID+0x1c>
#endif

  if (chip_id != DAC_EXPECTED_CHIP_ID) return HAL_ERROR;

  return HAL_OK;
}
 800041e:	0020      	movs	r0, r4
 8000420:	b003      	add	sp, #12
 8000422:	bd30      	pop	{r4, r5, pc}
  printf("Chip ID: 0x%02X\n", chip_id);
 8000424:	466b      	mov	r3, sp
 8000426:	1ddd      	adds	r5, r3, #7
 8000428:	79d9      	ldrb	r1, [r3, #7]
 800042a:	4804      	ldr	r0, [pc, #16]	; (800043c <DAC_CheckChipID+0x34>)
 800042c:	f003 fa9a 	bl	8003964 <iprintf>
  if (chip_id != DAC_EXPECTED_CHIP_ID) return HAL_ERROR;
 8000430:	782b      	ldrb	r3, [r5, #0]
 8000432:	2b63      	cmp	r3, #99	; 0x63
 8000434:	d0f3      	beq.n	800041e <DAC_CheckChipID+0x16>
 8000436:	3401      	adds	r4, #1
 8000438:	e7f1      	b.n	800041e <DAC_CheckChipID+0x16>
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	08004bcc 	.word	0x08004bcc

08000440 <PrintReg8>:

#ifdef DEBUG
void PrintReg8(DAC_SPI_Register reg) {
 8000440:	b510      	push	{r4, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	0004      	movs	r4, r0
  uint8_t i8 = 0;
 8000446:	466b      	mov	r3, sp
 8000448:	1dd9      	adds	r1, r3, #7
 800044a:	2300      	movs	r3, #0
 800044c:	700b      	strb	r3, [r1, #0]
  HAL_StatusTypeDef res = DAC_SPI_Read8(reg, &i8);
 800044e:	f000 f971 	bl	8000734 <DAC_SPI_Read8>
 8000452:	1e02      	subs	r2, r0, #0
  if (res != HAL_OK) printf("0x%02X: Read error %u\n", (uint8_t)reg, (uint8_t)res);
 8000454:	d005      	beq.n	8000462 <PrintReg8+0x22>
 8000456:	0021      	movs	r1, r4
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <PrintReg8+0x30>)
 800045a:	f003 fa83 	bl	8003964 <iprintf>
  else printf("0x%02X: 0x%02X\n", (uint8_t)reg, i8);
}
 800045e:	b002      	add	sp, #8
 8000460:	bd10      	pop	{r4, pc}
  else printf("0x%02X: 0x%02X\n", (uint8_t)reg, i8);
 8000462:	466b      	mov	r3, sp
 8000464:	79da      	ldrb	r2, [r3, #7]
 8000466:	0021      	movs	r1, r4
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <PrintReg8+0x34>)
 800046a:	f003 fa7b 	bl	8003964 <iprintf>
}
 800046e:	e7f6      	b.n	800045e <PrintReg8+0x1e>
 8000470:	08004be0 	.word	0x08004be0
 8000474:	08004bf8 	.word	0x08004bf8

08000478 <PrintReg16>:

void PrintReg16(DAC_SPI_Register reg) {
 8000478:	b510      	push	{r4, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	0004      	movs	r4, r0
  uint16_t i16 = 0;
 800047e:	466b      	mov	r3, sp
 8000480:	1d99      	adds	r1, r3, #6
 8000482:	2300      	movs	r3, #0
 8000484:	800b      	strh	r3, [r1, #0]
  HAL_StatusTypeDef res = DAC_SPI_Read16(reg, &i16);
 8000486:	f000 f9aa 	bl	80007de <DAC_SPI_Read16>
 800048a:	1e02      	subs	r2, r0, #0
  if (res != HAL_OK) printf("0x%02X: Read error %u\n", (uint8_t)reg, (uint8_t)res);
 800048c:	d005      	beq.n	800049a <PrintReg16+0x22>
 800048e:	0021      	movs	r1, r4
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <PrintReg16+0x30>)
 8000492:	f003 fa67 	bl	8003964 <iprintf>
  else printf("0x%02X: 0x%04X\n", (uint8_t)reg, i16);
}
 8000496:	b002      	add	sp, #8
 8000498:	bd10      	pop	{r4, pc}
  else printf("0x%02X: 0x%04X\n", (uint8_t)reg, i16);
 800049a:	466b      	mov	r3, sp
 800049c:	88da      	ldrh	r2, [r3, #6]
 800049e:	0021      	movs	r1, r4
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <PrintReg16+0x34>)
 80004a2:	f003 fa5f 	bl	8003964 <iprintf>
}
 80004a6:	e7f6      	b.n	8000496 <PrintReg16+0x1e>
 80004a8:	08004be0 	.word	0x08004be0
 80004ac:	08004c08 	.word	0x08004c08

080004b0 <PrintReg24>:

void PrintReg24(DAC_SPI_Register reg) {
 80004b0:	b510      	push	{r4, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	0004      	movs	r4, r0
  uint32_t i32 = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef res = DAC_SPI_Read24(reg, &i32);
 80004ba:	a901      	add	r1, sp, #4
 80004bc:	f000 f9ac 	bl	8000818 <DAC_SPI_Read24>
 80004c0:	1e02      	subs	r2, r0, #0
  if (res != HAL_OK) printf("0x%02X: Read error %u\n", (uint8_t)reg, (uint8_t)res);
 80004c2:	d005      	beq.n	80004d0 <PrintReg24+0x20>
 80004c4:	0021      	movs	r1, r4
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <PrintReg24+0x2c>)
 80004c8:	f003 fa4c 	bl	8003964 <iprintf>
  else printf("0x%02X: 0x%06lX\n", (uint8_t)reg, i32);
}
 80004cc:	b002      	add	sp, #8
 80004ce:	bd10      	pop	{r4, pc}
  else printf("0x%02X: 0x%06lX\n", (uint8_t)reg, i32);
 80004d0:	9a01      	ldr	r2, [sp, #4]
 80004d2:	0021      	movs	r1, r4
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <PrintReg24+0x30>)
 80004d6:	f003 fa45 	bl	8003964 <iprintf>
}
 80004da:	e7f7      	b.n	80004cc <PrintReg24+0x1c>
 80004dc:	08004be0 	.word	0x08004be0
 80004e0:	08004c18 	.word	0x08004c18

080004e4 <PrintAllRegisters>:

void PrintAllRegisters() {
 80004e4:	b510      	push	{r4, lr}
  PrintReg8(REG_SYSTEM_CONFIG);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff ffaa 	bl	8000440 <PrintReg8>
  PrintReg8(REG_SYS_MODE_CONFIG);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ffa7 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_CLOCK_CONFIG);
 80004f2:	2003      	movs	r0, #3
 80004f4:	f7ff ffa4 	bl	8000440 <PrintReg8>
  PrintReg8(REG_CLOCK_CONFIG);
 80004f8:	2004      	movs	r0, #4
 80004fa:	f7ff ffa1 	bl	8000440 <PrintReg8>
  PrintReg8(REG_CLK_GEAR_SELECT);
 80004fe:	2005      	movs	r0, #5
 8000500:	f7ff ff9e 	bl	8000440 <PrintReg8>
  PrintReg16(REG_INTERRUPT_MASKP);
 8000504:	200a      	movs	r0, #10
 8000506:	f7ff ffb7 	bl	8000478 <PrintReg16>
  PrintReg16(REG_INTERRUPT_MASKN);
 800050a:	200f      	movs	r0, #15
 800050c:	f7ff ffb4 	bl	8000478 <PrintReg16>
  PrintReg16(REG_INTERRUPT_CLEAR);
 8000510:	2014      	movs	r0, #20
 8000512:	f7ff ffb1 	bl	8000478 <PrintReg16>
  PrintReg8(REG_DPLL_BW);
 8000516:	201d      	movs	r0, #29
 8000518:	f7ff ff92 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DATA_PATH_CONFIG);
 800051c:	2022      	movs	r0, #34	; 0x22
 800051e:	f7ff ff8f 	bl	8000440 <PrintReg8>
  PrintReg8(REG_PCM_4X_GAIN);
 8000522:	2023      	movs	r0, #35	; 0x23
 8000524:	f7ff ff8c 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO12_CONFIG);
 8000528:	2025      	movs	r0, #37	; 0x25
 800052a:	f7ff ff89 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO34_CONFIG);
 800052e:	2026      	movs	r0, #38	; 0x26
 8000530:	f7ff ff86 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO56_CONFIG);
 8000534:	2027      	movs	r0, #39	; 0x27
 8000536:	f7ff ff83 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO78_CONFIG);
 800053a:	2028      	movs	r0, #40	; 0x28
 800053c:	f7ff ff80 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO_OUTPUT_ENABLE);
 8000540:	2029      	movs	r0, #41	; 0x29
 8000542:	f7ff ff7d 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO_INPUT);
 8000546:	202a      	movs	r0, #42	; 0x2a
 8000548:	f7ff ff7a 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO_WK_EN);
 800054c:	202b      	movs	r0, #43	; 0x2b
 800054e:	f7ff ff77 	bl	8000440 <PrintReg8>
  PrintReg8(REG_INVERT_GPIO);
 8000552:	202c      	movs	r0, #44	; 0x2c
 8000554:	f7ff ff74 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO_READ_EN);
 8000558:	202d      	movs	r0, #45	; 0x2d
 800055a:	f7ff ff71 	bl	8000440 <PrintReg8>
  PrintReg16(REG_GPIO_OUTPUT_LOGIC);
 800055e:	202e      	movs	r0, #46	; 0x2e
 8000560:	f7ff ff8a 	bl	8000478 <PrintReg16>
  PrintReg8(REG_PWM1_COUNT);
 8000564:	2030      	movs	r0, #48	; 0x30
 8000566:	f7ff ff6b 	bl	8000440 <PrintReg8>
  PrintReg16(REG_PWM1_FREQUENCY);
 800056a:	2031      	movs	r0, #49	; 0x31
 800056c:	f7ff ff84 	bl	8000478 <PrintReg16>
  PrintReg8(REG_PWM2_COUNT);
 8000570:	2033      	movs	r0, #51	; 0x33
 8000572:	f7ff ff65 	bl	8000440 <PrintReg8>
  PrintReg16(REG_PWM2_FREQUENCY);
 8000576:	2034      	movs	r0, #52	; 0x34
 8000578:	f7ff ff7e 	bl	8000478 <PrintReg16>
  PrintReg8(REG_PWM3_COUNT);
 800057c:	2036      	movs	r0, #54	; 0x36
 800057e:	f7ff ff5f 	bl	8000440 <PrintReg8>
  PrintReg16(REG_PWM3_FREQUENCY);
 8000582:	2037      	movs	r0, #55	; 0x37
 8000584:	f7ff ff78 	bl	8000478 <PrintReg16>
  PrintReg8(REG_INPUT_SELECTION);
 8000588:	2039      	movs	r0, #57	; 0x39
 800058a:	f7ff ff59 	bl	8000440 <PrintReg8>
  PrintReg8(REG_MASTER_ENCODER_CONFIG);
 800058e:	203a      	movs	r0, #58	; 0x3a
 8000590:	f7ff ff56 	bl	8000440 <PrintReg8>
  PrintReg8(REG_TDM_CONFIG);
 8000594:	203b      	movs	r0, #59	; 0x3b
 8000596:	f7ff ff53 	bl	8000440 <PrintReg8>
  PrintReg8(REG_TDM_CONFIG1);
 800059a:	203c      	movs	r0, #60	; 0x3c
 800059c:	f7ff ff50 	bl	8000440 <PrintReg8>
  PrintReg8(REG_TDM_CONFIG2);
 80005a0:	203d      	movs	r0, #61	; 0x3d
 80005a2:	f7ff ff4d 	bl	8000440 <PrintReg8>
  PrintReg8(REG_BCKWS_MONITOR_CONFIG);
 80005a6:	203e      	movs	r0, #62	; 0x3e
 80005a8:	f7ff ff4a 	bl	8000440 <PrintReg8>
  PrintReg8(REG_CH1_SLOT_CONFIG);
 80005ac:	2040      	movs	r0, #64	; 0x40
 80005ae:	f7ff ff47 	bl	8000440 <PrintReg8>
  PrintReg8(REG_CH2_SLOT_CONFIG);
 80005b2:	2041      	movs	r0, #65	; 0x41
 80005b4:	f7ff ff44 	bl	8000440 <PrintReg8>
  PrintReg8(REG_VOLUME_CH1);
 80005b8:	204a      	movs	r0, #74	; 0x4a
 80005ba:	f7ff ff41 	bl	8000440 <PrintReg8>
  PrintReg8(REG_VOLUME_CH2);
 80005be:	204b      	movs	r0, #75	; 0x4b
 80005c0:	f7ff ff3e 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_VOL_UP_RATE);
 80005c4:	2052      	movs	r0, #82	; 0x52
 80005c6:	f7ff ff3b 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_VOL_DOWN_RATE);
 80005ca:	2053      	movs	r0, #83	; 0x53
 80005cc:	f7ff ff38 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_VOL_DOWN_RATE_FAST);
 80005d0:	2054      	movs	r0, #84	; 0x54
 80005d2:	f7ff ff35 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_MUTE);
 80005d6:	2056      	movs	r0, #86	; 0x56
 80005d8:	f7ff ff32 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_INVERT);
 80005dc:	2057      	movs	r0, #87	; 0x57
 80005de:	f7ff ff2f 	bl	8000440 <PrintReg8>
  PrintReg8(REG_FILTER_SHAPE);
 80005e2:	2058      	movs	r0, #88	; 0x58
 80005e4:	f7ff ff2c 	bl	8000440 <PrintReg8>
  PrintReg8(REG_IIR_BANDWIDTH_SPDIF_SEL);
 80005e8:	2059      	movs	r0, #89	; 0x59
 80005ea:	f7ff ff29 	bl	8000440 <PrintReg8>
  PrintReg8(REG_DAC_PATH_CONFIG);
 80005ee:	205a      	movs	r0, #90	; 0x5a
 80005f0:	f7ff ff26 	bl	8000440 <PrintReg8>
  PrintReg16(REG_THD_C2_CH1);
 80005f4:	205b      	movs	r0, #91	; 0x5b
 80005f6:	f7ff ff3f 	bl	8000478 <PrintReg16>
  PrintReg16(REG_THD_C2_CH2);
 80005fa:	205d      	movs	r0, #93	; 0x5d
 80005fc:	f7ff ff3c 	bl	8000478 <PrintReg16>
  PrintReg16(REG_THD_C3_CH1);
 8000600:	206b      	movs	r0, #107	; 0x6b
 8000602:	f7ff ff39 	bl	8000478 <PrintReg16>
  PrintReg16(REG_THD_C3_CH2);
 8000606:	206d      	movs	r0, #109	; 0x6d
 8000608:	f7ff ff36 	bl	8000478 <PrintReg16>
  PrintReg8(REG_AUTOMUTE_ENABLE);
 800060c:	207b      	movs	r0, #123	; 0x7b
 800060e:	f7ff ff17 	bl	8000440 <PrintReg8>
  PrintReg16(REG_AUTOMUTE_TIME);
 8000612:	207c      	movs	r0, #124	; 0x7c
 8000614:	f7ff ff30 	bl	8000478 <PrintReg16>
  PrintReg16(REG_AUTOMUTE_LEVEL);
 8000618:	207e      	movs	r0, #126	; 0x7e
 800061a:	f7ff ff2d 	bl	8000478 <PrintReg16>
  PrintReg16(REG_AUTOMUTE_OFF_LEVEL);
 800061e:	2080      	movs	r0, #128	; 0x80
 8000620:	f7ff ff2a 	bl	8000478 <PrintReg16>
  PrintReg8(REG_SOFT_RAMP_CONFIG);
 8000624:	2082      	movs	r0, #130	; 0x82
 8000626:	f7ff ff0b 	bl	8000440 <PrintReg8>
  PrintReg8(REG_PROGRAM_RAM_CONTROL);
 800062a:	2087      	movs	r0, #135	; 0x87
 800062c:	f7ff ff08 	bl	8000440 <PrintReg8>
  PrintReg8(REG_SPDIF_READ_CONTROL);
 8000630:	2088      	movs	r0, #136	; 0x88
 8000632:	f7ff ff05 	bl	8000440 <PrintReg8>
  PrintReg8(REG_PROGRAM_RAM_ADDRESS);
 8000636:	2089      	movs	r0, #137	; 0x89
 8000638:	f7ff ff02 	bl	8000440 <PrintReg8>
  PrintReg24(REG_PROGRAM_RAM_DATA);
 800063c:	208a      	movs	r0, #138	; 0x8a
 800063e:	f7ff ff37 	bl	80004b0 <PrintReg24>
  PrintReg8(REG_CHIP_ID_READ);
 8000642:	20e1      	movs	r0, #225	; 0xe1
 8000644:	f7ff fefc 	bl	8000440 <PrintReg8>
  PrintReg16(REG_INTERRUPT_STATES);
 8000648:	20e5      	movs	r0, #229	; 0xe5
 800064a:	f7ff ff15 	bl	8000478 <PrintReg16>
  PrintReg16(REG_INTERRUPT_SOURCES);
 800064e:	20ea      	movs	r0, #234	; 0xea
 8000650:	f7ff ff12 	bl	8000478 <PrintReg16>
  PrintReg8(REG_RATIO_VALID_READ);
 8000654:	20ef      	movs	r0, #239	; 0xef
 8000656:	f7ff fef3 	bl	8000440 <PrintReg8>
  PrintReg8(REG_GPIO_READ);
 800065a:	20f0      	movs	r0, #240	; 0xf0
 800065c:	f7ff fef0 	bl	8000440 <PrintReg8>
  PrintReg8(REG_VOL_MIN_READ);
 8000660:	20f1      	movs	r0, #241	; 0xf1
 8000662:	f7ff feed 	bl	8000440 <PrintReg8>
  PrintReg8(REG_AUTOMUTE_READ);
 8000666:	20f2      	movs	r0, #242	; 0xf2
 8000668:	f7ff feea 	bl	8000440 <PrintReg8>
  PrintReg8(REG_SOFT_RAMP_UP_READ);
 800066c:	20f3      	movs	r0, #243	; 0xf3
 800066e:	f7ff fee7 	bl	8000440 <PrintReg8>
  PrintReg8(REG_SOFT_RAMP_DOWN_READ);
 8000672:	20f4      	movs	r0, #244	; 0xf4
 8000674:	f7ff fee4 	bl	8000440 <PrintReg8>
  PrintReg8(REG_INPUT_STREAM_READBACK);
 8000678:	20f5      	movs	r0, #245	; 0xf5
 800067a:	f7ff fee1 	bl	8000440 <PrintReg8>
  PrintReg24(REG_PROG_COEFF_OUT_READ);
 800067e:	20f6      	movs	r0, #246	; 0xf6
 8000680:	f7ff ff16 	bl	80004b0 <PrintReg24>
  PrintReg8(REG_SPDIF_DATA_READ);
 8000684:	20fb      	movs	r0, #251	; 0xfb
 8000686:	f7ff fedb 	bl	8000440 <PrintReg8>
}
 800068a:	bd10      	pop	{r4, pc}

0800068c <DAC_Initialize>:
#endif

/**
 * Initialize the DAC chip with this application's basic settings
 */
HAL_StatusTypeDef DAC_Initialize() {
 800068c:	b510      	push	{r4, lr}

  ReturnOnError(DAC_SPI_Write8(REG_SYSTEM_CONFIG, 0x80)); //perform soft reset
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f825 	bl	80006e0 <DAC_SPI_Write8>
 8000696:	1e04      	subs	r4, r0, #0
 8000698:	d001      	beq.n	800069e <DAC_Initialize+0x12>
#ifdef DEBUG
  PrintAllRegisters();
#endif

  return HAL_OK;
}
 800069a:	0020      	movs	r0, r4
 800069c:	bd10      	pop	{r4, pc}
  HAL_Delay(10);
 800069e:	200a      	movs	r0, #10
 80006a0:	f000 fd3a 	bl	8001118 <HAL_Delay>
  ReturnOnError(DAC_SPI_WriteConfirm8(REG_DAC_CLOCK_CONFIG, 0x80)); //keep auto detection on (shouldn't matter), set CLK_IDAC = SYS_CLK / 2, resulting in 128 * 96k
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	2003      	movs	r0, #3
 80006a8:	f000 f87e 	bl	80007a8 <DAC_SPI_WriteConfirm8>
 80006ac:	1e04      	subs	r4, r0, #0
 80006ae:	d1f4      	bne.n	800069a <DAC_Initialize+0xe>
  ReturnOnError(DAC_SPI_WriteConfirm8(REG_VOLUME_CH1, 0x04)); //write initial channel volume - modify for calibration
 80006b0:	2104      	movs	r1, #4
 80006b2:	204a      	movs	r0, #74	; 0x4a
 80006b4:	f000 f878 	bl	80007a8 <DAC_SPI_WriteConfirm8>
 80006b8:	1e04      	subs	r4, r0, #0
 80006ba:	d1ee      	bne.n	800069a <DAC_Initialize+0xe>
  ReturnOnError(DAC_SPI_WriteConfirm8(REG_VOLUME_CH2, 0x04));
 80006bc:	2104      	movs	r1, #4
 80006be:	204b      	movs	r0, #75	; 0x4b
 80006c0:	f000 f872 	bl	80007a8 <DAC_SPI_WriteConfirm8>
 80006c4:	1e04      	subs	r4, r0, #0
 80006c6:	d1e8      	bne.n	800069a <DAC_Initialize+0xe>
  HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f000 fd25 	bl	8001118 <HAL_Delay>
  ReturnOnError(DAC_SPI_WriteConfirm8(REG_SYSTEM_CONFIG, 0x02)); //enable DAC analog section
 80006ce:	2102      	movs	r1, #2
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 f869 	bl	80007a8 <DAC_SPI_WriteConfirm8>
 80006d6:	1e04      	subs	r4, r0, #0
 80006d8:	d1df      	bne.n	800069a <DAC_Initialize+0xe>
  PrintAllRegisters();
 80006da:	f7ff ff03 	bl	80004e4 <PrintAllRegisters>
  return HAL_OK;
 80006de:	e7dc      	b.n	800069a <DAC_Initialize+0xe>

080006e0 <DAC_SPI_Write8>:
#define DAC_SPI_IS_READONLY(x) (x >= 0xE0 && x <= 0xFB)

/**
 * Write data to DAC register
 */
HAL_StatusTypeDef DAC_SPI_Write8(DAC_SPI_Register reg, uint8_t data) {
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	b083      	sub	sp, #12
  uint8_t spi_data[3] = { 0 };
 80006e4:	ab01      	add	r3, sp, #4
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <DAC_SPI_Write8+0x4c>)
 80006e8:	8812      	ldrh	r2, [r2, #0]
 80006ea:	801a      	strh	r2, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	709a      	strb	r2, [r3, #2]

  uint8_t address = (uint8_t)reg;

  if (!DAC_SPI_IS_READWRITE(address)) return HAL_ERROR;
 80006f0:	288e      	cmp	r0, #142	; 0x8e
 80006f2:	d903      	bls.n	80006fc <DAC_SPI_Write8+0x1c>
 80006f4:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
  HAL_StatusTypeDef result = HAL_SPI_Transmit(&hspi1, spi_data, 3, 100);
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

  return result;
}
 80006f6:	0020      	movs	r0, r4
 80006f8:	b003      	add	sp, #12
 80006fa:	bd30      	pop	{r4, r5, pc}
  spi_data[0] = 0x03; //write command
 80006fc:	001c      	movs	r4, r3
 80006fe:	2303      	movs	r3, #3
 8000700:	7023      	strb	r3, [r4, #0]
  spi_data[1] = address;
 8000702:	7060      	strb	r0, [r4, #1]
  spi_data[2] = data;
 8000704:	70a1      	strb	r1, [r4, #2]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000706:	25a0      	movs	r5, #160	; 0xa0
 8000708:	05ed      	lsls	r5, r5, #23
 800070a:	2110      	movs	r1, #16
 800070c:	0028      	movs	r0, r5
 800070e:	f000 feda 	bl	80014c6 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef result = HAL_SPI_Transmit(&hspi1, spi_data, 3, 100);
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	2203      	movs	r2, #3
 8000716:	0021      	movs	r1, r4
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <DAC_SPI_Write8+0x50>)
 800071a:	f001 ffd5 	bl	80026c8 <HAL_SPI_Transmit>
 800071e:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2110      	movs	r1, #16
 8000724:	0028      	movs	r0, r5
 8000726:	f000 fece 	bl	80014c6 <HAL_GPIO_WritePin>
  return result;
 800072a:	e7e4      	b.n	80006f6 <DAC_SPI_Write8+0x16>
 800072c:	08004bc8 	.word	0x08004bc8
 8000730:	200000d8 	.word	0x200000d8

08000734 <DAC_SPI_Read8>:
}

/**
 * Read data from DAC register
 */
HAL_StatusTypeDef DAC_SPI_Read8(DAC_SPI_Register reg, uint8_t* data) {
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	000d      	movs	r5, r1
  uint8_t spi_send_data[3] = { 0 };
 800073a:	ab03      	add	r3, sp, #12
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <DAC_SPI_Read8+0x6c>)
 800073e:	8811      	ldrh	r1, [r2, #0]
 8000740:	8019      	strh	r1, [r3, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	709a      	strb	r2, [r3, #2]
  uint8_t spi_receive_data[3] = { 0 };
 8000746:	ab02      	add	r3, sp, #8
 8000748:	8019      	strh	r1, [r3, #0]
 800074a:	709a      	strb	r2, [r3, #2]

  uint8_t address = (uint8_t)reg;

  if (!(DAC_SPI_IS_READWRITE(address) || DAC_SPI_IS_READONLY(address))) return HAL_ERROR;
 800074c:	288e      	cmp	r0, #142	; 0x8e
 800074e:	d904      	bls.n	800075a <DAC_SPI_Read8+0x26>
 8000750:	0003      	movs	r3, r0
 8000752:	3320      	adds	r3, #32
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b1b      	cmp	r3, #27
 8000758:	d820      	bhi.n	800079c <DAC_SPI_Read8+0x68>

  spi_send_data[0] = 0x01; //read command
 800075a:	2301      	movs	r3, #1
 800075c:	466a      	mov	r2, sp
 800075e:	7313      	strb	r3, [r2, #12]
  spi_send_data[1] = address;
 8000760:	7350      	strb	r0, [r2, #13]

  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000762:	26a0      	movs	r6, #160	; 0xa0
 8000764:	05f6      	lsls	r6, r6, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2110      	movs	r1, #16
 800076a:	0030      	movs	r0, r6
 800076c:	f000 feab 	bl	80014c6 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(&hspi1, spi_send_data, spi_receive_data, 3, 100);
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	3b61      	subs	r3, #97	; 0x61
 8000776:	aa02      	add	r2, sp, #8
 8000778:	a903      	add	r1, sp, #12
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <DAC_SPI_Read8+0x70>)
 800077c:	f002 f89e 	bl	80028bc <HAL_SPI_TransmitReceive>
 8000780:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2110      	movs	r1, #16
 8000786:	0030      	movs	r0, r6
 8000788:	f000 fe9d 	bl	80014c6 <HAL_GPIO_WritePin>

  if (result == HAL_OK) *data = spi_receive_data[2];
 800078c:	2c00      	cmp	r4, #0
 800078e:	d102      	bne.n	8000796 <DAC_SPI_Read8+0x62>
 8000790:	ab02      	add	r3, sp, #8
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	702b      	strb	r3, [r5, #0]
  return result;
}
 8000796:	0020      	movs	r0, r4
 8000798:	b004      	add	sp, #16
 800079a:	bd70      	pop	{r4, r5, r6, pc}
  if (!(DAC_SPI_IS_READWRITE(address) || DAC_SPI_IS_READONLY(address))) return HAL_ERROR;
 800079c:	2401      	movs	r4, #1
 800079e:	e7fa      	b.n	8000796 <DAC_SPI_Read8+0x62>
 80007a0:	08004bc8 	.word	0x08004bc8
 80007a4:	200000d8 	.word	0x200000d8

080007a8 <DAC_SPI_WriteConfirm8>:
HAL_StatusTypeDef DAC_SPI_WriteConfirm8(DAC_SPI_Register reg, uint8_t data) {
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	0004      	movs	r4, r0
 80007ae:	000d      	movs	r5, r1
  uint8_t readback = 0;
 80007b0:	466b      	mov	r3, sp
 80007b2:	2200      	movs	r2, #0
 80007b4:	71da      	strb	r2, [r3, #7]
  ReturnOnError(DAC_SPI_Write8(reg, data));
 80007b6:	f7ff ff93 	bl	80006e0 <DAC_SPI_Write8>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d001      	beq.n	80007c2 <DAC_SPI_WriteConfirm8+0x1a>
}
 80007be:	b003      	add	sp, #12
 80007c0:	bd30      	pop	{r4, r5, pc}
  ReturnOnError(DAC_SPI_Read8(reg, &readback));
 80007c2:	466b      	mov	r3, sp
 80007c4:	1dd9      	adds	r1, r3, #7
 80007c6:	0020      	movs	r0, r4
 80007c8:	f7ff ffb4 	bl	8000734 <DAC_SPI_Read8>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1f6      	bne.n	80007be <DAC_SPI_WriteConfirm8+0x16>
  if (data == readback) return HAL_OK;
 80007d0:	466b      	mov	r3, sp
 80007d2:	3307      	adds	r3, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	42ab      	cmp	r3, r5
 80007d8:	d0f1      	beq.n	80007be <DAC_SPI_WriteConfirm8+0x16>
  else return HAL_ERROR;
 80007da:	3001      	adds	r0, #1
 80007dc:	e7ef      	b.n	80007be <DAC_SPI_WriteConfirm8+0x16>

080007de <DAC_SPI_Read16>:

HAL_StatusTypeDef DAC_SPI_Read16(DAC_SPI_Register reg, uint16_t* data) {
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	b083      	sub	sp, #12
 80007e2:	0005      	movs	r5, r0
 80007e4:	000c      	movs	r4, r1
  uint8_t read16data[2] = { 0 };
 80007e6:	a901      	add	r1, sp, #4
 80007e8:	2300      	movs	r3, #0
 80007ea:	800b      	strh	r3, [r1, #0]

  ReturnOnError(DAC_SPI_Read8(reg, read16data));
 80007ec:	f7ff ffa2 	bl	8000734 <DAC_SPI_Read8>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d001      	beq.n	80007f8 <DAC_SPI_Read16+0x1a>
  HAL_StatusTypeDef result = DAC_SPI_Read8(reg + 1, read16data + 1);

  if (result == HAL_OK) *data = (uint16_t)read16data[0] | ((uint16_t)read16data[1] << 8);
  return result;
}
 80007f4:	b003      	add	sp, #12
 80007f6:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef result = DAC_SPI_Read8(reg + 1, read16data + 1);
 80007f8:	3501      	adds	r5, #1
 80007fa:	b2e8      	uxtb	r0, r5
 80007fc:	466b      	mov	r3, sp
 80007fe:	1d59      	adds	r1, r3, #5
 8000800:	f7ff ff98 	bl	8000734 <DAC_SPI_Read8>
  if (result == HAL_OK) *data = (uint16_t)read16data[0] | ((uint16_t)read16data[1] << 8);
 8000804:	2800      	cmp	r0, #0
 8000806:	d1f5      	bne.n	80007f4 <DAC_SPI_Read16+0x16>
 8000808:	aa01      	add	r2, sp, #4
 800080a:	7813      	ldrb	r3, [r2, #0]
 800080c:	7852      	ldrb	r2, [r2, #1]
 800080e:	0212      	lsls	r2, r2, #8
 8000810:	4313      	orrs	r3, r2
 8000812:	8023      	strh	r3, [r4, #0]
 8000814:	e7ee      	b.n	80007f4 <DAC_SPI_Read16+0x16>
	...

08000818 <DAC_SPI_Read24>:

HAL_StatusTypeDef DAC_SPI_Read24(DAC_SPI_Register reg, uint32_t* data) {
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	b083      	sub	sp, #12
 800081c:	0005      	movs	r5, r0
 800081e:	000c      	movs	r4, r1
  uint8_t read24data[3] = { 0 };
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <DAC_SPI_Read24+0x58>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	466a      	mov	r2, sp
 8000826:	8093      	strh	r3, [r2, #4]
 8000828:	2300      	movs	r3, #0
 800082a:	7193      	strb	r3, [r2, #6]

  ReturnOnError(DAC_SPI_Read8(reg, read24data));
 800082c:	a901      	add	r1, sp, #4
 800082e:	f7ff ff81 	bl	8000734 <DAC_SPI_Read8>
 8000832:	2800      	cmp	r0, #0
 8000834:	d001      	beq.n	800083a <DAC_SPI_Read24+0x22>
  ReturnOnError(DAC_SPI_Read8(reg + 1, read24data + 1));
  HAL_StatusTypeDef result = DAC_SPI_Read8(reg + 2, read24data + 2);

  if (result == HAL_OK) *data = (uint32_t)read24data[0] | ((uint32_t)read24data[1] << 8) | ((uint32_t)read24data[2] << 16);
  return result;
}
 8000836:	b003      	add	sp, #12
 8000838:	bd30      	pop	{r4, r5, pc}
  ReturnOnError(DAC_SPI_Read8(reg + 1, read24data + 1));
 800083a:	1c68      	adds	r0, r5, #1
 800083c:	b2c0      	uxtb	r0, r0
 800083e:	466b      	mov	r3, sp
 8000840:	1d59      	adds	r1, r3, #5
 8000842:	f7ff ff77 	bl	8000734 <DAC_SPI_Read8>
 8000846:	2800      	cmp	r0, #0
 8000848:	d1f5      	bne.n	8000836 <DAC_SPI_Read24+0x1e>
  HAL_StatusTypeDef result = DAC_SPI_Read8(reg + 2, read24data + 2);
 800084a:	3502      	adds	r5, #2
 800084c:	b2e8      	uxtb	r0, r5
 800084e:	466b      	mov	r3, sp
 8000850:	1d99      	adds	r1, r3, #6
 8000852:	f7ff ff6f 	bl	8000734 <DAC_SPI_Read8>
  if (result == HAL_OK) *data = (uint32_t)read24data[0] | ((uint32_t)read24data[1] << 8) | ((uint32_t)read24data[2] << 16);
 8000856:	2800      	cmp	r0, #0
 8000858:	d1ed      	bne.n	8000836 <DAC_SPI_Read24+0x1e>
 800085a:	aa01      	add	r2, sp, #4
 800085c:	7813      	ldrb	r3, [r2, #0]
 800085e:	7851      	ldrb	r1, [r2, #1]
 8000860:	0209      	lsls	r1, r1, #8
 8000862:	430b      	orrs	r3, r1
 8000864:	7892      	ldrb	r2, [r2, #2]
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	4313      	orrs	r3, r2
 800086a:	6023      	str	r3, [r4, #0]
 800086c:	e7e3      	b.n	8000836 <DAC_SPI_Read24+0x1e>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	08004bc8 	.word	0x08004bc8

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000876:	46ce      	mov	lr, r9
 8000878:	4647      	mov	r7, r8
 800087a:	b580      	push	{r7, lr}
 800087c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	2214      	movs	r2, #20
 8000880:	2100      	movs	r1, #0
 8000882:	a803      	add	r0, sp, #12
 8000884:	f003 f865 	bl	8003952 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <MX_GPIO_Init+0xf4>)
 800088a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800088c:	2204      	movs	r2, #4
 800088e:	4311      	orrs	r1, r2
 8000890:	6359      	str	r1, [r3, #52]	; 0x34
 8000892:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000894:	400a      	ands	r2, r1
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089c:	2501      	movs	r5, #1
 800089e:	432a      	orrs	r2, r5
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
 80008a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a4:	402a      	ands	r2, r5
 80008a6:	9201      	str	r2, [sp, #4]
 80008a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008ac:	2202      	movs	r2, #2
 80008ae:	4311      	orrs	r1, r2
 80008b0:	6359      	str	r1, [r3, #52]	; 0x34
 80008b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b4:	401a      	ands	r2, r3
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_EN_GPIO_Port, DAC_EN_Pin, GPIO_PIN_RESET);
 80008ba:	27a0      	movs	r7, #160	; 0xa0
 80008bc:	05ff      	lsls	r7, r7, #23
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	0038      	movs	r0, r7
 80008c4:	f000 fdff 	bl	80014c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	0038      	movs	r0, r7
 80008ce:	f000 fdfa 	bl	80014c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_INT_N_GPIO_Port, I2C_INT_N_Pin, GPIO_PIN_SET);
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4698      	mov	r8, r3
 80008d8:	4e24      	ldr	r6, [pc, #144]	; (800096c <MX_GPIO_Init+0xf8>)
 80008da:	2201      	movs	r2, #1
 80008dc:	0019      	movs	r1, r3
 80008de:	0030      	movs	r0, r6
 80008e0:	f000 fdf1 	bl	80014c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DAC_EN_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = DAC_EN_Pin|SPI1_NSS_Pin;
 80008e4:	2318      	movs	r3, #24
 80008e6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2400      	movs	r4, #0
 80008ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	a903      	add	r1, sp, #12
 80008f2:	0038      	movs	r0, r7
 80008f4:	f000 fd02 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_GPIO_Init+0xfc>)
 80008fe:	4699      	mov	r9, r3
 8000900:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 8000904:	a903      	add	r1, sp, #12
 8000906:	0038      	movs	r0, r7
 8000908:	f000 fcf8 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 800090c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800090e:	464b      	mov	r3, r9
 8000910:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000914:	a903      	add	r1, sp, #12
 8000916:	0030      	movs	r0, r6
 8000918:	f000 fcf0 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|GPIO4_Pin;
 800091c:	2306      	movs	r3, #6
 800091e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	a903      	add	r1, sp, #12
 8000926:	0030      	movs	r0, r6
 8000928:	f000 fce8 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_N_Pin */
  GPIO_InitStruct.Pin = I2C_INT_N_Pin;
 800092c:	4643      	mov	r3, r8
 800092e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(I2C_INT_N_GPIO_Port, &GPIO_InitStruct);
 8000936:	a903      	add	r1, sp, #12
 8000938:	0030      	movs	r0, r6
 800093a:	f000 fcdf 	bl	80012fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2005      	movs	r0, #5
 8000944:	f000 fbfa 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000948:	2005      	movs	r0, #5
 800094a:	f000 fc27 	bl	800119c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2007      	movs	r0, #7
 8000954:	f000 fbf2 	bl	800113c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000958:	2007      	movs	r0, #7
 800095a:	f000 fc1f 	bl	800119c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095e:	b009      	add	sp, #36	; 0x24
 8000960:	bcc0      	pop	{r6, r7}
 8000962:	46b9      	mov	r9, r7
 8000964:	46b0      	mov	r8, r6
 8000966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	50000400 	.word	0x50000400
 8000970:	10310000 	.word	0x10310000

08000974 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000974:	b510      	push	{r4, lr}
  switch (GPIO_Pin) {
 8000976:	2801      	cmp	r0, #1
 8000978:	d005      	beq.n	8000986 <HAL_GPIO_EXTI_Rising_Callback+0x12>
 800097a:	2880      	cmp	r0, #128	; 0x80
 800097c:	d102      	bne.n	8000984 <HAL_GPIO_EXTI_Rising_Callback+0x10>
      printf("Automute muted\n");
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8000980:	f003 f87c 	bl	8003a7c <puts>
}
 8000984:	bd10      	pop	{r4, pc}
      printf("SRC locked\n");
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8000988:	f003 f878 	bl	8003a7c <puts>
}
 800098c:	e7fa      	b.n	8000984 <HAL_GPIO_EXTI_Rising_Callback+0x10>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	08004c2c 	.word	0x08004c2c
 8000994:	08004c3c 	.word	0x08004c3c

08000998 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000998:	b510      	push	{r4, lr}
  switch (GPIO_Pin) {
 800099a:	2801      	cmp	r0, #1
 800099c:	d005      	beq.n	80009aa <HAL_GPIO_EXTI_Falling_Callback+0x12>
 800099e:	2880      	cmp	r0, #128	; 0x80
 80009a0:	d102      	bne.n	80009a8 <HAL_GPIO_EXTI_Falling_Callback+0x10>
      printf("Automute unmuted\n");
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <HAL_GPIO_EXTI_Falling_Callback+0x1c>)
 80009a4:	f003 f86a 	bl	8003a7c <puts>
}
 80009a8:	bd10      	pop	{r4, pc}
      printf("SRC lock lost\n");
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <HAL_GPIO_EXTI_Falling_Callback+0x20>)
 80009ac:	f003 f866 	bl	8003a7c <puts>
}
 80009b0:	e7fa      	b.n	80009a8 <HAL_GPIO_EXTI_Falling_Callback+0x10>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	08004c48 	.word	0x08004c48
 80009b8:	08004c5c 	.word	0x08004c5c

080009bc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009be:	e7fe      	b.n	80009be <Error_Handler+0x2>

080009c0 <MX_SPI1_Init>:
{
 80009c0:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <MX_SPI1_Init+0x44>)
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_SPI1_Init+0x48>)
 80009c6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c8:	2382      	movs	r3, #130	; 0x82
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	2300      	movs	r3, #0
 80009d0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d2:	22e0      	movs	r2, #224	; 0xe0
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009e2:	3ad1      	subs	r2, #209	; 0xd1
 80009e4:	3aff      	subs	r2, #255	; 0xff
 80009e6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ec:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ee:	3a29      	subs	r2, #41	; 0x29
 80009f0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f6:	f001 fde5 	bl	80025c4 <HAL_SPI_Init>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d100      	bne.n	8000a00 <MX_SPI1_Init+0x40>
}
 80009fe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a00:	f7ff ffdc 	bl	80009bc <Error_Handler>
 8000a04:	200000d8 	.word	0x200000d8
 8000a08:	40013000 	.word	0x40013000

08000a0c <MX_I2C1_Init>:
{
 8000a0c:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_I2C1_Init+0x54>)
 8000a12:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00802D3B;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_I2C1_Init+0x58>)
 8000a16:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 58;
 8000a18:	233a      	movs	r3, #58	; 0x3a
 8000a1a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	3b39      	subs	r3, #57	; 0x39
 8000a1e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a24:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a26:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2c:	f000 fdb0 	bl	8001590 <HAL_I2C_Init>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d10c      	bne.n	8000a4e <MX_I2C1_Init+0x42>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a38:	f001 f91e 	bl	8001c78 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d108      	bne.n	8000a52 <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_I2C1_Init+0x50>)
 8000a44:	f001 f944 	bl	8001cd0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d104      	bne.n	8000a56 <MX_I2C1_Init+0x4a>
}
 8000a4c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a4e:	f7ff ffb5 	bl	80009bc <Error_Handler>
    Error_Handler();
 8000a52:	f7ff ffb3 	bl	80009bc <Error_Handler>
    Error_Handler();
 8000a56:	f7ff ffb1 	bl	80009bc <Error_Handler>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	40005400 	.word	0x40005400
 8000a64:	00802d3b 	.word	0x00802d3b

08000a68 <MX_USART1_UART_Init>:
{
 8000a68:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <MX_USART1_UART_Init+0x60>)
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_USART1_UART_Init+0x64>)
 8000a6e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000a70:	23e1      	movs	r3, #225	; 0xe1
 8000a72:	025b      	lsls	r3, r3, #9
 8000a74:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	2300      	movs	r3, #0
 8000a78:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a7e:	220c      	movs	r2, #12
 8000a80:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a8c:	f002 fe5c 	bl	8003748 <HAL_UART_Init>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d111      	bne.n	8000ab8 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_USART1_UART_Init+0x60>)
 8000a98:	f002 feda 	bl	8003850 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d10d      	bne.n	8000abc <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_USART1_UART_Init+0x60>)
 8000aa4:	f002 fefa 	bl	800389c <HAL_UARTEx_SetRxFifoThreshold>
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d109      	bne.n	8000ac0 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_USART1_UART_Init+0x60>)
 8000aae:	f002 feaf 	bl	8003810 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d106      	bne.n	8000ac4 <MX_USART1_UART_Init+0x5c>
}
 8000ab6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ab8:	f7ff ff80 	bl	80009bc <Error_Handler>
    Error_Handler();
 8000abc:	f7ff ff7e 	bl	80009bc <Error_Handler>
    Error_Handler();
 8000ac0:	f7ff ff7c 	bl	80009bc <Error_Handler>
    Error_Handler();
 8000ac4:	f7ff ff7a 	bl	80009bc <Error_Handler>
 8000ac8:	2000013c 	.word	0x2000013c
 8000acc:	40013800 	.word	0x40013800

08000ad0 <SystemClock_Config>:
{
 8000ad0:	b500      	push	{lr}
 8000ad2:	b08d      	sub	sp, #52	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad4:	221c      	movs	r2, #28
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	a805      	add	r0, sp, #20
 8000ada:	f002 ff3a 	bl	8003952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2214      	movs	r2, #20
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4668      	mov	r0, sp
 8000ae4:	f002 ff35 	bl	8003952 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	33fe      	adds	r3, #254	; 0xfe
 8000aee:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	015b      	lsls	r3, r3, #5
 8000af4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	a805      	add	r0, sp, #20
 8000afc:	f001 f912 	bl	8001d24 <HAL_RCC_OscConfig>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d10e      	bne.n	8000b22 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	2307      	movs	r3, #7
 8000b06:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b0e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b10:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4668      	mov	r0, sp
 8000b16:	f001 faa7 	bl	8002068 <HAL_RCC_ClockConfig>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d103      	bne.n	8000b26 <SystemClock_Config+0x56>
}
 8000b1e:	b00d      	add	sp, #52	; 0x34
 8000b20:	bd00      	pop	{pc}
    Error_Handler();
 8000b22:	f7ff ff4b 	bl	80009bc <Error_Handler>
    Error_Handler();
 8000b26:	f7ff ff49 	bl	80009bc <Error_Handler>
	...

08000b2c <main>:
{
 8000b2c:	b510      	push	{r4, lr}
  HAL_Init();
 8000b2e:	f000 fad5 	bl	80010dc <HAL_Init>
  SystemClock_Config();
 8000b32:	f7ff ffcd 	bl	8000ad0 <SystemClock_Config>
  MX_GPIO_Init();
 8000b36:	f7ff fe9d 	bl	8000874 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b3a:	f7ff ff41 	bl	80009c0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000b3e:	f7ff ff65 	bl	8000a0c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b42:	f7ff ff91 	bl	8000a68 <MX_USART1_UART_Init>
  RetargetInit(&huart1);
 8000b46:	4828      	ldr	r0, [pc, #160]	; (8000be8 <main+0xbc>)
 8000b48:	f000 f862 	bl	8000c10 <RetargetInit>
  HAL_Delay(1000);
 8000b4c:	20fa      	movs	r0, #250	; 0xfa
 8000b4e:	0080      	lsls	r0, r0, #2
 8000b50:	f000 fae2 	bl	8001118 <HAL_Delay>
  printf("Controller init complete\n");
 8000b54:	4825      	ldr	r0, [pc, #148]	; (8000bec <main+0xc0>)
 8000b56:	f002 ff91 	bl	8003a7c <puts>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000b5a:	24a0      	movs	r4, #160	; 0xa0
 8000b5c:	05e4      	lsls	r4, r4, #23
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2110      	movs	r1, #16
 8000b62:	0020      	movs	r0, r4
 8000b64:	f000 fcaf 	bl	80014c6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f000 fad5 	bl	8001118 <HAL_Delay>
  printf("Enabling DAC...\n");
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <main+0xc4>)
 8000b70:	f002 ff84 	bl	8003a7c <puts>
  HAL_GPIO_WritePin(DAC_EN_GPIO_Port, DAC_EN_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2108      	movs	r1, #8
 8000b78:	0020      	movs	r0, r4
 8000b7a:	f000 fca4 	bl	80014c6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f000 faca 	bl	8001118 <HAL_Delay>
  if (DAC_CheckChipID() != HAL_OK) {
 8000b84:	f7ff fc40 	bl	8000408 <DAC_CheckChipID>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d004      	beq.n	8000b96 <main+0x6a>
    printf("ERROR: INCORRECT DAC CHIP ID\n");
 8000b8c:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <main+0xc8>)
 8000b8e:	f002 ff75 	bl	8003a7c <puts>
    Error_Handler();
 8000b92:	f7ff ff13 	bl	80009bc <Error_Handler>
  HAL_Delay(10);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f000 fabe 	bl	8001118 <HAL_Delay>
  if (DAC_Initialize() != HAL_OK) {
 8000b9c:	f7ff fd76 	bl	800068c <DAC_Initialize>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d004      	beq.n	8000bae <main+0x82>
    printf("ERROR: DAC INIT FAILED\n");
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <main+0xcc>)
 8000ba6:	f002 ff69 	bl	8003a7c <puts>
    Error_Handler();
 8000baa:	f7ff ff07 	bl	80009bc <Error_Handler>
  if (HAL_GPIO_ReadPin(GPIO1_GPIO_Port, GPIO1_Pin) == GPIO_PIN_SET) {
 8000bae:	20a0      	movs	r0, #160	; 0xa0
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	05c0      	lsls	r0, r0, #23
 8000bb4:	f000 fc80 	bl	80014b8 <HAL_GPIO_ReadPin>
 8000bb8:	2801      	cmp	r0, #1
 8000bba:	d00c      	beq.n	8000bd6 <main+0xaa>
    printf("Automute initially unmuted\n");
 8000bbc:	480f      	ldr	r0, [pc, #60]	; (8000bfc <main+0xd0>)
 8000bbe:	f002 ff5d 	bl	8003a7c <puts>
  if (HAL_GPIO_ReadPin(GPIO2_GPIO_Port, GPIO2_Pin) == GPIO_PIN_SET) {
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <main+0xd4>)
 8000bc6:	f000 fc77 	bl	80014b8 <HAL_GPIO_ReadPin>
 8000bca:	2801      	cmp	r0, #1
 8000bcc:	d007      	beq.n	8000bde <main+0xb2>
    printf("SRC initially not locked\n");
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <main+0xd8>)
 8000bd0:	f002 ff54 	bl	8003a7c <puts>
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <main+0xa8>
    printf("Automute initially muted\n");
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <main+0xdc>)
 8000bd8:	f002 ff50 	bl	8003a7c <puts>
 8000bdc:	e7f1      	b.n	8000bc2 <main+0x96>
    printf("SRC initially locked\n");
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <main+0xe0>)
 8000be0:	f002 ff4c 	bl	8003a7c <puts>
 8000be4:	e7f6      	b.n	8000bd4 <main+0xa8>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	2000013c 	.word	0x2000013c
 8000bec:	08004c6c 	.word	0x08004c6c
 8000bf0:	08004c88 	.word	0x08004c88
 8000bf4:	08004c98 	.word	0x08004c98
 8000bf8:	08004cb8 	.word	0x08004cb8
 8000bfc:	08004cec 	.word	0x08004cec
 8000c00:	50000400 	.word	0x50000400
 8000c04:	08004d20 	.word	0x08004d20
 8000c08:	08004cd0 	.word	0x08004cd0
 8000c0c:	08004d08 	.word	0x08004d08

08000c10 <RetargetInit>:

static uint8_t sendBuf[1024] = { 0 };
static uint16_t buf_writePos = 0;
static uint16_t buf_lastReadPos = 0;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c10:	b510      	push	{r4, lr}
  gHuart = huart;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <RetargetInit+0x18>)
 8000c14:	6018      	str	r0, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <RetargetInit+0x1c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6898      	ldr	r0, [r3, #8]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2202      	movs	r2, #2
 8000c20:	2100      	movs	r1, #0
 8000c22:	f002 ff35 	bl	8003a90 <setvbuf>
}
 8000c26:	bd10      	pop	{r4, pc}
 8000c28:	200001d0 	.word	0x200001d0
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <_isatty>:

int _isatty(int fd) {
 8000c30:	b510      	push	{r4, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d801      	bhi.n	8000c3a <_isatty+0xa>
    return 1;
 8000c36:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8000c38:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8000c3a:	f002 fe57 	bl	80038ec <__errno>
 8000c3e:	2309      	movs	r3, #9
 8000c40:	6003      	str	r3, [r0, #0]
  return 0;
 8000c42:	2000      	movs	r0, #0
 8000c44:	e7f8      	b.n	8000c38 <_isatty+0x8>
	...

08000c48 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0014      	movs	r4, r2
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	2801      	cmp	r0, #1
 8000c50:	d81e      	bhi.n	8000c90 <_write+0x48>
 8000c52:	b672      	cpsid	i
    __disable_irq();

    memcpy(sendBuf + buf_writePos, ptr, len);
 8000c54:	4e13      	ldr	r6, [pc, #76]	; (8000ca4 <_write+0x5c>)
 8000c56:	8835      	ldrh	r5, [r6, #0]
 8000c58:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <_write+0x60>)
 8000c5a:	1828      	adds	r0, r5, r0
 8000c5c:	f002 fe70 	bl	8003940 <memcpy>
    buf_writePos += len;
 8000c60:	192d      	adds	r5, r5, r4
 8000c62:	b2aa      	uxth	r2, r5
 8000c64:	8032      	strh	r2, [r6, #0]

    if (buf_lastReadPos == 0) {
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_write+0x64>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <_write+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c6e:	b662      	cpsie	i
	return len;
      else
	return EIO;
    } else {
      __enable_irq();
      return len;
 8000c70:	0020      	movs	r0, r4
    }
  }
  errno = EBADF;
  return -1;
}
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
      hstatus = HAL_UART_Transmit_IT(gHuart, sendBuf, buf_writePos);
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_write+0x68>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	490b      	ldr	r1, [pc, #44]	; (8000ca8 <_write+0x60>)
 8000c7a:	f002 f895 	bl	8002da8 <HAL_UART_Transmit_IT>
      buf_lastReadPos = buf_writePos;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <_write+0x5c>)
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <_write+0x64>)
 8000c84:	801a      	strh	r2, [r3, #0]
 8000c86:	b662      	cpsie	i
      if (hstatus == HAL_OK)
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d108      	bne.n	8000c9e <_write+0x56>
	return len;
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	e7f0      	b.n	8000c72 <_write+0x2a>
  errno = EBADF;
 8000c90:	f002 fe2c 	bl	80038ec <__errno>
 8000c94:	2309      	movs	r3, #9
 8000c96:	6003      	str	r3, [r0, #0]
  return -1;
 8000c98:	2001      	movs	r0, #1
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	e7e9      	b.n	8000c72 <_write+0x2a>
	return EIO;
 8000c9e:	2005      	movs	r0, #5
 8000ca0:	e7e7      	b.n	8000c72 <_write+0x2a>
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	200001ce 	.word	0x200001ce
 8000ca8:	200001d4 	.word	0x200001d4
 8000cac:	200001cc 	.word	0x200001cc
 8000cb0:	200001d0 	.word	0x200001d0

08000cb4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000cb4:	b510      	push	{r4, lr}
  if (huart == gHuart) {
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_TxCpltCallback+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4283      	cmp	r3, r0
 8000cbc:	d000      	beq.n	8000cc0 <HAL_UART_TxCpltCallback+0xc>
    } else {
      HAL_UART_Transmit_IT(gHuart, sendBuf + buf_lastReadPos, buf_writePos - buf_lastReadPos);
      buf_lastReadPos = buf_writePos;
    }
  }
}
 8000cbe:	bd10      	pop	{r4, pc}
    if (buf_writePos <= buf_lastReadPos) {
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <HAL_UART_TxCpltCallback+0x40>)
 8000cc2:	8812      	ldrh	r2, [r2, #0]
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <HAL_UART_TxCpltCallback+0x44>)
 8000cc6:	8809      	ldrh	r1, [r1, #0]
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	d805      	bhi.n	8000cd8 <HAL_UART_TxCpltCallback+0x24>
      buf_writePos = buf_lastReadPos = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_UART_TxCpltCallback+0x44>)
 8000cd0:	8013      	strh	r3, [r2, #0]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_UART_TxCpltCallback+0x40>)
 8000cd4:	8013      	strh	r3, [r2, #0]
 8000cd6:	e7f2      	b.n	8000cbe <HAL_UART_TxCpltCallback+0xa>
      HAL_UART_Transmit_IT(gHuart, sendBuf + buf_lastReadPos, buf_writePos - buf_lastReadPos);
 8000cd8:	1a52      	subs	r2, r2, r1
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <HAL_UART_TxCpltCallback+0x48>)
 8000cde:	1809      	adds	r1, r1, r0
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f002 f861 	bl	8002da8 <HAL_UART_Transmit_IT>
      buf_lastReadPos = buf_writePos;
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_UART_TxCpltCallback+0x40>)
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_UART_TxCpltCallback+0x44>)
 8000cec:	801a      	strh	r2, [r3, #0]
}
 8000cee:	e7e6      	b.n	8000cbe <HAL_UART_TxCpltCallback+0xa>
 8000cf0:	200001d0 	.word	0x200001d0
 8000cf4:	200001ce 	.word	0x200001ce
 8000cf8:	200001cc 	.word	0x200001cc
 8000cfc:	200001d4 	.word	0x200001d4

08000d00 <_close>:

int _close(int fd) {
 8000d00:	b510      	push	{r4, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d801      	bhi.n	8000d0a <_close+0xa>
    return 0;
 8000d06:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8000d08:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8000d0a:	f002 fdef 	bl	80038ec <__errno>
 8000d0e:	2309      	movs	r3, #9
 8000d10:	6003      	str	r3, [r0, #0]
  return -1;
 8000d12:	2001      	movs	r0, #1
 8000d14:	4240      	negs	r0, r0
 8000d16:	e7f7      	b.n	8000d08 <_close+0x8>

08000d18 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000d18:	b510      	push	{r4, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000d1a:	f002 fde7 	bl	80038ec <__errno>
 8000d1e:	2309      	movs	r3, #9
 8000d20:	6003      	str	r3, [r0, #0]
  return -1;
 8000d22:	2001      	movs	r0, #1
}
 8000d24:	4240      	negs	r0, r0
 8000d26:	bd10      	pop	{r4, pc}

08000d28 <_read>:

int _read(int fd, char* ptr, int len) {
 8000d28:	b510      	push	{r4, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d10a      	bne.n	8000d44 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d2e:	2301      	movs	r3, #1
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <_read+0x30>)
 8000d32:	6810      	ldr	r0, [r2, #0]
 8000d34:	425b      	negs	r3, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	f002 fc1c 	bl	8003574 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d108      	bne.n	8000d52 <_read+0x2a>
      return 1;
 8000d40:	3001      	adds	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8000d42:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8000d44:	f002 fdd2 	bl	80038ec <__errno>
 8000d48:	2309      	movs	r3, #9
 8000d4a:	6003      	str	r3, [r0, #0]
  return -1;
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4240      	negs	r0, r0
 8000d50:	e7f7      	b.n	8000d42 <_read+0x1a>
      return EIO;
 8000d52:	2005      	movs	r0, #5
 8000d54:	e7f5      	b.n	8000d42 <_read+0x1a>
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	200001d0 	.word	0x200001d0

08000d5c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d5c:	b510      	push	{r4, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d5e:	2802      	cmp	r0, #2
 8000d60:	d804      	bhi.n	8000d6c <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8000d68:	2000      	movs	r0, #0
 8000d6a:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8000d6c:	f002 fdbe 	bl	80038ec <__errno>
 8000d70:	2309      	movs	r3, #9
 8000d72:	6003      	str	r3, [r0, #0]
  return 0;
 8000d74:	e7f8      	b.n	8000d68 <_fstat+0xc>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_MspInit+0x2c>)
 8000d7c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4311      	orrs	r1, r2
 8000d82:	6419      	str	r1, [r3, #64]	; 0x40
 8000d84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d86:	400a      	ands	r2, r1
 8000d88:	9200      	str	r2, [sp, #0]
 8000d8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0549      	lsls	r1, r1, #21
 8000d92:	430a      	orrs	r2, r1
 8000d94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d98:	400b      	ands	r3, r1
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	b002      	add	sp, #8
 8000da0:	4770      	bx	lr
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b510      	push	{r4, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	2214      	movs	r2, #20
 8000db0:	2100      	movs	r1, #0
 8000db2:	a809      	add	r0, sp, #36	; 0x24
 8000db4:	f002 fdcd 	bl	8003952 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	221c      	movs	r2, #28
 8000dba:	2100      	movs	r1, #0
 8000dbc:	a802      	add	r0, sp, #8
 8000dbe:	f002 fdc8 	bl	8003952 <memset>
  if(hi2c->Instance==I2C1)
 8000dc2:	6822      	ldr	r2, [r4, #0]
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_I2C_MspInit+0x8c>)
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d001      	beq.n	8000dce <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dca:	b00e      	add	sp, #56	; 0x38
 8000dcc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dce:	2340      	movs	r3, #64	; 0x40
 8000dd0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd2:	a802      	add	r0, sp, #8
 8000dd4:	f001 fa2a 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d127      	bne.n	8000e2c <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4c16      	ldr	r4, [pc, #88]	; (8000e38 <HAL_I2C_MspInit+0x90>)
 8000dde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000de0:	2302      	movs	r3, #2
 8000de2:	431a      	orrs	r2, r3
 8000de4:	6362      	str	r2, [r4, #52]	; 0x34
 8000de6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000de8:	4013      	ands	r3, r2
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dee:	23c0      	movs	r3, #192	; 0xc0
 8000df0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	3bae      	subs	r3, #174	; 0xae
 8000df4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000dfc:	3306      	adds	r3, #6
 8000dfe:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	a909      	add	r1, sp, #36	; 0x24
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_I2C_MspInit+0x94>)
 8000e04:	f000 fa7a 	bl	80012fc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	0389      	lsls	r1, r1, #14
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000e12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e14:	400b      	ands	r3, r1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	2017      	movs	r0, #23
 8000e20:	f000 f98c 	bl	800113c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000e24:	2017      	movs	r0, #23
 8000e26:	f000 f9b9 	bl	800119c <HAL_NVIC_EnableIRQ>
}
 8000e2a:	e7ce      	b.n	8000dca <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000e2c:	f7ff fdc6 	bl	80009bc <Error_Handler>
 8000e30:	e7d4      	b.n	8000ddc <HAL_I2C_MspInit+0x34>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	50000400 	.word	0x50000400

08000e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e40:	b510      	push	{r4, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	2214      	movs	r2, #20
 8000e48:	2100      	movs	r1, #0
 8000e4a:	a809      	add	r0, sp, #36	; 0x24
 8000e4c:	f002 fd81 	bl	8003952 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	221c      	movs	r2, #28
 8000e52:	2100      	movs	r1, #0
 8000e54:	a802      	add	r0, sp, #8
 8000e56:	f002 fd7c 	bl	8003952 <memset>
  if(hspi->Instance==SPI1)
 8000e5a:	6822      	ldr	r2, [r4, #0]
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x7c>)
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d001      	beq.n	8000e66 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e62:	b00e      	add	sp, #56	; 0x38
 8000e64:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	a802      	add	r0, sp, #8
 8000e6e:	f001 f9dd 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d11f      	bne.n	8000eb6 <HAL_SPI_MspInit+0x76>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_SPI_MspInit+0x80>)
 8000e78:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0140      	lsls	r0, r0, #5
 8000e7e:	4301      	orrs	r1, r0
 8000e80:	6419      	str	r1, [r3, #64]	; 0x40
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	4002      	ands	r2, r0
 8000e86:	9200      	str	r2, [sp, #0]
 8000e88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4311      	orrs	r1, r2
 8000e90:	6359      	str	r1, [r3, #52]	; 0x34
 8000e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e94:	401a      	ands	r2, r3
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000e9a:	2346      	movs	r3, #70	; 0x46
 8000e9c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	3b44      	subs	r3, #68	; 0x44
 8000ea0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ea8:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	20a0      	movs	r0, #160	; 0xa0
 8000eac:	a909      	add	r1, sp, #36	; 0x24
 8000eae:	05c0      	lsls	r0, r0, #23
 8000eb0:	f000 fa24 	bl	80012fc <HAL_GPIO_Init>
}
 8000eb4:	e7d5      	b.n	8000e62 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8000eb6:	f7ff fd81 	bl	80009bc <Error_Handler>
 8000eba:	e7dc      	b.n	8000e76 <HAL_SPI_MspInit+0x36>
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	b090      	sub	sp, #64	; 0x40
 8000ec8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	2214      	movs	r2, #20
 8000ecc:	2100      	movs	r1, #0
 8000ece:	a80b      	add	r0, sp, #44	; 0x2c
 8000ed0:	f002 fd3f 	bl	8003952 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	221c      	movs	r2, #28
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	a804      	add	r0, sp, #16
 8000eda:	f002 fd3a 	bl	8003952 <memset>
  if(huart->Instance==USART1)
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_UART_MspInit+0xb0>)
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee6:	b010      	add	sp, #64	; 0x40
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eee:	a804      	add	r0, sp, #16
 8000ef0:	f001 f99c 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d139      	bne.n	8000f6c <HAL_UART_MspInit+0xa8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_UART_MspInit+0xb4>)
 8000efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	01c9      	lsls	r1, r1, #7
 8000f00:	430a      	orrs	r2, r1
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	400a      	ands	r2, r1
 8000f08:	9201      	str	r2, [sp, #4]
 8000f0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4310      	orrs	r0, r2
 8000f12:	6358      	str	r0, [r3, #52]	; 0x34
 8000f14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f16:	4002      	ands	r2, r0
 8000f18:	9202      	str	r2, [sp, #8]
 8000f1a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1e:	2501      	movs	r5, #1
 8000f20:	432a      	orrs	r2, r5
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	402b      	ands	r3, r5
 8000f28:	9303      	str	r3, [sp, #12]
 8000f2a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f2c:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2602      	movs	r6, #2
 8000f30:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2400      	movs	r4, #0
 8000f34:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f38:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f3c:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_UART_MspInit+0xb8>)
 8000f3e:	f000 f9dd 	bl	80012fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f4e:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	20a0      	movs	r0, #160	; 0xa0
 8000f52:	a90b      	add	r1, sp, #44	; 0x2c
 8000f54:	05c0      	lsls	r0, r0, #23
 8000f56:	f000 f9d1 	bl	80012fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	201b      	movs	r0, #27
 8000f60:	f000 f8ec 	bl	800113c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f64:	201b      	movs	r0, #27
 8000f66:	f000 f919 	bl	800119c <HAL_NVIC_EnableIRQ>
}
 8000f6a:	e7bc      	b.n	8000ee6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000f6c:	f7ff fd26 	bl	80009bc <Error_Handler>
 8000f70:	e7c2      	b.n	8000ef8 <HAL_UART_MspInit+0x34>
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	50000800 	.word	0x50000800

08000f80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler>

08000f82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler>

08000f84 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f8b3 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bd10      	pop	{r4, pc}

08000f90 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000f90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO2_Pin);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fa9e 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000f98:	bd10      	pop	{r4, pc}

08000f9a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f9a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO1_Pin);
 8000f9c:	2080      	movs	r0, #128	; 0x80
 8000f9e:	f000 fa99 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000fa2:	bd10      	pop	{r4, pc}

08000fa4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000fa4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <I2C1_IRQHandler+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	23e0      	movs	r3, #224	; 0xe0
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	421a      	tst	r2, r3
 8000fb2:	d003      	beq.n	8000fbc <I2C1_IRQHandler+0x18>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <I2C1_IRQHandler+0x20>)
 8000fb6:	f000 fe21 	bl	8001bfc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000fba:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fbc:	4801      	ldr	r0, [pc, #4]	; (8000fc4 <I2C1_IRQHandler+0x20>)
 8000fbe:	f000 fb4d 	bl	800165c <HAL_I2C_EV_IRQHandler>
}
 8000fc2:	e7fa      	b.n	8000fba <I2C1_IRQHandler+0x16>
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fca:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART1_IRQHandler+0xc>)
 8000fcc:	f001 ff84 	bl	8002ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	2000013c 	.word	0x2000013c

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <_sbrk+0x38>)
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <_sbrk+0x3c>)
 8000fe0:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe2:	490d      	ldr	r1, [pc, #52]	; (8001018 <_sbrk+0x40>)
 8000fe4:	6809      	ldr	r1, [r1, #0]
 8000fe6:	2900      	cmp	r1, #0
 8000fe8:	d007      	beq.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	490b      	ldr	r1, [pc, #44]	; (8001018 <_sbrk+0x40>)
 8000fec:	6808      	ldr	r0, [r1, #0]
 8000fee:	18c3      	adds	r3, r0, r3
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d806      	bhi.n	8001002 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <_sbrk+0x40>)
 8000ff6:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ff8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ffa:	4907      	ldr	r1, [pc, #28]	; (8001018 <_sbrk+0x40>)
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <_sbrk+0x44>)
 8000ffe:	6008      	str	r0, [r1, #0]
 8001000:	e7f3      	b.n	8000fea <_sbrk+0x12>
    errno = ENOMEM;
 8001002:	f002 fc73 	bl	80038ec <__errno>
 8001006:	230c      	movs	r3, #12
 8001008:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800100a:	2001      	movs	r0, #1
 800100c:	4240      	negs	r0, r0
 800100e:	e7f3      	b.n	8000ff8 <_sbrk+0x20>
 8001010:	20003000 	.word	0x20003000
 8001014:	00000400 	.word	0x00000400
 8001018:	200005d4 	.word	0x200005d4
 800101c:	200005f0 	.word	0x200005f0

08001020 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <SystemInit+0xc>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	0512      	lsls	r2, r2, #20
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	4770      	bx	lr
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001034:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001036:	e003      	b.n	8001040 <LoopCopyDataInit>

08001038 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800103a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800103c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800103e:	3104      	adds	r1, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <LoopForever+0xa>)
  ldr r3, =_edata
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopForever+0xe>)
  adds r2, r0, r1
 8001044:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001046:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001048:	d3f6      	bcc.n	8001038 <CopyDataInit>
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopForever+0x12>)
  b LoopFillZerobss
 800104c:	e002      	b.n	8001054 <LoopFillZerobss>

0800104e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001050:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001052:	3204      	adds	r2, #4

08001054 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <LoopForever+0x16>)
  cmp r2, r3
 8001056:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001058:	d3f9      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800105a:	f7ff ffe1 	bl	8001020 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800105e:	f002 fc4b 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff fd63 	bl	8000b2c <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 800106c:	08004e64 	.word	0x08004e64
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001074:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001078:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800107c:	200005ec 	.word	0x200005ec

08001080 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_IRQHandler>
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b510      	push	{r4, lr}
 8001086:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_InitTick+0x4c>)
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	2900      	cmp	r1, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001090:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001092:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001094:	20fa      	movs	r0, #250	; 0xfa
 8001096:	0080      	lsls	r0, r0, #2
 8001098:	f7ff f840 	bl	800011c <__udivsi3>
 800109c:	0001      	movs	r1, r0
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_InitTick+0x50>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	f7ff f83b 	bl	800011c <__udivsi3>
 80010a6:	f000 f885 	bl	80011b4 <HAL_SYSTICK_Config>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	2c03      	cmp	r4, #3
 80010b0:	d901      	bls.n	80010b6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80010b2:	2001      	movs	r0, #1
 80010b4:	e7ed      	b.n	8001092 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b6:	3001      	adds	r0, #1
 80010b8:	2200      	movs	r2, #0
 80010ba:	0021      	movs	r1, r4
 80010bc:	4240      	negs	r0, r0
 80010be:	f000 f83d 	bl	800113c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_InitTick+0x54>)
 80010c4:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	2000      	movs	r0, #0
 80010c8:	e7e3      	b.n	8001092 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
 80010cc:	e7e1      	b.n	8001092 <HAL_InitTick+0xe>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	20000004 	.word	0x20000004
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_Init>:
{
 80010dc:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	2003      	movs	r0, #3
 80010e0:	f7ff ffd0 	bl	8001084 <HAL_InitTick>
 80010e4:	1e04      	subs	r4, r0, #0
 80010e6:	d002      	beq.n	80010ee <HAL_Init+0x12>
    status = HAL_ERROR;
 80010e8:	2401      	movs	r4, #1
}
 80010ea:	0020      	movs	r0, r4
 80010ec:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80010ee:	f7ff fe43 	bl	8000d78 <HAL_MspInit>
 80010f2:	e7fa      	b.n	80010ea <HAL_Init+0xe>

080010f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_IncTick+0x10>)
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	4903      	ldr	r1, [pc, #12]	; (8001108 <HAL_IncTick+0x14>)
 80010fa:	6809      	ldr	r1, [r1, #0]
 80010fc:	185b      	adds	r3, r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	4770      	bx	lr
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	200005d8 	.word	0x200005d8
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <HAL_GetTick+0x8>)
 800110e:	6818      	ldr	r0, [r3, #0]
}
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	200005d8 	.word	0x200005d8

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff fff6 	bl	800110c <HAL_GetTick>
 8001120:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	1c63      	adds	r3, r4, #1
 8001124:	d002      	beq.n	800112c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_Delay+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	1b40      	subs	r0, r0, r5
 8001132:	42a0      	cmp	r0, r4
 8001134:	d3fa      	bcc.n	800112c <HAL_Delay+0x14>
  {
  }
}
 8001136:	bd70      	pop	{r4, r5, r6, pc}
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800113e:	2800      	cmp	r0, #0
 8001140:	db11      	blt.n	8001166 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001142:	0883      	lsrs	r3, r0, #2
 8001144:	4e13      	ldr	r6, [pc, #76]	; (8001194 <HAL_NVIC_SetPriority+0x58>)
 8001146:	33c0      	adds	r3, #192	; 0xc0
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	599d      	ldr	r5, [r3, r6]
 800114c:	2403      	movs	r4, #3
 800114e:	4020      	ands	r0, r4
 8001150:	00c0      	lsls	r0, r0, #3
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	0014      	movs	r4, r2
 8001156:	4084      	lsls	r4, r0
 8001158:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115a:	0189      	lsls	r1, r1, #6
 800115c:	400a      	ands	r2, r1
 800115e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	432a      	orrs	r2, r5
 8001162:	519a      	str	r2, [r3, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001164:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001166:	230f      	movs	r3, #15
 8001168:	4003      	ands	r3, r0
 800116a:	3b08      	subs	r3, #8
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3306      	adds	r3, #6
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_NVIC_SetPriority+0x5c>)
 8001174:	4694      	mov	ip, r2
 8001176:	4463      	add	r3, ip
 8001178:	685c      	ldr	r4, [r3, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	4010      	ands	r0, r2
 800117e:	00c0      	lsls	r0, r0, #3
 8001180:	32fc      	adds	r2, #252	; 0xfc
 8001182:	0015      	movs	r5, r2
 8001184:	4085      	lsls	r5, r0
 8001186:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001188:	0189      	lsls	r1, r1, #6
 800118a:	400a      	ands	r2, r1
 800118c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118e:	4322      	orrs	r2, r4
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	e7e7      	b.n	8001164 <HAL_NVIC_SetPriority+0x28>
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800119c:	2800      	cmp	r0, #0
 800119e:	db05      	blt.n	80011ac <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a0:	231f      	movs	r3, #31
 80011a2:	4018      	ands	r0, r3
 80011a4:	3b1e      	subs	r3, #30
 80011a6:	4083      	lsls	r3, r0
 80011a8:	4a01      	ldr	r2, [pc, #4]	; (80011b0 <HAL_NVIC_EnableIRQ+0x14>)
 80011aa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011ac:	4770      	bx	lr
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	3801      	subs	r0, #1
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	045b      	lsls	r3, r3, #17
 80011ba:	4298      	cmp	r0, r3
 80011bc:	d20f      	bcs.n	80011de <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_SYSTICK_Config+0x30>)
 80011c0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_SYSTICK_Config+0x34>)
 80011c4:	6a03      	ldr	r3, [r0, #32]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	21c0      	movs	r1, #192	; 0xc0
 80011cc:	0609      	lsls	r1, r1, #24
 80011ce:	430b      	orrs	r3, r1
 80011d0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d2:	2300      	movs	r3, #0
 80011d4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	3307      	adds	r3, #7
 80011d8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011da:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80011dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 80011e0:	e7fc      	b.n	80011dc <HAL_SYSTICK_Config+0x28>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	e000e010 	.word	0xe000e010
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ec:	b530      	push	{r4, r5, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d036      	beq.n	8001260 <HAL_DMA_Abort+0x74>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011f2:	2325      	movs	r3, #37	; 0x25
 80011f4:	5cc3      	ldrb	r3, [r0, r3]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d006      	beq.n	8001208 <HAL_DMA_Abort+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fa:	2304      	movs	r3, #4
 80011fc:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	3320      	adds	r3, #32
 8001200:	2200      	movs	r2, #0
 8001202:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8001206:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	6802      	ldr	r2, [r0, #0]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	210e      	movs	r1, #14
 800120e:	438b      	bics	r3, r1
 8001210:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001212:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	4913      	ldr	r1, [pc, #76]	; (8001264 <HAL_DMA_Abort+0x78>)
 8001218:	400b      	ands	r3, r1
 800121a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800121c:	6801      	ldr	r1, [r0, #0]
 800121e:	680a      	ldr	r2, [r1, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	439a      	bics	r2, r3
 8001224:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001226:	4c10      	ldr	r4, [pc, #64]	; (8001268 <HAL_DMA_Abort+0x7c>)
 8001228:	6862      	ldr	r2, [r4, #4]
 800122a:	211c      	movs	r1, #28
 800122c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800122e:	4029      	ands	r1, r5
 8001230:	408b      	lsls	r3, r1
 8001232:	4313      	orrs	r3, r2
 8001234:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001236:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001238:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800123a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800123c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <HAL_DMA_Abort+0x78>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800124a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800124c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800124e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001250:	2325      	movs	r3, #37	; 0x25
 8001252:	2201      	movs	r2, #1
 8001254:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001256:	3b01      	subs	r3, #1
 8001258:	2200      	movs	r2, #0
 800125a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
 800125e:	e7d2      	b.n	8001206 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e7d0      	b.n	8001206 <HAL_DMA_Abort+0x1a>
 8001264:	fffffeff 	.word	0xfffffeff
 8001268:	40020000 	.word	0x40020000

0800126c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800126e:	2324      	movs	r3, #36	; 0x24
 8001270:	2200      	movs	r2, #0
 8001272:	54c2      	strb	r2, [r0, r3]
  __HAL_LOCK(hdma);
 8001274:	3201      	adds	r2, #1
 8001276:	54c2      	strb	r2, [r0, r3]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001278:	3301      	adds	r3, #1
 800127a:	5cc3      	ldrb	r3, [r0, r3]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d003      	beq.n	8001288 <HAL_DMA_Abort_IT+0x1c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	2304      	movs	r3, #4
 8001282:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001284:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001286:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001288:	6802      	ldr	r2, [r0, #0]
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	210e      	movs	r1, #14
 800128e:	438b      	bics	r3, r1
 8001290:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001292:	6801      	ldr	r1, [r0, #0]
 8001294:	680a      	ldr	r2, [r1, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	439a      	bics	r2, r3
 800129a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800129c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800129e:	680a      	ldr	r2, [r1, #0]
 80012a0:	4c12      	ldr	r4, [pc, #72]	; (80012ec <HAL_DMA_Abort_IT+0x80>)
 80012a2:	4022      	ands	r2, r4
 80012a4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80012a6:	4c12      	ldr	r4, [pc, #72]	; (80012f0 <HAL_DMA_Abort_IT+0x84>)
 80012a8:	6862      	ldr	r2, [r4, #4]
 80012aa:	211c      	movs	r1, #28
 80012ac:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80012ae:	4029      	ands	r1, r5
 80012b0:	408b      	lsls	r3, r1
 80012b2:	4313      	orrs	r3, r2
 80012b4:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80012b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80012ba:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80012bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4909      	ldr	r1, [pc, #36]	; (80012ec <HAL_DMA_Abort_IT+0x80>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80012cc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80012ce:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	2325      	movs	r3, #37	; 0x25
 80012d2:	2201      	movs	r2, #1
 80012d4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80012d6:	3b01      	subs	r3, #1
 80012d8:	2200      	movs	r2, #0
 80012da:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80012dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x7c>
      hdma->XferAbortCallback(hdma);
 80012e2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	2000      	movs	r0, #0
 80012e6:	e7ce      	b.n	8001286 <HAL_DMA_Abort_IT+0x1a>
 80012e8:	2000      	movs	r0, #0
 80012ea:	e7cc      	b.n	8001286 <HAL_DMA_Abort_IT+0x1a>
 80012ec:	fffffeff 	.word	0xfffffeff
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 80012f4:	2325      	movs	r3, #37	; 0x25
 80012f6:	5cc0      	ldrb	r0, [r0, r3]
 80012f8:	b2c0      	uxtb	r0, r0
}
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	46d6      	mov	lr, sl
 8001300:	464f      	mov	r7, r9
 8001302:	4646      	mov	r6, r8
 8001304:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001306:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001308:	e03b      	b.n	8001382 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800130a:	2504      	movs	r5, #4
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x14>
 800130e:	2500      	movs	r5, #0
 8001310:	40a5      	lsls	r5, r4
 8001312:	002c      	movs	r4, r5
 8001314:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001316:	4d63      	ldr	r5, [pc, #396]	; (80014a4 <HAL_GPIO_Init+0x1a8>)
 8001318:	3218      	adds	r2, #24
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	58ac      	ldr	r4, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8001322:	464a      	mov	r2, r9
 8001324:	43d2      	mvns	r2, r2
 8001326:	0025      	movs	r5, r4
 8001328:	464e      	mov	r6, r9
 800132a:	43b5      	bics	r5, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132c:	684e      	ldr	r6, [r1, #4]
 800132e:	03f6      	lsls	r6, r6, #15
 8001330:	d502      	bpl.n	8001338 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8001332:	464d      	mov	r5, r9
 8001334:	432c      	orrs	r4, r5
 8001336:	0025      	movs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8001338:	4c5a      	ldr	r4, [pc, #360]	; (80014a4 <HAL_GPIO_Init+0x1a8>)
 800133a:	2780      	movs	r7, #128	; 0x80
 800133c:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 800133e:	2584      	movs	r5, #132	; 0x84
 8001340:	5964      	ldr	r4, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8001342:	0025      	movs	r5, r4
 8001344:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001346:	684e      	ldr	r6, [r1, #4]
 8001348:	03b6      	lsls	r6, r6, #14
 800134a:	d502      	bpl.n	8001352 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 800134c:	464d      	mov	r5, r9
 800134e:	432c      	orrs	r4, r5
 8001350:	0025      	movs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8001352:	4c54      	ldr	r4, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x1a8>)
 8001354:	2784      	movs	r7, #132	; 0x84
 8001356:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001358:	6824      	ldr	r4, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 800135a:	0025      	movs	r5, r4
 800135c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	684e      	ldr	r6, [r1, #4]
 8001360:	02f6      	lsls	r6, r6, #11
 8001362:	d502      	bpl.n	800136a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8001364:	464d      	mov	r5, r9
 8001366:	432c      	orrs	r4, r5
 8001368:	0025      	movs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 800136a:	4c4e      	ldr	r4, [pc, #312]	; (80014a4 <HAL_GPIO_Init+0x1a8>)
 800136c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 800136e:	6864      	ldr	r4, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8001370:	4022      	ands	r2, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001372:	684d      	ldr	r5, [r1, #4]
 8001374:	02ad      	lsls	r5, r5, #10
 8001376:	d501      	bpl.n	800137c <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8001378:	464a      	mov	r2, r9
 800137a:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = tmp;
 800137c:	4c49      	ldr	r4, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x1a8>)
 800137e:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8001380:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001382:	680c      	ldr	r4, [r1, #0]
 8001384:	0022      	movs	r2, r4
 8001386:	40da      	lsrs	r2, r3
 8001388:	d100      	bne.n	800138c <HAL_GPIO_Init+0x90>
 800138a:	e086      	b.n	800149a <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	0026      	movs	r6, r4
 8001392:	4016      	ands	r6, r2
 8001394:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8001396:	4214      	tst	r4, r2
 8001398:	d0f2      	beq.n	8001380 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139a:	684c      	ldr	r4, [r1, #4]
 800139c:	2c02      	cmp	r4, #2
 800139e:	d001      	beq.n	80013a4 <HAL_GPIO_Init+0xa8>
 80013a0:	2c12      	cmp	r4, #18
 80013a2:	d118      	bne.n	80013d6 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 80013a4:	08dd      	lsrs	r5, r3, #3
 80013a6:	3508      	adds	r5, #8
 80013a8:	00ad      	lsls	r5, r5, #2
 80013aa:	582c      	ldr	r4, [r5, r0]
 80013ac:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80013ae:	2707      	movs	r7, #7
 80013b0:	401f      	ands	r7, r3
 80013b2:	00bf      	lsls	r7, r7, #2
 80013b4:	240f      	movs	r4, #15
 80013b6:	46a2      	mov	sl, r4
 80013b8:	0026      	movs	r6, r4
 80013ba:	40be      	lsls	r6, r7
 80013bc:	46b0      	mov	r8, r6
 80013be:	4666      	mov	r6, ip
 80013c0:	4644      	mov	r4, r8
 80013c2:	43a6      	bics	r6, r4
 80013c4:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80013c6:	690c      	ldr	r4, [r1, #16]
 80013c8:	4656      	mov	r6, sl
 80013ca:	4026      	ands	r6, r4
 80013cc:	0034      	movs	r4, r6
 80013ce:	40bc      	lsls	r4, r7
 80013d0:	4666      	mov	r6, ip
 80013d2:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 80013d4:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 80013d6:	6804      	ldr	r4, [r0, #0]
 80013d8:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013da:	005d      	lsls	r5, r3, #1
 80013dc:	2403      	movs	r4, #3
 80013de:	46a2      	mov	sl, r4
 80013e0:	0027      	movs	r7, r4
 80013e2:	40af      	lsls	r7, r5
 80013e4:	46b8      	mov	r8, r7
 80013e6:	43ff      	mvns	r7, r7
 80013e8:	4666      	mov	r6, ip
 80013ea:	4644      	mov	r4, r8
 80013ec:	43a6      	bics	r6, r4
 80013ee:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f0:	684c      	ldr	r4, [r1, #4]
 80013f2:	4656      	mov	r6, sl
 80013f4:	4026      	ands	r6, r4
 80013f6:	0034      	movs	r4, r6
 80013f8:	40ac      	lsls	r4, r5
 80013fa:	4666      	mov	r6, ip
 80013fc:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 80013fe:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001400:	684c      	ldr	r4, [r1, #4]
 8001402:	1e66      	subs	r6, r4, #1
 8001404:	2e01      	cmp	r6, #1
 8001406:	d903      	bls.n	8001410 <HAL_GPIO_Init+0x114>
 8001408:	2c11      	cmp	r4, #17
 800140a:	d001      	beq.n	8001410 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140c:	2c12      	cmp	r4, #18
 800140e:	d112      	bne.n	8001436 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001410:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001412:	403c      	ands	r4, r7
 8001414:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001416:	68cc      	ldr	r4, [r1, #12]
 8001418:	40ac      	lsls	r4, r5
 800141a:	4666      	mov	r6, ip
 800141c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 800141e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001420:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001422:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001424:	684a      	ldr	r2, [r1, #4]
 8001426:	0912      	lsrs	r2, r2, #4
 8001428:	4694      	mov	ip, r2
 800142a:	2201      	movs	r2, #1
 800142c:	4666      	mov	r6, ip
 800142e:	4032      	ands	r2, r6
 8001430:	409a      	lsls	r2, r3
 8001432:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001434:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001436:	684a      	ldr	r2, [r1, #4]
 8001438:	2a03      	cmp	r2, #3
 800143a:	d005      	beq.n	8001448 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 800143c:	68c2      	ldr	r2, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143e:	403a      	ands	r2, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001440:	688f      	ldr	r7, [r1, #8]
 8001442:	40af      	lsls	r7, r5
 8001444:	4317      	orrs	r7, r2
        GPIOx->PUPDR = tmp;
 8001446:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001448:	684a      	ldr	r2, [r1, #4]
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	d598      	bpl.n	8001380 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 800144e:	089a      	lsrs	r2, r3, #2
 8001450:	0014      	movs	r4, r2
 8001452:	3418      	adds	r4, #24
 8001454:	00a4      	lsls	r4, r4, #2
 8001456:	4d13      	ldr	r5, [pc, #76]	; (80014a4 <HAL_GPIO_Init+0x1a8>)
 8001458:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800145a:	2503      	movs	r5, #3
 800145c:	401d      	ands	r5, r3
 800145e:	00ec      	lsls	r4, r5, #3
 8001460:	250f      	movs	r5, #15
 8001462:	40a5      	lsls	r5, r4
 8001464:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001466:	25a0      	movs	r5, #160	; 0xa0
 8001468:	05ed      	lsls	r5, r5, #23
 800146a:	42a8      	cmp	r0, r5
 800146c:	d100      	bne.n	8001470 <HAL_GPIO_Init+0x174>
 800146e:	e74e      	b.n	800130e <HAL_GPIO_Init+0x12>
 8001470:	4d0d      	ldr	r5, [pc, #52]	; (80014a8 <HAL_GPIO_Init+0x1ac>)
 8001472:	42a8      	cmp	r0, r5
 8001474:	d00b      	beq.n	800148e <HAL_GPIO_Init+0x192>
 8001476:	4d0d      	ldr	r5, [pc, #52]	; (80014ac <HAL_GPIO_Init+0x1b0>)
 8001478:	42a8      	cmp	r0, r5
 800147a:	d00a      	beq.n	8001492 <HAL_GPIO_Init+0x196>
 800147c:	4d0c      	ldr	r5, [pc, #48]	; (80014b0 <HAL_GPIO_Init+0x1b4>)
 800147e:	42a8      	cmp	r0, r5
 8001480:	d009      	beq.n	8001496 <HAL_GPIO_Init+0x19a>
 8001482:	4d0c      	ldr	r5, [pc, #48]	; (80014b4 <HAL_GPIO_Init+0x1b8>)
 8001484:	42a8      	cmp	r0, r5
 8001486:	d100      	bne.n	800148a <HAL_GPIO_Init+0x18e>
 8001488:	e73f      	b.n	800130a <HAL_GPIO_Init+0xe>
 800148a:	2505      	movs	r5, #5
 800148c:	e740      	b.n	8001310 <HAL_GPIO_Init+0x14>
 800148e:	2501      	movs	r5, #1
 8001490:	e73e      	b.n	8001310 <HAL_GPIO_Init+0x14>
 8001492:	2502      	movs	r5, #2
 8001494:	e73c      	b.n	8001310 <HAL_GPIO_Init+0x14>
 8001496:	2503      	movs	r5, #3
 8001498:	e73a      	b.n	8001310 <HAL_GPIO_Init+0x14>
  }
}
 800149a:	bce0      	pop	{r5, r6, r7}
 800149c:	46ba      	mov	sl, r7
 800149e:	46b1      	mov	r9, r6
 80014a0:	46a8      	mov	r8, r5
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	40021800 	.word	0x40021800
 80014a8:	50000400 	.word	0x50000400
 80014ac:	50000800 	.word	0x50000800
 80014b0:	50000c00 	.word	0x50000c00
 80014b4:	50001400 	.word	0x50001400

080014b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80014b8:	6903      	ldr	r3, [r0, #16]
 80014ba:	420b      	tst	r3, r1
 80014bc:	d001      	beq.n	80014c2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80014be:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80014c0:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 80014c2:	2000      	movs	r0, #0
 80014c4:	e7fc      	b.n	80014c0 <HAL_GPIO_ReadPin+0x8>

080014c6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d001      	beq.n	80014ce <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ca:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014cc:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ce:	6281      	str	r1, [r0, #40]	; 0x28
}
 80014d0:	e7fc      	b.n	80014cc <HAL_GPIO_WritePin+0x6>
	...

080014d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4218      	tst	r0, r3
 80014de:	d104      	bne.n	80014ea <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4223      	tst	r3, r4
 80014e6:	d105      	bne.n	80014f4 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 80014e8:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80014ee:	f7ff fa41 	bl	8000974 <HAL_GPIO_EXTI_Rising_Callback>
 80014f2:	e7f5      	b.n	80014e0 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f6:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80014f8:	0020      	movs	r0, r4
 80014fa:	f7ff fa4d 	bl	8000998 <HAL_GPIO_EXTI_Falling_Callback>
}
 80014fe:	e7f3      	b.n	80014e8 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8001500:	40021800 	.word	0x40021800

08001504 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001504:	6803      	ldr	r3, [r0, #0]
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	0792      	lsls	r2, r2, #30
 800150a:	d501      	bpl.n	8001510 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001510:	6803      	ldr	r3, [r0, #0]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	07d2      	lsls	r2, r2, #31
 8001516:	d403      	bmi.n	8001520 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	2101      	movs	r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	619a      	str	r2, [r3, #24]
  }
}
 8001520:	4770      	bx	lr

08001522 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001522:	b530      	push	{r4, r5, lr}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001524:	07cb      	lsls	r3, r1, #31
 8001526:	d509      	bpl.n	800153c <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001528:	2341      	movs	r3, #65	; 0x41
 800152a:	5cc3      	ldrb	r3, [r0, r3]
 800152c:	2228      	movs	r2, #40	; 0x28
 800152e:	4013      	ands	r3, r2
 8001530:	2b28      	cmp	r3, #40	; 0x28
 8001532:	d001      	beq.n	8001538 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001534:	23f2      	movs	r3, #242	; 0xf2
 8001536:	e002      	b.n	800153e <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001538:	331a      	adds	r3, #26
 800153a:	e000      	b.n	800153e <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800153c:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800153e:	078a      	lsls	r2, r1, #30
 8001540:	d509      	bpl.n	8001556 <I2C_Disable_IRQ+0x34>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001542:	2444      	movs	r4, #68	; 0x44
 8001544:	431c      	orrs	r4, r3

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001546:	2241      	movs	r2, #65	; 0x41
 8001548:	5c82      	ldrb	r2, [r0, r2]
 800154a:	2528      	movs	r5, #40	; 0x28
 800154c:	402a      	ands	r2, r5
 800154e:	2a28      	cmp	r2, #40	; 0x28
 8001550:	d00f      	beq.n	8001572 <I2C_Disable_IRQ+0x50>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001552:	22f4      	movs	r2, #244	; 0xf4
 8001554:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001556:	b20a      	sxth	r2, r1
 8001558:	2a00      	cmp	r2, #0
 800155a:	db0c      	blt.n	8001576 <I2C_Disable_IRQ+0x54>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800155c:	2910      	cmp	r1, #16
 800155e:	d00d      	beq.n	800157c <I2C_Disable_IRQ+0x5a>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001560:	2920      	cmp	r1, #32
 8001562:	d00e      	beq.n	8001582 <I2C_Disable_IRQ+0x60>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001564:	2940      	cmp	r1, #64	; 0x40
 8001566:	d00f      	beq.n	8001588 <I2C_Disable_IRQ+0x66>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001568:	6801      	ldr	r1, [r0, #0]
 800156a:	680a      	ldr	r2, [r1, #0]
 800156c:	439a      	bics	r2, r3
 800156e:	600a      	str	r2, [r1, #0]
}
 8001570:	bd30      	pop	{r4, r5, pc}
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001572:	0023      	movs	r3, r4
 8001574:	e7ef      	b.n	8001556 <I2C_Disable_IRQ+0x34>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001576:	22b8      	movs	r2, #184	; 0xb8
 8001578:	4313      	orrs	r3, r2
 800157a:	e7ef      	b.n	800155c <I2C_Disable_IRQ+0x3a>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800157c:	2290      	movs	r2, #144	; 0x90
 800157e:	4313      	orrs	r3, r2
 8001580:	e7ee      	b.n	8001560 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_STOPI;
 8001582:	2220      	movs	r2, #32
 8001584:	4313      	orrs	r3, r2
 8001586:	e7ed      	b.n	8001564 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI;
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	4313      	orrs	r3, r2
 800158c:	e7ec      	b.n	8001568 <I2C_Disable_IRQ+0x46>
	...

08001590 <HAL_I2C_Init>:
{
 8001590:	b510      	push	{r4, lr}
 8001592:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8001594:	d059      	beq.n	800164a <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	2341      	movs	r3, #65	; 0x41
 8001598:	5cc3      	ldrb	r3, [r0, r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d043      	beq.n	8001626 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800159e:	2341      	movs	r3, #65	; 0x41
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	438b      	bics	r3, r1
 80015ac:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015ae:	6822      	ldr	r2, [r4, #0]
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_I2C_Init+0xc0>)
 80015b2:	6861      	ldr	r1, [r4, #4]
 80015b4:	400b      	ands	r3, r1
 80015b6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	6893      	ldr	r3, [r2, #8]
 80015bc:	4925      	ldr	r1, [pc, #148]	; (8001654 <HAL_I2C_Init+0xc4>)
 80015be:	400b      	ands	r3, r1
 80015c0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c2:	68e3      	ldr	r3, [r4, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d034      	beq.n	8001632 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015c8:	6822      	ldr	r2, [r4, #0]
 80015ca:	2384      	movs	r3, #132	; 0x84
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	68a1      	ldr	r1, [r4, #8]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015d4:	68e3      	ldr	r3, [r4, #12]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d032      	beq.n	8001640 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	6851      	ldr	r1, [r2, #4]
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_I2C_Init+0xc8>)
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	68d3      	ldr	r3, [r2, #12]
 80015e8:	491a      	ldr	r1, [pc, #104]	; (8001654 <HAL_I2C_Init+0xc4>)
 80015ea:	400b      	ands	r3, r1
 80015ec:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ee:	6923      	ldr	r3, [r4, #16]
 80015f0:	6962      	ldr	r2, [r4, #20]
 80015f2:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015f4:	69a2      	ldr	r2, [r4, #24]
 80015f6:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f8:	6821      	ldr	r1, [r4, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	69e3      	ldr	r3, [r4, #28]
 8001602:	6a21      	ldr	r1, [r4, #32]
 8001604:	430b      	orrs	r3, r1
 8001606:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	430b      	orrs	r3, r1
 8001610:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	2241      	movs	r2, #65	; 0x41
 8001618:	311f      	adds	r1, #31
 800161a:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800161c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800161e:	3201      	adds	r2, #1
 8001620:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001622:	2000      	movs	r0, #0
}
 8001624:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	3340      	adds	r3, #64	; 0x40
 8001628:	2200      	movs	r2, #0
 800162a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800162c:	f7ff fbbc 	bl	8000da8 <HAL_I2C_MspInit>
 8001630:	e7b5      	b.n	800159e <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001632:	6822      	ldr	r2, [r4, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	68a1      	ldr	r1, [r4, #8]
 800163a:	430b      	orrs	r3, r1
 800163c:	6093      	str	r3, [r2, #8]
 800163e:	e7c9      	b.n	80015d4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	e7c7      	b.n	80015da <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
 800164c:	e7ea      	b.n	8001624 <HAL_I2C_Init+0x94>
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	f0ffffff 	.word	0xf0ffffff
 8001654:	ffff7fff 	.word	0xffff7fff
 8001658:	02008000 	.word	0x02008000

0800165c <HAL_I2C_EV_IRQHandler>:
{
 800165c:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800165e:	6803      	ldr	r3, [r0, #0]
 8001660:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001662:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001664:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001666:	2b00      	cmp	r3, #0
 8001668:	d000      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800166a:	4798      	blx	r3
}
 800166c:	bd10      	pop	{r4, pc}

0800166e <HAL_I2C_SlaveTxCpltCallback>:
}
 800166e:	4770      	bx	lr

08001670 <HAL_I2C_SlaveRxCpltCallback>:
}
 8001670:	4770      	bx	lr
	...

08001674 <I2C_ITSlaveSeqCplt>:
{
 8001674:	b510      	push	{r4, lr}
 8001676:	0004      	movs	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001678:	6803      	ldr	r3, [r0, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	2142      	movs	r1, #66	; 0x42
 800167e:	2000      	movs	r0, #0
 8001680:	5460      	strb	r0, [r4, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001682:	0451      	lsls	r1, r2, #17
 8001684:	d50c      	bpl.n	80016a0 <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4919      	ldr	r1, [pc, #100]	; (80016f0 <I2C_ITSlaveSeqCplt+0x7c>)
 800168a:	400a      	ands	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800168e:	2341      	movs	r3, #65	; 0x41
 8001690:	5ce3      	ldrb	r3, [r4, r3]
 8001692:	2b29      	cmp	r3, #41	; 0x29
 8001694:	d00b      	beq.n	80016ae <I2C_ITSlaveSeqCplt+0x3a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001696:	2341      	movs	r3, #65	; 0x41
 8001698:	5ce3      	ldrb	r3, [r4, r3]
 800169a:	2b2a      	cmp	r3, #42	; 0x2a
 800169c:	d017      	beq.n	80016ce <I2C_ITSlaveSeqCplt+0x5a>
}
 800169e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80016a0:	0412      	lsls	r2, r2, #16
 80016a2:	d5f4      	bpl.n	800168e <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4913      	ldr	r1, [pc, #76]	; (80016f4 <I2C_ITSlaveSeqCplt+0x80>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e7ef      	b.n	800168e <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80016ae:	3318      	adds	r3, #24
 80016b0:	2228      	movs	r2, #40	; 0x28
 80016b2:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80016b4:	3b20      	subs	r3, #32
 80016b6:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80016b8:	2101      	movs	r1, #1
 80016ba:	0020      	movs	r0, r4
 80016bc:	f7ff ff31 	bl	8001522 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	2200      	movs	r2, #0
 80016c4:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016c6:	0020      	movs	r0, r4
 80016c8:	f7ff ffd1 	bl	800166e <HAL_I2C_SlaveTxCpltCallback>
 80016cc:	e7e7      	b.n	800169e <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80016ce:	3317      	adds	r3, #23
 80016d0:	2228      	movs	r2, #40	; 0x28
 80016d2:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80016d4:	3b1f      	subs	r3, #31
 80016d6:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016d8:	2102      	movs	r1, #2
 80016da:	0020      	movs	r0, r4
 80016dc:	f7ff ff21 	bl	8001522 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	2200      	movs	r2, #0
 80016e4:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016e6:	0020      	movs	r0, r4
 80016e8:	f7ff ffc2 	bl	8001670 <HAL_I2C_SlaveRxCpltCallback>
}
 80016ec:	e7d7      	b.n	800169e <I2C_ITSlaveSeqCplt+0x2a>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	ffffbfff 	.word	0xffffbfff
 80016f4:	ffff7fff 	.word	0xffff7fff

080016f8 <HAL_I2C_AddrCallback>:
}
 80016f8:	4770      	bx	lr

080016fa <I2C_ITAddrCplt>:
{
 80016fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fc:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016fe:	2341      	movs	r3, #65	; 0x41
 8001700:	5cc3      	ldrb	r3, [r0, r3]
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	4013      	ands	r3, r2
 8001706:	2b28      	cmp	r3, #40	; 0x28
 8001708:	d006      	beq.n	8001718 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800170a:	6803      	ldr	r3, [r0, #0]
 800170c:	2208      	movs	r2, #8
 800170e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001710:	2340      	movs	r3, #64	; 0x40
 8001712:	2200      	movs	r2, #0
 8001714:	54c2      	strb	r2, [r0, r3]
}
 8001716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8001718:	6801      	ldr	r1, [r0, #0]
 800171a:	698e      	ldr	r6, [r1, #24]
 800171c:	0c36      	lsrs	r6, r6, #16
 800171e:	3b27      	subs	r3, #39	; 0x27
 8001720:	401e      	ands	r6, r3
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001722:	698d      	ldr	r5, [r1, #24]
 8001724:	0c2d      	lsrs	r5, r5, #16
 8001726:	27fe      	movs	r7, #254	; 0xfe
 8001728:	403d      	ands	r5, r7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800172a:	688b      	ldr	r3, [r1, #8]
 800172c:	059b      	lsls	r3, r3, #22
 800172e:	0d9b      	lsrs	r3, r3, #22
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001730:	68ca      	ldr	r2, [r1, #12]
 8001732:	4017      	ands	r7, r2
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001734:	68c2      	ldr	r2, [r0, #12]
 8001736:	2a02      	cmp	r2, #2
 8001738:	d124      	bne.n	8001784 <I2C_ITAddrCplt+0x8a>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800173a:	09da      	lsrs	r2, r3, #7
 800173c:	406a      	eors	r2, r5
 800173e:	2006      	movs	r0, #6
 8001740:	4210      	tst	r0, r2
 8001742:	d111      	bne.n	8001768 <I2C_ITAddrCplt+0x6e>
        hi2c->AddrEventCount++;
 8001744:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001746:	3201      	adds	r2, #1
 8001748:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800174a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800174c:	2a02      	cmp	r2, #2
 800174e:	d1e2      	bne.n	8001716 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8001750:	2200      	movs	r2, #0
 8001752:	64a2      	str	r2, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001754:	3002      	adds	r0, #2
 8001756:	61c8      	str	r0, [r1, #28]
          __HAL_UNLOCK(hi2c);
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	5462      	strb	r2, [r4, r1]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800175c:	001a      	movs	r2, r3
 800175e:	0031      	movs	r1, r6
 8001760:	0020      	movs	r0, r4
 8001762:	f7ff ffc9 	bl	80016f8 <HAL_I2C_AddrCallback>
 8001766:	e7d6      	b.n	8001716 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0209      	lsls	r1, r1, #8
 800176c:	0020      	movs	r0, r4
 800176e:	f7ff fed8 	bl	8001522 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001772:	2340      	movs	r3, #64	; 0x40
 8001774:	2200      	movs	r2, #0
 8001776:	54e2      	strb	r2, [r4, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001778:	003a      	movs	r2, r7
 800177a:	0031      	movs	r1, r6
 800177c:	0020      	movs	r0, r4
 800177e:	f7ff ffbb 	bl	80016f8 <HAL_I2C_AddrCallback>
 8001782:	e7c8      	b.n	8001716 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0209      	lsls	r1, r1, #8
 8001788:	f7ff fecb 	bl	8001522 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	2200      	movs	r2, #0
 8001790:	54e2      	strb	r2, [r4, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001792:	002a      	movs	r2, r5
 8001794:	0031      	movs	r1, r6
 8001796:	0020      	movs	r0, r4
 8001798:	f7ff ffae 	bl	80016f8 <HAL_I2C_AddrCallback>
 800179c:	e7bb      	b.n	8001716 <I2C_ITAddrCplt+0x1c>

0800179e <HAL_I2C_ListenCpltCallback>:
}
 800179e:	4770      	bx	lr

080017a0 <I2C_ITListenCplt>:
{
 80017a0:	b510      	push	{r4, lr}
 80017a2:	0004      	movs	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <I2C_ITListenCplt+0x60>)
 80017a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	2020      	movs	r0, #32
 80017b0:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b2:	3201      	adds	r2, #1
 80017b4:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 80017b6:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80017b8:	074b      	lsls	r3, r1, #29
 80017ba:	d513      	bpl.n	80017e4 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017c2:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80017c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80017ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80017d0:	3b01      	subs	r3, #1
 80017d2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017de:	2204      	movs	r2, #4
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <I2C_ITListenCplt+0x64>)
 80017e6:	0020      	movs	r0, r4
 80017e8:	f7ff fe9b 	bl	8001522 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	2210      	movs	r2, #16
 80017f0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80017f2:	2340      	movs	r3, #64	; 0x40
 80017f4:	2200      	movs	r2, #0
 80017f6:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 80017f8:	0020      	movs	r0, r4
 80017fa:	f7ff ffd0 	bl	800179e <HAL_I2C_ListenCpltCallback>
}
 80017fe:	bd10      	pop	{r4, pc}
 8001800:	ffff0000 	.word	0xffff0000
 8001804:	00008003 	.word	0x00008003

08001808 <HAL_I2C_ErrorCallback>:
}
 8001808:	4770      	bx	lr

0800180a <HAL_I2C_AbortCpltCallback>:
}
 800180a:	4770      	bx	lr

0800180c <I2C_TreatErrorCallback>:
{
 800180c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800180e:	2341      	movs	r3, #65	; 0x41
 8001810:	5cc3      	ldrb	r3, [r0, r3]
 8001812:	2b60      	cmp	r3, #96	; 0x60
 8001814:	d006      	beq.n	8001824 <I2C_TreatErrorCallback+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001816:	2300      	movs	r3, #0
 8001818:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800181e:	f7ff fff3 	bl	8001808 <HAL_I2C_ErrorCallback>
}
 8001822:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	3b1f      	subs	r3, #31
 8001826:	2220      	movs	r2, #32
 8001828:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800182e:	3220      	adds	r2, #32
 8001830:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001832:	f7ff ffea 	bl	800180a <HAL_I2C_AbortCpltCallback>
 8001836:	e7f4      	b.n	8001822 <I2C_TreatErrorCallback+0x16>

08001838 <I2C_ITError>:
{
 8001838:	b510      	push	{r4, lr}
 800183a:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800183c:	2341      	movs	r3, #65	; 0x41
 800183e:	5cc3      	ldrb	r3, [r0, r3]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001840:	2000      	movs	r0, #0
 8001842:	2242      	movs	r2, #66	; 0x42
 8001844:	54a0      	strb	r0, [r4, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001846:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <I2C_ITError+0xf8>)
 8001848:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800184a:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800184c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800184e:	430a      	orrs	r2, r1
 8001850:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001852:	3b28      	subs	r3, #40	; 0x28
 8001854:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001856:	2b02      	cmp	r3, #2
 8001858:	d81b      	bhi.n	8001892 <I2C_ITError+0x5a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800185a:	2103      	movs	r1, #3
 800185c:	0020      	movs	r0, r4
 800185e:	f7ff fe60 	bl	8001522 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001862:	2341      	movs	r3, #65	; 0x41
 8001864:	2228      	movs	r2, #40	; 0x28
 8001866:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001868:	4b32      	ldr	r3, [pc, #200]	; (8001934 <I2C_ITError+0xfc>)
 800186a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800186c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800186e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001870:	2a00      	cmp	r2, #0
 8001872:	d003      	beq.n	800187c <I2C_ITError+0x44>
 8001874:	2b11      	cmp	r3, #17
 8001876:	d01a      	beq.n	80018ae <I2C_ITError+0x76>
 8001878:	2b21      	cmp	r3, #33	; 0x21
 800187a:	d018      	beq.n	80018ae <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800187c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800187e:	2a00      	cmp	r2, #0
 8001880:	d003      	beq.n	800188a <I2C_ITError+0x52>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d033      	beq.n	80018ee <I2C_ITError+0xb6>
 8001886:	2b22      	cmp	r3, #34	; 0x22
 8001888:	d031      	beq.n	80018ee <I2C_ITError+0xb6>
    I2C_TreatErrorCallback(hi2c);
 800188a:	0020      	movs	r0, r4
 800188c:	f7ff ffbe 	bl	800180c <I2C_TreatErrorCallback>
}
 8001890:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001892:	4929      	ldr	r1, [pc, #164]	; (8001938 <I2C_ITError+0x100>)
 8001894:	0020      	movs	r0, r4
 8001896:	f7ff fe44 	bl	8001522 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800189a:	2341      	movs	r3, #65	; 0x41
 800189c:	5ce3      	ldrb	r3, [r4, r3]
 800189e:	2b60      	cmp	r3, #96	; 0x60
 80018a0:	d002      	beq.n	80018a8 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80018a2:	2341      	movs	r3, #65	; 0x41
 80018a4:	2220      	movs	r2, #32
 80018a6:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = NULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	6363      	str	r3, [r4, #52]	; 0x34
 80018ac:	e7de      	b.n	800186c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	0452      	lsls	r2, r2, #17
 80018b4:	d503      	bpl.n	80018be <I2C_ITError+0x86>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4920      	ldr	r1, [pc, #128]	; (800193c <I2C_ITError+0x104>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80018be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018c0:	f7ff fd18 	bl	80012f4 <HAL_DMA_GetState>
 80018c4:	2801      	cmp	r0, #1
 80018c6:	d00e      	beq.n	80018e6 <I2C_ITError+0xae>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80018c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018ca:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <I2C_ITError+0x108>)
 80018cc:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80018ce:	2340      	movs	r3, #64	; 0x40
 80018d0:	2200      	movs	r2, #0
 80018d2:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80018d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018d6:	f7ff fcc9 	bl	800126c <HAL_DMA_Abort_IT>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d0d8      	beq.n	8001890 <I2C_ITError+0x58>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80018de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018e2:	4798      	blx	r3
 80018e4:	e7d4      	b.n	8001890 <I2C_ITError+0x58>
      I2C_TreatErrorCallback(hi2c);
 80018e6:	0020      	movs	r0, r4
 80018e8:	f7ff ff90 	bl	800180c <I2C_TreatErrorCallback>
 80018ec:	e7d0      	b.n	8001890 <I2C_ITError+0x58>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	0412      	lsls	r2, r2, #16
 80018f4:	d503      	bpl.n	80018fe <I2C_ITError+0xc6>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4912      	ldr	r1, [pc, #72]	; (8001944 <I2C_ITError+0x10c>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80018fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001900:	f7ff fcf8 	bl	80012f4 <HAL_DMA_GetState>
 8001904:	2801      	cmp	r0, #1
 8001906:	d00e      	beq.n	8001926 <I2C_ITError+0xee>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <I2C_ITError+0x108>)
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	2200      	movs	r2, #0
 8001912:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001914:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001916:	f7ff fca9 	bl	800126c <HAL_DMA_Abort_IT>
 800191a:	2800      	cmp	r0, #0
 800191c:	d0b8      	beq.n	8001890 <I2C_ITError+0x58>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800191e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001920:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001922:	4798      	blx	r3
 8001924:	e7b4      	b.n	8001890 <I2C_ITError+0x58>
      I2C_TreatErrorCallback(hi2c);
 8001926:	0020      	movs	r0, r4
 8001928:	f7ff ff70 	bl	800180c <I2C_TreatErrorCallback>
 800192c:	e7b0      	b.n	8001890 <I2C_ITError+0x58>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	ffff0000 	.word	0xffff0000
 8001934:	08001ab1 	.word	0x08001ab1
 8001938:	00008003 	.word	0x00008003
 800193c:	ffffbfff 	.word	0xffffbfff
 8001940:	08001c5b 	.word	0x08001c5b
 8001944:	ffff7fff 	.word	0xffff7fff

08001948 <I2C_ITSlaveCplt>:
{
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	0004      	movs	r4, r0
 800194c:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800194e:	6802      	ldr	r2, [r0, #0]
 8001950:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001952:	2341      	movs	r3, #65	; 0x41
 8001954:	5cc3      	ldrb	r3, [r0, r3]
 8001956:	b2d9      	uxtb	r1, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001958:	2020      	movs	r0, #32
 800195a:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800195c:	2b21      	cmp	r3, #33	; 0x21
 800195e:	d00c      	beq.n	800197a <I2C_ITSlaveCplt+0x32>
 8001960:	2929      	cmp	r1, #41	; 0x29
 8001962:	d00a      	beq.n	800197a <I2C_ITSlaveCplt+0x32>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001964:	2922      	cmp	r1, #34	; 0x22
 8001966:	d001      	beq.n	800196c <I2C_ITSlaveCplt+0x24>
 8001968:	292a      	cmp	r1, #42	; 0x2a
 800196a:	d10c      	bne.n	8001986 <I2C_ITSlaveCplt+0x3e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800196c:	494a      	ldr	r1, [pc, #296]	; (8001a98 <I2C_ITSlaveCplt+0x150>)
 800196e:	0020      	movs	r0, r4
 8001970:	f7ff fdd7 	bl	8001522 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001974:	2322      	movs	r3, #34	; 0x22
 8001976:	6323      	str	r3, [r4, #48]	; 0x30
 8001978:	e005      	b.n	8001986 <I2C_ITSlaveCplt+0x3e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800197a:	4948      	ldr	r1, [pc, #288]	; (8001a9c <I2C_ITSlaveCplt+0x154>)
 800197c:	0020      	movs	r0, r4
 800197e:	f7ff fdd0 	bl	8001522 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001982:	2321      	movs	r3, #33	; 0x21
 8001984:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	6851      	ldr	r1, [r2, #4]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	430b      	orrs	r3, r1
 8001990:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	6853      	ldr	r3, [r2, #4]
 8001996:	4942      	ldr	r1, [pc, #264]	; (8001aa0 <I2C_ITSlaveCplt+0x158>)
 8001998:	400b      	ands	r3, r1
 800199a:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800199c:	0020      	movs	r0, r4
 800199e:	f7ff fdb1 	bl	8001504 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80019a2:	0473      	lsls	r3, r6, #17
 80019a4:	d541      	bpl.n	8001a2a <I2C_ITSlaveCplt+0xe2>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019a6:	6822      	ldr	r2, [r4, #0]
 80019a8:	6813      	ldr	r3, [r2, #0]
 80019aa:	493e      	ldr	r1, [pc, #248]	; (8001aa4 <I2C_ITSlaveCplt+0x15c>)
 80019ac:	400b      	ands	r3, r1
 80019ae:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80019b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80019be:	076b      	lsls	r3, r5, #29
 80019c0:	d511      	bpl.n	80019e6 <I2C_ITSlaveCplt+0x9e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80019c2:	2304      	movs	r3, #4
 80019c4:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019cc:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80019ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80019d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <I2C_ITSlaveCplt+0x9e>
      hi2c->XferSize--;
 80019da:	3b01      	subs	r3, #1
 80019dc:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80019de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80019e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <I2C_ITSlaveCplt+0xae>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019f0:	2204      	movs	r2, #4
 80019f2:	4313      	orrs	r3, r2
 80019f4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	2242      	movs	r2, #66	; 0x42
 80019fa:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 80019fc:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d121      	bne.n	8001a48 <I2C_ITSlaveCplt+0x100>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a06:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <I2C_ITSlaveCplt+0x160>)
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d12a      	bne.n	8001a62 <I2C_ITSlaveCplt+0x11a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a0c:	2341      	movs	r3, #65	; 0x41
 8001a0e:	5ce3      	ldrb	r3, [r4, r3]
 8001a10:	2b22      	cmp	r3, #34	; 0x22
 8001a12:	d036      	beq.n	8001a82 <I2C_ITSlaveCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	2341      	movs	r3, #65	; 0x41
 8001a16:	2220      	movs	r2, #32
 8001a18:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001a1e:	3220      	adds	r2, #32
 8001a20:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001a22:	0020      	movs	r0, r4
 8001a24:	f7ff fe23 	bl	800166e <HAL_I2C_SlaveTxCpltCallback>
}
 8001a28:	e02a      	b.n	8001a80 <I2C_ITSlaveCplt+0x138>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a2a:	0433      	lsls	r3, r6, #16
 8001a2c:	d5c7      	bpl.n	80019be <I2C_ITSlaveCplt+0x76>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	491e      	ldr	r1, [pc, #120]	; (8001aac <I2C_ITSlaveCplt+0x164>)
 8001a34:	400b      	ands	r3, r1
 8001a36:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8001a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0bf      	beq.n	80019be <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a46:	e7ba      	b.n	80019be <I2C_ITSlaveCplt+0x76>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a48:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	f7ff fef4 	bl	8001838 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001a50:	2341      	movs	r3, #65	; 0x41
 8001a52:	5ce3      	ldrb	r3, [r4, r3]
 8001a54:	2b28      	cmp	r3, #40	; 0x28
 8001a56:	d113      	bne.n	8001a80 <I2C_ITSlaveCplt+0x138>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a58:	0029      	movs	r1, r5
 8001a5a:	0020      	movs	r0, r4
 8001a5c:	f7ff fea0 	bl	80017a0 <I2C_ITListenCplt>
 8001a60:	e00e      	b.n	8001a80 <I2C_ITSlaveCplt+0x138>
    I2C_ITSlaveSeqCplt(hi2c);
 8001a62:	0020      	movs	r0, r4
 8001a64:	f7ff fe06 	bl	8001674 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <I2C_ITSlaveCplt+0x160>)
 8001a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	2341      	movs	r3, #65	; 0x41
 8001a6e:	2220      	movs	r2, #32
 8001a70:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001a76:	3220      	adds	r2, #32
 8001a78:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f7ff fe8f 	bl	800179e <HAL_I2C_ListenCpltCallback>
}
 8001a80:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	331f      	adds	r3, #31
 8001a84:	2220      	movs	r2, #32
 8001a86:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001a8c:	3220      	adds	r2, #32
 8001a8e:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001a90:	0020      	movs	r0, r4
 8001a92:	f7ff fded 	bl	8001670 <HAL_I2C_SlaveRxCpltCallback>
 8001a96:	e7f3      	b.n	8001a80 <I2C_ITSlaveCplt+0x138>
 8001a98:	00008002 	.word	0x00008002
 8001a9c:	00008001 	.word	0x00008001
 8001aa0:	fe00e800 	.word	0xfe00e800
 8001aa4:	ffffbfff 	.word	0xffffbfff
 8001aa8:	ffff0000 	.word	0xffff0000
 8001aac:	ffff7fff 	.word	0xffff7fff

08001ab0 <I2C_Slave_ISR_IT>:
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	0004      	movs	r4, r0
 8001ab4:	000d      	movs	r5, r1
 8001ab6:	0016      	movs	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ab8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8001aba:	2340      	movs	r3, #64	; 0x40
 8001abc:	5cc3      	ldrb	r3, [r0, r3]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d100      	bne.n	8001ac4 <I2C_Slave_ISR_IT+0x14>
 8001ac2:	e096      	b.n	8001bf2 <I2C_Slave_ISR_IT+0x142>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aca:	094a      	lsrs	r2, r1, #5
 8001acc:	4213      	tst	r3, r2
 8001ace:	d001      	beq.n	8001ad4 <I2C_Slave_ISR_IT+0x24>
 8001ad0:	06b3      	lsls	r3, r6, #26
 8001ad2:	d417      	bmi.n	8001b04 <I2C_Slave_ISR_IT+0x54>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ad4:	06eb      	lsls	r3, r5, #27
 8001ad6:	d540      	bpl.n	8001b5a <I2C_Slave_ISR_IT+0xaa>
 8001ad8:	06f3      	lsls	r3, r6, #27
 8001ada:	d53e      	bpl.n	8001b5a <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8001adc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d128      	bne.n	8001b36 <I2C_Slave_ISR_IT+0x86>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ae4:	3341      	adds	r3, #65	; 0x41
 8001ae6:	5ce3      	ldrb	r3, [r4, r3]
 8001ae8:	2b28      	cmp	r3, #40	; 0x28
 8001aea:	d00e      	beq.n	8001b0a <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001aec:	2341      	movs	r3, #65	; 0x41
 8001aee:	5ce3      	ldrb	r3, [r4, r3]
 8001af0:	2b29      	cmp	r3, #41	; 0x29
 8001af2:	d013      	beq.n	8001b1c <I2C_Slave_ISR_IT+0x6c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	2210      	movs	r2, #16
 8001af8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	2200      	movs	r2, #0
 8001afe:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
}
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b04:	f7ff ff20 	bl	8001948 <I2C_ITSlaveCplt>
 8001b08:	e7e4      	b.n	8001ad4 <I2C_Slave_ISR_IT+0x24>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	049b      	lsls	r3, r3, #18
 8001b0e:	429f      	cmp	r7, r3
 8001b10:	d1ec      	bne.n	8001aec <I2C_Slave_ISR_IT+0x3c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b12:	0029      	movs	r1, r5
 8001b14:	0020      	movs	r0, r4
 8001b16:	f7ff fe43 	bl	80017a0 <I2C_ITListenCplt>
 8001b1a:	e7ee      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <I2C_Slave_ISR_IT+0x148>)
 8001b1e:	429f      	cmp	r7, r3
 8001b20:	d0e8      	beq.n	8001af4 <I2C_Slave_ISR_IT+0x44>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f7ff fceb 	bl	8001504 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001b2e:	0020      	movs	r0, r4
 8001b30:	f7ff fda0 	bl	8001674 <I2C_ITSlaveSeqCplt>
 8001b34:	e7e1      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b3e:	3a0c      	subs	r2, #12
 8001b40:	4313      	orrs	r3, r2
 8001b42:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b44:	2f00      	cmp	r7, #0
 8001b46:	d003      	beq.n	8001b50 <I2C_Slave_ISR_IT+0xa0>
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	045b      	lsls	r3, r3, #17
 8001b4c:	429f      	cmp	r7, r3
 8001b4e:	d1d4      	bne.n	8001afa <I2C_Slave_ISR_IT+0x4a>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b52:	0020      	movs	r0, r4
 8001b54:	f7ff fe70 	bl	8001838 <I2C_ITError>
 8001b58:	e7cf      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b5a:	076b      	lsls	r3, r5, #29
 8001b5c:	d51e      	bpl.n	8001b9c <I2C_Slave_ISR_IT+0xec>
 8001b5e:	0773      	lsls	r3, r6, #29
 8001b60:	d51c      	bpl.n	8001b9c <I2C_Slave_ISR_IT+0xec>
    if (hi2c->XferCount > 0U)
 8001b62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00d      	beq.n	8001b86 <I2C_Slave_ISR_IT+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b70:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001b78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001b86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1b5      	bne.n	8001afa <I2C_Slave_ISR_IT+0x4a>
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <I2C_Slave_ISR_IT+0x148>)
 8001b90:	429f      	cmp	r7, r3
 8001b92:	d0b2      	beq.n	8001afa <I2C_Slave_ISR_IT+0x4a>
      I2C_ITSlaveSeqCplt(hi2c);
 8001b94:	0020      	movs	r0, r4
 8001b96:	f7ff fd6d 	bl	8001674 <I2C_ITSlaveSeqCplt>
 8001b9a:	e7ae      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b9c:	072b      	lsls	r3, r5, #28
 8001b9e:	d501      	bpl.n	8001ba4 <I2C_Slave_ISR_IT+0xf4>
 8001ba0:	0733      	lsls	r3, r6, #28
 8001ba2:	d416      	bmi.n	8001bd2 <I2C_Slave_ISR_IT+0x122>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ba4:	07ab      	lsls	r3, r5, #30
 8001ba6:	d5a8      	bpl.n	8001afa <I2C_Slave_ISR_IT+0x4a>
 8001ba8:	07b3      	lsls	r3, r6, #30
 8001baa:	d5a6      	bpl.n	8001afa <I2C_Slave_ISR_IT+0x4a>
    if (hi2c->XferCount > 0U)
 8001bac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <I2C_Slave_ISR_IT+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	8523      	strh	r3, [r4, #40]	; 0x28
 8001bd0:	e793      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001bd2:	0029      	movs	r1, r5
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	f7ff fd90 	bl	80016fa <I2C_ITAddrCplt>
 8001bda:	e78e      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	045b      	lsls	r3, r3, #17
 8001be0:	429f      	cmp	r7, r3
 8001be2:	d002      	beq.n	8001bea <I2C_Slave_ISR_IT+0x13a>
 8001be4:	2f00      	cmp	r7, #0
 8001be6:	d000      	beq.n	8001bea <I2C_Slave_ISR_IT+0x13a>
 8001be8:	e787      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
        I2C_ITSlaveSeqCplt(hi2c);
 8001bea:	0020      	movs	r0, r4
 8001bec:	f7ff fd42 	bl	8001674 <I2C_ITSlaveSeqCplt>
 8001bf0:	e783      	b.n	8001afa <I2C_Slave_ISR_IT+0x4a>
  __HAL_LOCK(hi2c);
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	e785      	b.n	8001b02 <I2C_Slave_ISR_IT+0x52>
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	ffff0000 	.word	0xffff0000

08001bfc <HAL_I2C_ER_IRQHandler>:
{
 8001bfc:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001bfe:	6802      	ldr	r2, [r0, #0]
 8001c00:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c02:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c04:	05dc      	lsls	r4, r3, #23
 8001c06:	d508      	bpl.n	8001c1a <HAL_I2C_ER_IRQHandler+0x1e>
 8001c08:	060c      	lsls	r4, r1, #24
 8001c0a:	d506      	bpl.n	8001c1a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001c0c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c0e:	2501      	movs	r5, #1
 8001c10:	432c      	orrs	r4, r5
 8001c12:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c14:	2480      	movs	r4, #128	; 0x80
 8001c16:	0064      	lsls	r4, r4, #1
 8001c18:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c1a:	055a      	lsls	r2, r3, #21
 8001c1c:	d509      	bpl.n	8001c32 <HAL_I2C_ER_IRQHandler+0x36>
 8001c1e:	060a      	lsls	r2, r1, #24
 8001c20:	d507      	bpl.n	8001c32 <HAL_I2C_ER_IRQHandler+0x36>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001c22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001c24:	2408      	movs	r4, #8
 8001c26:	4322      	orrs	r2, r4
 8001c28:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c2a:	6802      	ldr	r2, [r0, #0]
 8001c2c:	2480      	movs	r4, #128	; 0x80
 8001c2e:	00e4      	lsls	r4, r4, #3
 8001c30:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c32:	059b      	lsls	r3, r3, #22
 8001c34:	d509      	bpl.n	8001c4a <HAL_I2C_ER_IRQHandler+0x4e>
 8001c36:	060b      	lsls	r3, r1, #24
 8001c38:	d507      	bpl.n	8001c4a <HAL_I2C_ER_IRQHandler+0x4e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001c3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c42:	6803      	ldr	r3, [r0, #0]
 8001c44:	32ff      	adds	r2, #255	; 0xff
 8001c46:	32ff      	adds	r2, #255	; 0xff
 8001c48:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001c4a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001c4c:	230b      	movs	r3, #11
 8001c4e:	420b      	tst	r3, r1
 8001c50:	d100      	bne.n	8001c54 <HAL_I2C_ER_IRQHandler+0x58>
}
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, tmperror);
 8001c54:	f7ff fdf0 	bl	8001838 <I2C_ITError>
}
 8001c58:	e7fb      	b.n	8001c52 <HAL_I2C_ER_IRQHandler+0x56>

08001c5a <I2C_DMAAbort>:
{
 8001c5a:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001c5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8001c5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001c64:	2200      	movs	r2, #0
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8001c68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001c6e:	2200      	movs	r2, #0
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8001c72:	f7ff fdcb 	bl	800180c <I2C_TreatErrorCallback>
}
 8001c76:	bd10      	pop	{r4, pc}

08001c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7a:	2341      	movs	r3, #65	; 0x41
 8001c7c:	5cc3      	ldrb	r3, [r0, r3]
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d120      	bne.n	8001cc4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	3320      	adds	r3, #32
 8001c84:	5cc3      	ldrb	r3, [r0, r3]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d01e      	beq.n	8001cc8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8001c8a:	2440      	movs	r4, #64	; 0x40
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	2541      	movs	r5, #65	; 0x41
 8001c92:	2324      	movs	r3, #36	; 0x24
 8001c94:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c96:	6806      	ldr	r6, [r0, #0]
 8001c98:	6833      	ldr	r3, [r6, #0]
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c9e:	6806      	ldr	r6, [r0, #0]
 8001ca0:	6833      	ldr	r3, [r6, #0]
 8001ca2:	4f0a      	ldr	r7, [pc, #40]	; (8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8001ca4:	403b      	ands	r3, r7
 8001ca6:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ca8:	6806      	ldr	r6, [r0, #0]
 8001caa:	6833      	ldr	r3, [r6, #0]
 8001cac:	4319      	orrs	r1, r3
 8001cae:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cb0:	6801      	ldr	r1, [r0, #0]
 8001cb2:	680b      	ldr	r3, [r1, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001cc0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	e7fc      	b.n	8001cc2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8001cc8:	2002      	movs	r0, #2
 8001cca:	e7fa      	b.n	8001cc2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8001ccc:	ffffefff 	.word	0xffffefff

08001cd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd2:	2341      	movs	r3, #65	; 0x41
 8001cd4:	5cc3      	ldrb	r3, [r0, r3]
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d11e      	bne.n	8001d18 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cda:	3320      	adds	r3, #32
 8001cdc:	5cc3      	ldrb	r3, [r0, r3]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d01c      	beq.n	8001d1c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8001ce2:	2440      	movs	r4, #64	; 0x40
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	2541      	movs	r5, #65	; 0x41
 8001cea:	2324      	movs	r3, #36	; 0x24
 8001cec:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cee:	6806      	ldr	r6, [r0, #0]
 8001cf0:	6833      	ldr	r3, [r6, #0]
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cf6:	6806      	ldr	r6, [r0, #0]
 8001cf8:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cfa:	4f09      	ldr	r7, [pc, #36]	; (8001d20 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001cfc:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cfe:	0209      	lsls	r1, r1, #8
 8001d00:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d02:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d04:	6801      	ldr	r1, [r0, #0]
 8001d06:	680b      	ldr	r3, [r1, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	2300      	movs	r3, #0
 8001d12:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001d14:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001d18:	2002      	movs	r0, #2
 8001d1a:	e7fc      	b.n	8001d16 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	e7fa      	b.n	8001d16 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8001d20:	fffff0ff 	.word	0xfffff0ff

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	d100      	bne.n	8001d2c <HAL_RCC_OscConfig+0x8>
 8001d2a:	e149      	b.n	8001fc0 <HAL_RCC_OscConfig+0x29c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2c:	6803      	ldr	r3, [r0, #0]
 8001d2e:	07db      	lsls	r3, r3, #31
 8001d30:	d530      	bpl.n	8001d94 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	4bab      	ldr	r3, [pc, #684]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	2338      	movs	r3, #56	; 0x38
 8001d38:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d022      	beq.n	8001d84 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	6843      	ldr	r3, [r0, #4]
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	0252      	lsls	r2, r2, #9
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d072      	beq.n	8001e2e <HAL_RCC_OscConfig+0x10a>
 8001d48:	22a0      	movs	r2, #160	; 0xa0
 8001d4a:	02d2      	lsls	r2, r2, #11
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d075      	beq.n	8001e3c <HAL_RCC_OscConfig+0x118>
 8001d50:	4ba3      	ldr	r3, [pc, #652]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	49a3      	ldr	r1, [pc, #652]	; (8001fe4 <HAL_RCC_OscConfig+0x2c0>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	49a2      	ldr	r1, [pc, #648]	; (8001fe8 <HAL_RCC_OscConfig+0x2c4>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d62:	6863      	ldr	r3, [r4, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d075      	beq.n	8001e54 <HAL_RCC_OscConfig+0x130>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f9d0 	bl	800110c <HAL_GetTick>
 8001d6c:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b9c      	ldr	r3, [pc, #624]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	039b      	lsls	r3, r3, #14
 8001d74:	d40e      	bmi.n	8001d94 <HAL_RCC_OscConfig+0x70>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff f9c9 	bl	800110c <HAL_GetTick>
 8001d7a:	1b40      	subs	r0, r0, r5
 8001d7c:	2864      	cmp	r0, #100	; 0x64
 8001d7e:	d9f6      	bls.n	8001d6e <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8001d80:	2003      	movs	r0, #3
 8001d82:	e128      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	039b      	lsls	r3, r3, #14
 8001d8a:	d503      	bpl.n	8001d94 <HAL_RCC_OscConfig+0x70>
 8001d8c:	6843      	ldr	r3, [r0, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <HAL_RCC_OscConfig+0x70>
 8001d92:	e117      	b.n	8001fc4 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	079b      	lsls	r3, r3, #30
 8001d98:	d529      	bpl.n	8001dee <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9a:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2238      	movs	r2, #56	; 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001da0:	421a      	tst	r2, r3
 8001da2:	d165      	bne.n	8001e70 <HAL_RCC_OscConfig+0x14c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da4:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	055b      	lsls	r3, r3, #21
 8001daa:	d503      	bpl.n	8001db4 <HAL_RCC_OscConfig+0x90>
 8001dac:	68e3      	ldr	r3, [r4, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <HAL_RCC_OscConfig+0x90>
 8001db2:	e109      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	498c      	ldr	r1, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x2c8>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	6961      	ldr	r1, [r4, #20]
 8001dbe:	0209      	lsls	r1, r1, #8
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	498a      	ldr	r1, [pc, #552]	; (8001ff0 <HAL_RCC_OscConfig+0x2cc>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	6921      	ldr	r1, [r4, #16]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0adb      	lsrs	r3, r3, #11
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <HAL_RCC_OscConfig+0x2d0>)
 8001dda:	40d3      	lsrs	r3, r2
 8001ddc:	4a86      	ldr	r2, [pc, #536]	; (8001ff8 <HAL_RCC_OscConfig+0x2d4>)
 8001dde:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001de0:	4b86      	ldr	r3, [pc, #536]	; (8001ffc <HAL_RCC_OscConfig+0x2d8>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f7ff f94e 	bl	8001084 <HAL_InitTick>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d000      	beq.n	8001dee <HAL_RCC_OscConfig+0xca>
 8001dec:	e0ee      	b.n	8001fcc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	071b      	lsls	r3, r3, #28
 8001df2:	d57d      	bpl.n	8001ef0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	2338      	movs	r3, #56	; 0x38
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b18      	cmp	r3, #24
 8001dfe:	d070      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1be>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	69a3      	ldr	r3, [r4, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe4>
 8001e06:	e09c      	b.n	8001f42 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e08:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e0a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f97b 	bl	800110c <HAL_GetTick>
 8001e16:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e18:	4b71      	ldr	r3, [pc, #452]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	079b      	lsls	r3, r3, #30
 8001e1e:	d467      	bmi.n	8001ef0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff f974 	bl	800110c <HAL_GetTick>
 8001e24:	1b40      	subs	r0, r0, r5
 8001e26:	2802      	cmp	r0, #2
 8001e28:	d9f6      	bls.n	8001e18 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	e0d3      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	4a6c      	ldr	r2, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e30:	6811      	ldr	r1, [r2, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	025b      	lsls	r3, r3, #9
 8001e36:	430b      	orrs	r3, r1
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e792      	b.n	8001d62 <HAL_RCC_OscConfig+0x3e>
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	02d2      	lsls	r2, r2, #11
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	0252      	lsls	r2, r2, #9
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e786      	b.n	8001d62 <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8001e54:	f7ff f95a 	bl	800110c <HAL_GetTick>
 8001e58:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5a:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	039b      	lsls	r3, r3, #14
 8001e60:	d598      	bpl.n	8001d94 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e62:	f7ff f953 	bl	800110c <HAL_GetTick>
 8001e66:	1b40      	subs	r0, r0, r5
 8001e68:	2864      	cmp	r0, #100	; 0x64
 8001e6a:	d9f6      	bls.n	8001e5a <HAL_RCC_OscConfig+0x136>
            return HAL_TIMEOUT;
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	e0b2      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	68e3      	ldr	r3, [r4, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d022      	beq.n	8001ebc <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e76:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	495d      	ldr	r1, [pc, #372]	; (8001ff0 <HAL_RCC_OscConfig+0x2cc>)
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	6921      	ldr	r1, [r4, #16]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8001e84:	6811      	ldr	r1, [r2, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f93d 	bl	800110c <HAL_GetTick>
 8001e92:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	d406      	bmi.n	8001eaa <HAL_RCC_OscConfig+0x186>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f936 	bl	800110c <HAL_GetTick>
 8001ea0:	1b40      	subs	r0, r0, r5
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	d9f6      	bls.n	8001e94 <HAL_RCC_OscConfig+0x170>
            return HAL_TIMEOUT;
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	e095      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001eac:	684b      	ldr	r3, [r1, #4]
 8001eae:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_RCC_OscConfig+0x2c8>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	6962      	ldr	r2, [r4, #20]
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
 8001eba:	e798      	b.n	8001dee <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 8001ebc:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	494f      	ldr	r1, [pc, #316]	; (8002000 <HAL_RCC_OscConfig+0x2dc>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f921 	bl	800110c <HAL_GetTick>
 8001eca:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ecc:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	055b      	lsls	r3, r3, #21
 8001ed2:	d58c      	bpl.n	8001dee <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f91a 	bl	800110c <HAL_GetTick>
 8001ed8:	1b40      	subs	r0, r0, r5
 8001eda:	2802      	cmp	r0, #2
 8001edc:	d9f6      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	e079      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee6:	079b      	lsls	r3, r3, #30
 8001ee8:	d502      	bpl.n	8001ef0 <HAL_RCC_OscConfig+0x1cc>
 8001eea:	69a3      	ldr	r3, [r4, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d06f      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	075b      	lsls	r3, r3, #29
 8001ef4:	d56e      	bpl.n	8001fd4 <HAL_RCC_OscConfig+0x2b0>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	2338      	movs	r3, #56	; 0x38
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d032      	beq.n	8001f68 <HAL_RCC_OscConfig+0x244>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f02:	68a3      	ldr	r3, [r4, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d038      	beq.n	8001f7a <HAL_RCC_OscConfig+0x256>
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d03c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x262>
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f10:	2101      	movs	r1, #1
 8001f12:	438a      	bics	r2, r1
 8001f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f18:	3103      	adds	r1, #3
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1e:	68a3      	ldr	r3, [r4, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f8f2 	bl	800110c <HAL_GetTick>
 8001f28:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	079b      	lsls	r3, r3, #30
 8001f30:	d433      	bmi.n	8001f9a <HAL_RCC_OscConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff f8eb 	bl	800110c <HAL_GetTick>
 8001f36:	1b00      	subs	r0, r0, r4
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_RCC_OscConfig+0x2e0>)
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d9f5      	bls.n	8001f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f3e:	2003      	movs	r0, #3
 8001f40:	e049      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_LSI_DISABLE();
 8001f42:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f44:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001f46:	2101      	movs	r1, #1
 8001f48:	438b      	bics	r3, r1
 8001f4a:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f8de 	bl	800110c <HAL_GetTick>
 8001f50:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	079b      	lsls	r3, r3, #30
 8001f58:	d5ca      	bpl.n	8001ef0 <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff f8d7 	bl	800110c <HAL_GetTick>
 8001f5e:	1b40      	subs	r0, r0, r5
 8001f60:	2802      	cmp	r0, #2
 8001f62:	d9f6      	bls.n	8001f52 <HAL_RCC_OscConfig+0x22e>
            return HAL_TIMEOUT;
 8001f64:	2003      	movs	r0, #3
 8001f66:	e036      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	079b      	lsls	r3, r3, #30
 8001f6e:	d533      	bpl.n	8001fd8 <HAL_RCC_OscConfig+0x2b4>
 8001f70:	68a3      	ldr	r3, [r4, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d032      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2b8>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8001f76:	2000      	movs	r0, #0
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f7c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430b      	orrs	r3, r1
 8001f82:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f84:	e7cb      	b.n	8001f1e <HAL_RCC_OscConfig+0x1fa>
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001f88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f92:	3903      	subs	r1, #3
 8001f94:	430a      	orrs	r2, r1
 8001f96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f98:	e7c1      	b.n	8001f1e <HAL_RCC_OscConfig+0x1fa>
  return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	e01b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f8b5 	bl	800110c <HAL_GetTick>
 8001fa2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCC_OscConfig+0x2bc>)
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	079b      	lsls	r3, r3, #30
 8001faa:	d507      	bpl.n	8001fbc <HAL_RCC_OscConfig+0x298>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7ff f8ae 	bl	800110c <HAL_GetTick>
 8001fb0:	1b00      	subs	r0, r0, r4
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCC_OscConfig+0x2e0>)
 8001fb4:	4298      	cmp	r0, r3
 8001fb6:	d9f5      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x280>
            return HAL_TIMEOUT;
 8001fb8:	2003      	movs	r0, #3
 8001fba:	e00c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
  return HAL_OK;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
    return HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	e006      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
 8001fca:	e004      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
          return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
}
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001fd8:	2000      	movs	r0, #0
 8001fda:	e7fc      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	e7fa      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b2>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	fffeffff 	.word	0xfffeffff
 8001fe8:	fffbffff 	.word	0xfffbffff
 8001fec:	ffff80ff 	.word	0xffff80ff
 8001ff0:	ffffc7ff 	.word	0xffffc7ff
 8001ff4:	02dc6c00 	.word	0x02dc6c00
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000008 	.word	0x20000008
 8002000:	fffffeff 	.word	0xfffffeff
 8002004:	00001388 	.word	0x00001388

08002008 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCC_GetSysClockFreq+0x54>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2238      	movs	r2, #56	; 0x38
 800200e:	421a      	tst	r2, r3
 8002010:	d107      	bne.n	8002022 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_GetSysClockFreq+0x54>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	0ad2      	lsrs	r2, r2, #11
 8002018:	2307      	movs	r3, #7
 800201a:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800201c:	4810      	ldr	r0, [pc, #64]	; (8002060 <HAL_RCC_GetSysClockFreq+0x58>)
 800201e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002020:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_RCC_GetSysClockFreq+0x54>)
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	2338      	movs	r3, #56	; 0x38
 8002028:	4013      	ands	r3, r2
 800202a:	2b08      	cmp	r3, #8
 800202c:	d010      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_GetSysClockFreq+0x54>)
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	2338      	movs	r3, #56	; 0x38
 8002034:	4013      	ands	r3, r2
 8002036:	2b20      	cmp	r3, #32
 8002038:	d00c      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_RCC_GetSysClockFreq+0x54>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	2338      	movs	r3, #56	; 0x38
 8002040:	4013      	ands	r3, r2
 8002042:	2b18      	cmp	r3, #24
 8002044:	d001      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8002046:	2000      	movs	r0, #0
  return sysclockfreq;
 8002048:	e7ea      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800204a:	20fa      	movs	r0, #250	; 0xfa
 800204c:	01c0      	lsls	r0, r0, #7
 800204e:	e7e7      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002052:	e7e5      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002054:	2080      	movs	r0, #128	; 0x80
 8002056:	0200      	lsls	r0, r0, #8
 8002058:	e7e2      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x18>
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	02dc6c00 	.word	0x02dc6c00
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_ClockConfig>:
{
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	0004      	movs	r4, r0
 800206c:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800206e:	2800      	cmp	r0, #0
 8002070:	d100      	bne.n	8002074 <HAL_RCC_ClockConfig+0xc>
 8002072:	e0aa      	b.n	80021ca <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_ClockConfig+0x16c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2307      	movs	r3, #7
 800207a:	4013      	ands	r3, r2
 800207c:	428b      	cmp	r3, r1
 800207e:	d328      	bcc.n	80020d2 <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	079a      	lsls	r2, r3, #30
 8002084:	d510      	bpl.n	80020a8 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	d507      	bpl.n	800209a <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800208a:	4953      	ldr	r1, [pc, #332]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 800208c:	688b      	ldr	r3, [r1, #8]
 800208e:	4a53      	ldr	r2, [pc, #332]	; (80021dc <HAL_RCC_ClockConfig+0x174>)
 8002090:	401a      	ands	r2, r3
 8002092:	23b0      	movs	r3, #176	; 0xb0
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209a:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 800209c:	6893      	ldr	r3, [r2, #8]
 800209e:	4950      	ldr	r1, [pc, #320]	; (80021e0 <HAL_RCC_ClockConfig+0x178>)
 80020a0:	400b      	ands	r3, r1
 80020a2:	68e1      	ldr	r1, [r4, #12]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	07db      	lsls	r3, r3, #31
 80020ac:	d552      	bpl.n	8002154 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	211c      	movs	r1, #28
 80020b4:	438b      	bics	r3, r1
 80020b6:	68a1      	ldr	r1, [r4, #8]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6013      	str	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d01e      	beq.n	8002100 <HAL_RCC_ClockConfig+0x98>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d138      	bne.n	8002138 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c6:	4a44      	ldr	r2, [pc, #272]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	0552      	lsls	r2, r2, #21
 80020cc:	d41b      	bmi.n	8002106 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
 80020d0:	e063      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <HAL_RCC_ClockConfig+0x16c>)
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	2107      	movs	r1, #7
 80020d8:	438b      	bics	r3, r1
 80020da:	432b      	orrs	r3, r5
 80020dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80020de:	f7ff f815 	bl	800110c <HAL_GetTick>
 80020e2:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCC_ClockConfig+0x16c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2307      	movs	r3, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	42ab      	cmp	r3, r5
 80020ee:	d0c7      	beq.n	8002080 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7ff f80c 	bl	800110c <HAL_GetTick>
 80020f4:	1b80      	subs	r0, r0, r6
 80020f6:	4a3b      	ldr	r2, [pc, #236]	; (80021e4 <HAL_RCC_ClockConfig+0x17c>)
 80020f8:	4290      	cmp	r0, r2
 80020fa:	d9f3      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 80020fc:	2003      	movs	r0, #3
 80020fe:	e04c      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	0392      	lsls	r2, r2, #14
 8002104:	d563      	bpl.n	80021ce <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 8002108:	688a      	ldr	r2, [r1, #8]
 800210a:	2007      	movs	r0, #7
 800210c:	4382      	bics	r2, r0
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002112:	f7fe fffb 	bl	800110c <HAL_GetTick>
 8002116:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2238      	movs	r2, #56	; 0x38
 800211e:	401a      	ands	r2, r3
 8002120:	6863      	ldr	r3, [r4, #4]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	429a      	cmp	r2, r3
 8002126:	d015      	beq.n	8002154 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7fe fff0 	bl	800110c <HAL_GetTick>
 800212c:	1b80      	subs	r0, r0, r6
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x17c>)
 8002130:	4298      	cmp	r0, r3
 8002132:	d9f1      	bls.n	8002118 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8002134:	2003      	movs	r0, #3
 8002136:	e030      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002138:	2b03      	cmp	r3, #3
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 800213e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002140:	0792      	lsls	r2, r2, #30
 8002142:	d4e0      	bmi.n	8002106 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
 8002146:	e028      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 800214a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800214c:	0792      	lsls	r2, r2, #30
 800214e:	d4da      	bmi.n	8002106 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
 8002152:	e022      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_ClockConfig+0x16c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2307      	movs	r3, #7
 800215a:	4013      	ands	r3, r2
 800215c:	42ab      	cmp	r3, r5
 800215e:	d81d      	bhi.n	800219c <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	075b      	lsls	r3, r3, #29
 8002164:	d506      	bpl.n	8002174 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 8002168:	6893      	ldr	r3, [r2, #8]
 800216a:	491f      	ldr	r1, [pc, #124]	; (80021e8 <HAL_RCC_ClockConfig+0x180>)
 800216c:	400b      	ands	r3, r1
 800216e:	6921      	ldr	r1, [r4, #16]
 8002170:	430b      	orrs	r3, r1
 8002172:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002174:	f7ff ff48 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_ClockConfig+0x170>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	0a12      	lsrs	r2, r2, #8
 800217e:	230f      	movs	r3, #15
 8002180:	4013      	ands	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002186:	589a      	ldr	r2, [r3, r2]
 8002188:	231f      	movs	r3, #31
 800218a:	4013      	ands	r3, r2
 800218c:	40d8      	lsrs	r0, r3
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002190:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_RCC_ClockConfig+0x18c>)
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	f7fe ff75 	bl	8001084 <HAL_InitTick>
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_RCC_ClockConfig+0x16c>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	2107      	movs	r1, #7
 80021a2:	438b      	bics	r3, r1
 80021a4:	432b      	orrs	r3, r5
 80021a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80021a8:	f7fe ffb0 	bl	800110c <HAL_GetTick>
 80021ac:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x16c>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2307      	movs	r3, #7
 80021b4:	4013      	ands	r3, r2
 80021b6:	42ab      	cmp	r3, r5
 80021b8:	d0d2      	beq.n	8002160 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ba:	f7fe ffa7 	bl	800110c <HAL_GetTick>
 80021be:	1b80      	subs	r0, r0, r6
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_RCC_ClockConfig+0x17c>)
 80021c2:	4298      	cmp	r0, r3
 80021c4:	d9f3      	bls.n	80021ae <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 80021c6:	2003      	movs	r0, #3
 80021c8:	e7e7      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 80021ca:	2001      	movs	r0, #1
 80021cc:	e7e5      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 80021ce:	2001      	movs	r0, #1
 80021d0:	e7e3      	b.n	800219a <HAL_RCC_ClockConfig+0x132>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	ffff84ff 	.word	0xffff84ff
 80021e0:	fffff0ff 	.word	0xfffff0ff
 80021e4:	00001388 	.word	0x00001388
 80021e8:	ffff8fff 	.word	0xffff8fff
 80021ec:	08004d3c 	.word	0x08004d3c
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000008 	.word	0x20000008

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <HAL_RCC_GetHCLKFreq+0x8>)
 80021fa:	6818      	ldr	r0, [r3, #0]
}
 80021fc:	4770      	bx	lr
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002206:	f7ff fff7 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	0b12      	lsrs	r2, r2, #12
 8002210:	2307      	movs	r3, #7
 8002212:	4013      	ands	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002218:	589a      	ldr	r2, [r3, r2]
 800221a:	231f      	movs	r3, #31
 800221c:	4013      	ands	r3, r2
 800221e:	40d8      	lsrs	r0, r3
}
 8002220:	bd10      	pop	{r4, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40021000 	.word	0x40021000
 8002228:	08004d7c 	.word	0x08004d7c

0800222c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002232:	6803      	ldr	r3, [r0, #0]
 8002234:	039b      	lsls	r3, r3, #14
 8002236:	d54e      	bpl.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	d435      	bmi.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4a40      	ldr	r2, [pc, #256]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002242:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002244:	2080      	movs	r0, #128	; 0x80
 8002246:	0540      	lsls	r0, r0, #21
 8002248:	4301      	orrs	r1, r0
 800224a:	63d1      	str	r1, [r2, #60]	; 0x3c
 800224c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800224e:	4003      	ands	r3, r0
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002254:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002258:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800225a:	22c0      	movs	r2, #192	; 0xc0
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	000b      	movs	r3, r1
 8002260:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002262:	4211      	tst	r1, r2
 8002264:	d010      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002266:	69a2      	ldr	r2, [r4, #24]
 8002268:	429a      	cmp	r2, r3
 800226a:	d00d      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800226c:	4a35      	ldr	r2, [pc, #212]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800226e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002270:	4935      	ldr	r1, [pc, #212]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002272:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002274:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	0249      	lsls	r1, r1, #9
 800227a:	4301      	orrs	r1, r0
 800227c:	65d1      	str	r1, [r2, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800227e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002280:	4832      	ldr	r0, [pc, #200]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8002282:	4001      	ands	r1, r0
 8002284:	65d1      	str	r1, [r2, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002286:	65d3      	str	r3, [r2, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002288:	07db      	lsls	r3, r3, #31
 800228a:	d411      	bmi.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800228e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002290:	492d      	ldr	r1, [pc, #180]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002292:	400b      	ands	r3, r1
 8002294:	69a1      	ldr	r1, [r4, #24]
 8002296:	430b      	orrs	r3, r1
 8002298:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800229a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229c:	2d01      	cmp	r5, #1
 800229e:	d11b      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022a2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80022a4:	492a      	ldr	r1, [pc, #168]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80022a6:	400b      	ands	r3, r1
 80022a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80022aa:	e015      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 80022ac:	2500      	movs	r5, #0
 80022ae:	e7d2      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 80022b0:	f7fe ff2c 	bl	800110c <HAL_GetTick>
 80022b4:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	079b      	lsls	r3, r3, #30
 80022bc:	d407      	bmi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe ff25 	bl	800110c <HAL_GetTick>
 80022c2:	1b80      	subs	r0, r0, r6
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d9f5      	bls.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e000      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022ce:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d1e3      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x70>
 80022d4:	e7da      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022d6:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	07db      	lsls	r3, r3, #31
 80022dc:	d506      	bpl.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022e0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022e2:	2103      	movs	r1, #3
 80022e4:	438b      	bics	r3, r1
 80022e6:	68a1      	ldr	r1, [r4, #8]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	065b      	lsls	r3, r3, #25
 80022f0:	d506      	bpl.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f2:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80022f8:	400b      	ands	r3, r1
 80022fa:	68e1      	ldr	r1, [r4, #12]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	045b      	lsls	r3, r3, #17
 8002304:	d506      	bpl.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002306:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002308:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	6961      	ldr	r1, [r4, #20]
 8002310:	430b      	orrs	r3, r1
 8002312:	6553      	str	r3, [r2, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	051b      	lsls	r3, r3, #20
 8002318:	d506      	bpl.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800231c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800231e:	490f      	ldr	r1, [pc, #60]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002320:	400b      	ands	r3, r1
 8002322:	6921      	ldr	r1, [r4, #16]
 8002324:	430b      	orrs	r3, r1
 8002326:	6553      	str	r3, [r2, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db01      	blt.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x106>

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
  }
  return status;
}
 800232e:	b002      	add	sp, #8
 8002330:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	21e0      	movs	r1, #224	; 0xe0
 8002338:	438b      	bics	r3, r1
 800233a:	6861      	ldr	r1, [r4, #4]
 800233c:	430b      	orrs	r3, r1
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e7f5      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x102>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40021000 	.word	0x40021000
 8002348:	fffffcff 	.word	0xfffffcff
 800234c:	fffeffff 	.word	0xfffeffff
 8002350:	efffffff 	.word	0xefffffff
 8002354:	00001388 	.word	0x00001388
 8002358:	ffffcfff 	.word	0xffffcfff
 800235c:	ffff3fff 	.word	0xffff3fff

08002360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	46d6      	mov	lr, sl
 8002364:	464f      	mov	r7, r9
 8002366:	4646      	mov	r6, r8
 8002368:	b5c0      	push	{r6, r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	0006      	movs	r6, r0
 800236e:	000d      	movs	r5, r1
 8002370:	4690      	mov	r8, r2
 8002372:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002374:	f7fe feca 	bl	800110c <HAL_GetTick>
 8002378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800237a:	1a18      	subs	r0, r3, r0
 800237c:	4681      	mov	r9, r0
 800237e:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 8002380:	f7fe fec4 	bl	800110c <HAL_GetTick>
 8002384:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <SPI_WaitFlagStateUntilTimeout+0xe0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	015b      	lsls	r3, r3, #5
 800238c:	0d1b      	lsrs	r3, r3, #20
 800238e:	464a      	mov	r2, r9
 8002390:	4353      	muls	r3, r2
 8002392:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002394:	6833      	ldr	r3, [r6, #0]
 8002396:	689c      	ldr	r4, [r3, #8]
 8002398:	402c      	ands	r4, r5
 800239a:	1b64      	subs	r4, r4, r5
 800239c:	4263      	negs	r3, r4
 800239e:	415c      	adcs	r4, r3
 80023a0:	4544      	cmp	r4, r8
 80023a2:	d045      	beq.n	8002430 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023a4:	1c7b      	adds	r3, r7, #1
 80023a6:	d0f5      	beq.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a8:	f7fe feb0 	bl	800110c <HAL_GetTick>
 80023ac:	4653      	mov	r3, sl
 80023ae:	1ac0      	subs	r0, r0, r3
 80023b0:	4548      	cmp	r0, r9
 80023b2:	d20b      	bcs.n	80023cc <SPI_WaitFlagStateUntilTimeout+0x6c>
 80023b4:	464b      	mov	r3, r9
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023ba:	9a01      	ldr	r2, [sp, #4]
 80023bc:	2a00      	cmp	r2, #0
 80023be:	d000      	beq.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0x62>
 80023c0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80023c2:	9b01      	ldr	r3, [sp, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	4691      	mov	r9, r2
 80023ca:	e7e3      	b.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023cc:	6832      	ldr	r2, [r6, #0]
 80023ce:	6853      	ldr	r3, [r2, #4]
 80023d0:	21e0      	movs	r1, #224	; 0xe0
 80023d2:	438b      	bics	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d6:	2382      	movs	r3, #130	; 0x82
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	6872      	ldr	r2, [r6, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d00c      	beq.n	80023fa <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d016      	beq.n	8002418 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 80023ea:	235d      	movs	r3, #93	; 0x5d
 80023ec:	2201      	movs	r2, #1
 80023ee:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 80023f0:	3b01      	subs	r3, #1
 80023f2:	2200      	movs	r2, #0
 80023f4:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80023f6:	2003      	movs	r0, #3
 80023f8:	e01b      	b.n	8002432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023fa:	68b3      	ldr	r3, [r6, #8]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0212      	lsls	r2, r2, #8
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	00d2      	lsls	r2, r2, #3
 8002408:	4293      	cmp	r3, r2
 800240a:	d1e9      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 800240c:	6832      	ldr	r2, [r6, #0]
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	438b      	bics	r3, r1
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e7e3      	b.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8002418:	6832      	ldr	r2, [r6, #0]
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	4909      	ldr	r1, [pc, #36]	; (8002444 <SPI_WaitFlagStateUntilTimeout+0xe4>)
 800241e:	400b      	ands	r3, r1
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	6832      	ldr	r2, [r6, #0]
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	430b      	orrs	r3, r1
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e7dc      	b.n	80023ea <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8002430:	2000      	movs	r0, #0
}
 8002432:	b002      	add	sp, #8
 8002434:	bce0      	pop	{r5, r6, r7}
 8002436:	46ba      	mov	sl, r7
 8002438:	46b1      	mov	r9, r6
 800243a:	46a8      	mov	r8, r5
 800243c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	20000000 	.word	0x20000000
 8002444:	ffffdfff 	.word	0xffffdfff

08002448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	46de      	mov	lr, fp
 800244c:	4657      	mov	r7, sl
 800244e:	464e      	mov	r6, r9
 8002450:	4645      	mov	r5, r8
 8002452:	b5e0      	push	{r5, r6, r7, lr}
 8002454:	b083      	sub	sp, #12
 8002456:	0007      	movs	r7, r0
 8002458:	000d      	movs	r5, r1
 800245a:	0016      	movs	r6, r2
 800245c:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800245e:	466b      	mov	r3, sp
 8002460:	2200      	movs	r2, #0
 8002462:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002464:	f7fe fe52 	bl	800110c <HAL_GetTick>
 8002468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800246a:	1a18      	subs	r0, r3, r0
 800246c:	4440      	add	r0, r8
 800246e:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 8002470:	f7fe fe4c 	bl	800110c <HAL_GetTick>
 8002474:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <SPI_WaitFifoStateUntilTimeout+0x10c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	0093      	lsls	r3, r2, #2
 8002480:	189a      	adds	r2, r3, r2
 8002482:	00d3      	lsls	r3, r2, #3
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	0d1b      	lsrs	r3, r3, #20
 8002488:	464a      	mov	r2, r9
 800248a:	4353      	muls	r3, r2
 800248c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800248e:	e002      	b.n	8002496 <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002490:	4643      	mov	r3, r8
 8002492:	3301      	adds	r3, #1
 8002494:	d111      	bne.n	80024ba <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689c      	ldr	r4, [r3, #8]
 800249a:	402c      	ands	r4, r5
 800249c:	42b4      	cmp	r4, r6
 800249e:	d050      	beq.n	8002542 <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	429d      	cmp	r5, r3
 80024a6:	d1f3      	bne.n	8002490 <SPI_WaitFifoStateUntilTimeout+0x48>
 80024a8:	2e00      	cmp	r6, #0
 80024aa:	d1f1      	bne.n	8002490 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 80024ac:	465b      	mov	r3, fp
 80024ae:	7b1b      	ldrb	r3, [r3, #12]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	466a      	mov	r2, sp
 80024b4:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 80024b6:	78d3      	ldrb	r3, [r2, #3]
 80024b8:	e7ea      	b.n	8002490 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024ba:	f7fe fe27 	bl	800110c <HAL_GetTick>
 80024be:	4653      	mov	r3, sl
 80024c0:	1ac0      	subs	r0, r0, r3
 80024c2:	4548      	cmp	r0, r9
 80024c4:	d20b      	bcs.n	80024de <SPI_WaitFifoStateUntilTimeout+0x96>
 80024c6:	464b      	mov	r3, r9
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024cc:	9a01      	ldr	r2, [sp, #4]
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d000      	beq.n	80024d4 <SPI_WaitFifoStateUntilTimeout+0x8c>
 80024d2:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80024d4:	9b01      	ldr	r3, [sp, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	4691      	mov	r9, r2
 80024dc:	e7db      	b.n	8002496 <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6853      	ldr	r3, [r2, #4]
 80024e2:	21e0      	movs	r1, #224	; 0xe0
 80024e4:	438b      	bics	r3, r1
 80024e6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e8:	2382      	movs	r3, #130	; 0x82
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d00c      	beq.n	800250c <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d016      	beq.n	800252a <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 80024fc:	235d      	movs	r3, #93	; 0x5d
 80024fe:	2201      	movs	r2, #1
 8002500:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8002502:	3b01      	subs	r3, #1
 8002504:	2200      	movs	r2, #0
 8002506:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002508:	2003      	movs	r0, #3
 800250a:	e01b      	b.n	8002544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	0212      	lsls	r2, r2, #8
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	00d2      	lsls	r2, r2, #3
 800251a:	4293      	cmp	r3, r2
 800251c:	d1e9      	bne.n	80024f2 <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	2140      	movs	r1, #64	; 0x40
 8002524:	438b      	bics	r3, r1
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e7e3      	b.n	80024f2 <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	490a      	ldr	r1, [pc, #40]	; (8002558 <SPI_WaitFifoStateUntilTimeout+0x110>)
 8002530:	400b      	ands	r3, r1
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	6811      	ldr	r1, [r2, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	019b      	lsls	r3, r3, #6
 800253c:	430b      	orrs	r3, r1
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e7dc      	b.n	80024fc <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 8002542:	2000      	movs	r0, #0
}
 8002544:	b003      	add	sp, #12
 8002546:	bcf0      	pop	{r4, r5, r6, r7}
 8002548:	46bb      	mov	fp, r7
 800254a:	46b2      	mov	sl, r6
 800254c:	46a9      	mov	r9, r5
 800254e:	46a0      	mov	r8, r4
 8002550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	20000000 	.word	0x20000000
 8002558:	ffffdfff 	.word	0xffffdfff

0800255c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	0004      	movs	r4, r0
 8002562:	000d      	movs	r5, r1
 8002564:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002566:	21c0      	movs	r1, #192	; 0xc0
 8002568:	9200      	str	r2, [sp, #0]
 800256a:	002b      	movs	r3, r5
 800256c:	2200      	movs	r2, #0
 800256e:	0149      	lsls	r1, r1, #5
 8002570:	f7ff ff6a 	bl	8002448 <SPI_WaitFifoStateUntilTimeout>
 8002574:	2800      	cmp	r0, #0
 8002576:	d118      	bne.n	80025aa <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002578:	9600      	str	r6, [sp, #0]
 800257a:	002b      	movs	r3, r5
 800257c:	2200      	movs	r2, #0
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	0020      	movs	r0, r4
 8002582:	f7ff feed 	bl	8002360 <SPI_WaitFlagStateUntilTimeout>
 8002586:	2800      	cmp	r0, #0
 8002588:	d116      	bne.n	80025b8 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800258a:	21c0      	movs	r1, #192	; 0xc0
 800258c:	9600      	str	r6, [sp, #0]
 800258e:	002b      	movs	r3, r5
 8002590:	2200      	movs	r2, #0
 8002592:	00c9      	lsls	r1, r1, #3
 8002594:	0020      	movs	r0, r4
 8002596:	f7ff ff57 	bl	8002448 <SPI_WaitFifoStateUntilTimeout>
 800259a:	2800      	cmp	r0, #0
 800259c:	d00a      	beq.n	80025b4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025a0:	2220      	movs	r2, #32
 80025a2:	4313      	orrs	r3, r2
 80025a4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80025a6:	2003      	movs	r0, #3
 80025a8:	e004      	b.n	80025b4 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025ac:	2220      	movs	r2, #32
 80025ae:	4313      	orrs	r3, r2
 80025b0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80025b2:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80025b4:	b002      	add	sp, #8
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025ba:	2220      	movs	r2, #32
 80025bc:	4313      	orrs	r3, r2
 80025be:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80025c0:	2003      	movs	r0, #3
 80025c2:	e7f7      	b.n	80025b4 <SPI_EndRxTxTransaction+0x58>

080025c4 <HAL_SPI_Init>:
{
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80025c8:	d100      	bne.n	80025cc <HAL_SPI_Init+0x8>
 80025ca:	e078      	b.n	80026be <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025d2:	3305      	adds	r3, #5
 80025d4:	33ff      	adds	r3, #255	; 0xff
 80025d6:	6842      	ldr	r2, [r0, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d005      	beq.n	80025e8 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025dc:	2300      	movs	r3, #0
 80025de:	61c3      	str	r3, [r0, #28]
 80025e0:	e002      	b.n	80025e8 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ec:	335d      	adds	r3, #93	; 0x5d
 80025ee:	5ce3      	ldrb	r3, [r4, r3]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05a      	beq.n	80026aa <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80025f4:	235d      	movs	r3, #93	; 0x5d
 80025f6:	2202      	movs	r2, #2
 80025f8:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	438b      	bics	r3, r1
 8002602:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002604:	68e3      	ldr	r3, [r4, #12]
 8002606:	22e0      	movs	r2, #224	; 0xe0
 8002608:	00d2      	lsls	r2, r2, #3
 800260a:	4293      	cmp	r3, r2
 800260c:	d954      	bls.n	80026b8 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800260e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002610:	21f0      	movs	r1, #240	; 0xf0
 8002612:	0109      	lsls	r1, r1, #4
 8002614:	428b      	cmp	r3, r1
 8002616:	d005      	beq.n	8002624 <HAL_SPI_Init+0x60>
 8002618:	21e0      	movs	r1, #224	; 0xe0
 800261a:	00c9      	lsls	r1, r1, #3
 800261c:	428b      	cmp	r3, r1
 800261e:	d001      	beq.n	8002624 <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002624:	2382      	movs	r3, #130	; 0x82
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	6861      	ldr	r1, [r4, #4]
 800262a:	400b      	ands	r3, r1
 800262c:	2184      	movs	r1, #132	; 0x84
 800262e:	0209      	lsls	r1, r1, #8
 8002630:	68a0      	ldr	r0, [r4, #8]
 8002632:	4001      	ands	r1, r0
 8002634:	430b      	orrs	r3, r1
 8002636:	2102      	movs	r1, #2
 8002638:	6920      	ldr	r0, [r4, #16]
 800263a:	4001      	ands	r1, r0
 800263c:	430b      	orrs	r3, r1
 800263e:	2101      	movs	r1, #1
 8002640:	6960      	ldr	r0, [r4, #20]
 8002642:	4008      	ands	r0, r1
 8002644:	4303      	orrs	r3, r0
 8002646:	2080      	movs	r0, #128	; 0x80
 8002648:	0080      	lsls	r0, r0, #2
 800264a:	69a5      	ldr	r5, [r4, #24]
 800264c:	4028      	ands	r0, r5
 800264e:	4303      	orrs	r3, r0
 8002650:	2038      	movs	r0, #56	; 0x38
 8002652:	69e5      	ldr	r5, [r4, #28]
 8002654:	4028      	ands	r0, r5
 8002656:	4303      	orrs	r3, r0
 8002658:	2080      	movs	r0, #128	; 0x80
 800265a:	6a25      	ldr	r5, [r4, #32]
 800265c:	4028      	ands	r0, r5
 800265e:	4303      	orrs	r3, r0
 8002660:	2080      	movs	r0, #128	; 0x80
 8002662:	0180      	lsls	r0, r0, #6
 8002664:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002666:	4028      	ands	r0, r5
 8002668:	4303      	orrs	r3, r0
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800266e:	8b60      	ldrh	r0, [r4, #26]
 8002670:	2304      	movs	r3, #4
 8002672:	4003      	ands	r3, r0
 8002674:	2010      	movs	r0, #16
 8002676:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002678:	4028      	ands	r0, r5
 800267a:	4303      	orrs	r3, r0
 800267c:	2008      	movs	r0, #8
 800267e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002680:	4028      	ands	r0, r5
 8002682:	4303      	orrs	r3, r0
 8002684:	20f0      	movs	r0, #240	; 0xf0
 8002686:	0100      	lsls	r0, r0, #4
 8002688:	68e5      	ldr	r5, [r4, #12]
 800268a:	4028      	ands	r0, r5
 800268c:	4303      	orrs	r3, r0
 800268e:	6820      	ldr	r0, [r4, #0]
 8002690:	4313      	orrs	r3, r2
 8002692:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	69d3      	ldr	r3, [r2, #28]
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <HAL_SPI_Init+0x100>)
 800269a:	4003      	ands	r3, r0
 800269c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800269e:	2300      	movs	r3, #0
 80026a0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026a2:	335d      	adds	r3, #93	; 0x5d
 80026a4:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 80026a6:	2000      	movs	r0, #0
}
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80026aa:	335c      	adds	r3, #92	; 0x5c
 80026ac:	2200      	movs	r2, #0
 80026ae:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80026b0:	0020      	movs	r0, r4
 80026b2:	f7fe fbc5 	bl	8000e40 <HAL_SPI_MspInit>
 80026b6:	e79d      	b.n	80025f4 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	0152      	lsls	r2, r2, #5
 80026bc:	e7a8      	b.n	8002610 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80026be:	2001      	movs	r0, #1
 80026c0:	e7f2      	b.n	80026a8 <HAL_SPI_Init+0xe4>
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	fffff7ff 	.word	0xfffff7ff

080026c8 <HAL_SPI_Transmit>:
{
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ca:	46ce      	mov	lr, r9
 80026cc:	b500      	push	{lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	0004      	movs	r4, r0
 80026d2:	9101      	str	r1, [sp, #4]
 80026d4:	4691      	mov	r9, r2
 80026d6:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80026d8:	235c      	movs	r3, #92	; 0x5c
 80026da:	5cc3      	ldrb	r3, [r0, r3]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d100      	bne.n	80026e2 <HAL_SPI_Transmit+0x1a>
 80026e0:	e0ea      	b.n	80028b8 <HAL_SPI_Transmit+0x1f0>
 80026e2:	235c      	movs	r3, #92	; 0x5c
 80026e4:	2201      	movs	r2, #1
 80026e6:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80026e8:	f7fe fd10 	bl	800110c <HAL_GetTick>
 80026ec:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80026ee:	235d      	movs	r3, #93	; 0x5d
 80026f0:	5ce3      	ldrb	r3, [r4, r3]
 80026f2:	b2df      	uxtb	r7, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d000      	beq.n	80026fa <HAL_SPI_Transmit+0x32>
 80026f8:	e0ca      	b.n	8002890 <HAL_SPI_Transmit+0x1c8>
  if ((pData == NULL) || (Size == 0U))
 80026fa:	9901      	ldr	r1, [sp, #4]
 80026fc:	2900      	cmp	r1, #0
 80026fe:	d100      	bne.n	8002702 <HAL_SPI_Transmit+0x3a>
 8002700:	e0c7      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
 8002702:	464b      	mov	r3, r9
 8002704:	2b00      	cmp	r3, #0
 8002706:	d100      	bne.n	800270a <HAL_SPI_Transmit+0x42>
 8002708:	e0c3      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800270a:	235d      	movs	r3, #93	; 0x5d
 800270c:	2203      	movs	r2, #3
 800270e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002714:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002716:	464a      	mov	r2, r9
 8002718:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800271a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800271c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800271e:	2244      	movs	r2, #68	; 0x44
 8002720:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8002722:	3202      	adds	r2, #2
 8002724:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8002726:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002728:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	68a2      	ldr	r2, [r4, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d01e      	beq.n	8002772 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	0652      	lsls	r2, r2, #25
 800273a:	d403      	bmi.n	8002744 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2140      	movs	r1, #64	; 0x40
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002744:	23e0      	movs	r3, #224	; 0xe0
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	68e2      	ldr	r2, [r4, #12]
 800274a:	429a      	cmp	r2, r3
 800274c:	d93b      	bls.n	80027c6 <HAL_SPI_Transmit+0xfe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_SPI_Transmit+0x92>
 8002754:	464b      	mov	r3, r9
 8002756:	2b01      	cmp	r3, #1
 8002758:	d122      	bne.n	80027a0 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800275e:	8812      	ldrh	r2, [r2, #0]
 8002760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002764:	3302      	adds	r3, #2
 8002766:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002768:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800276a:	3b01      	subs	r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002770:	e016      	b.n	80027a0 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	2140      	movs	r1, #64	; 0x40
 8002778:	438b      	bics	r3, r1
 800277a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	6811      	ldr	r1, [r2, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	01db      	lsls	r3, r3, #7
 8002784:	430b      	orrs	r3, r1
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e7d4      	b.n	8002734 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800278a:	f7fe fcbf 	bl	800110c <HAL_GetTick>
 800278e:	1b80      	subs	r0, r0, r6
 8002790:	42a8      	cmp	r0, r5
 8002792:	d302      	bcc.n	800279a <HAL_SPI_Transmit+0xd2>
 8002794:	1c6b      	adds	r3, r5, #1
 8002796:	d000      	beq.n	800279a <HAL_SPI_Transmit+0xd2>
 8002798:	e086      	b.n	80028a8 <HAL_SPI_Transmit+0x1e0>
 800279a:	2d00      	cmp	r5, #0
 800279c:	d100      	bne.n	80027a0 <HAL_SPI_Transmit+0xd8>
 800279e:	e085      	b.n	80028ac <HAL_SPI_Transmit+0x1e4>
    while (hspi->TxXferCount > 0U)
 80027a0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80027a2:	b289      	uxth	r1, r1
 80027a4:	2900      	cmp	r1, #0
 80027a6:	d05b      	beq.n	8002860 <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	0792      	lsls	r2, r2, #30
 80027ae:	d5ec      	bpl.n	800278a <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027b2:	8812      	ldrh	r2, [r2, #0]
 80027b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027b8:	3302      	adds	r3, #2
 80027ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80027bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80027c4:	e7ec      	b.n	80027a0 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c6:	6863      	ldr	r3, [r4, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_Transmit+0x10a>
 80027cc:	464b      	mov	r3, r9
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d12f      	bne.n	8002832 <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 80027d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d90b      	bls.n	80027f2 <HAL_SPI_Transmit+0x12a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027e4:	3302      	adds	r3, #2
 80027e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80027e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027ea:	3b02      	subs	r3, #2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80027f0:	e01f      	b.n	8002832 <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr ++;
 80027fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027fc:	3301      	adds	r3, #1
 80027fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002800:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002802:	3b01      	subs	r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002808:	e013      	b.n	8002832 <HAL_SPI_Transmit+0x16a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800280a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002812:	3301      	adds	r3, #1
 8002814:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002816:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002818:	3b01      	subs	r3, #1
 800281a:	b29b      	uxth	r3, r3
 800281c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800281e:	e008      	b.n	8002832 <HAL_SPI_Transmit+0x16a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002820:	f7fe fc74 	bl	800110c <HAL_GetTick>
 8002824:	1b80      	subs	r0, r0, r6
 8002826:	42a8      	cmp	r0, r5
 8002828:	d301      	bcc.n	800282e <HAL_SPI_Transmit+0x166>
 800282a:	1c6b      	adds	r3, r5, #1
 800282c:	d140      	bne.n	80028b0 <HAL_SPI_Transmit+0x1e8>
 800282e:	2d00      	cmp	r5, #0
 8002830:	d040      	beq.n	80028b4 <HAL_SPI_Transmit+0x1ec>
    while (hspi->TxXferCount > 0U)
 8002832:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002834:	b289      	uxth	r1, r1
 8002836:	2900      	cmp	r1, #0
 8002838:	d012      	beq.n	8002860 <HAL_SPI_Transmit+0x198>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	6893      	ldr	r3, [r2, #8]
 800283e:	079b      	lsls	r3, r3, #30
 8002840:	d5ee      	bpl.n	8002820 <HAL_SPI_Transmit+0x158>
        if (hspi->TxXferCount > 1U)
 8002842:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d9df      	bls.n	800280a <HAL_SPI_Transmit+0x142>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002852:	3302      	adds	r3, #2
 8002854:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002856:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002858:	3b02      	subs	r3, #2
 800285a:	b29b      	uxth	r3, r3
 800285c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800285e:	e7e8      	b.n	8002832 <HAL_SPI_Transmit+0x16a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002860:	0032      	movs	r2, r6
 8002862:	0029      	movs	r1, r5
 8002864:	0020      	movs	r0, r4
 8002866:	f7ff fe79 	bl	800255c <SPI_EndRxTxTransaction>
 800286a:	2800      	cmp	r0, #0
 800286c:	d001      	beq.n	8002872 <HAL_SPI_Transmit+0x1aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286e:	2320      	movs	r3, #32
 8002870:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002872:	68a3      	ldr	r3, [r4, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <HAL_SPI_Transmit+0x1be>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	9203      	str	r2, [sp, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	9303      	str	r3, [sp, #12]
 8002884:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002886:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_SPI_Transmit+0x1ca>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800288c:	2700      	movs	r7, #0
 800288e:	e000      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
    errorcode = HAL_BUSY;
 8002890:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002892:	235d      	movs	r3, #93	; 0x5d
 8002894:	2201      	movs	r2, #1
 8002896:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002898:	3b01      	subs	r3, #1
 800289a:	2200      	movs	r2, #0
 800289c:	54e2      	strb	r2, [r4, r3]
}
 800289e:	0038      	movs	r0, r7
 80028a0:	b004      	add	sp, #16
 80028a2:	bc80      	pop	{r7}
 80028a4:	46b9      	mov	r9, r7
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          errorcode = HAL_TIMEOUT;
 80028a8:	2703      	movs	r7, #3
 80028aa:	e7f2      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
 80028ac:	2703      	movs	r7, #3
 80028ae:	e7f0      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
          errorcode = HAL_TIMEOUT;
 80028b0:	2703      	movs	r7, #3
 80028b2:	e7ee      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
 80028b4:	2703      	movs	r7, #3
 80028b6:	e7ec      	b.n	8002892 <HAL_SPI_Transmit+0x1ca>
  __HAL_LOCK(hspi);
 80028b8:	2702      	movs	r7, #2
 80028ba:	e7f0      	b.n	800289e <HAL_SPI_Transmit+0x1d6>

080028bc <HAL_SPI_TransmitReceive>:
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b083      	sub	sp, #12
 80028c0:	0004      	movs	r4, r0
 80028c2:	9100      	str	r1, [sp, #0]
 80028c4:	9201      	str	r2, [sp, #4]
 80028c6:	001e      	movs	r6, r3
 80028c8:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80028ca:	235c      	movs	r3, #92	; 0x5c
 80028cc:	5cc3      	ldrb	r3, [r0, r3]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d100      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x18>
 80028d2:	e157      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x2c8>
 80028d4:	235c      	movs	r3, #92	; 0x5c
 80028d6:	2201      	movs	r2, #1
 80028d8:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80028da:	f7fe fc17 	bl	800110c <HAL_GetTick>
 80028de:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 80028e0:	235d      	movs	r3, #93	; 0x5d
 80028e2:	5ce3      	ldrb	r3, [r4, r3]
 80028e4:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 80028e6:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d00b      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x48>
 80028ec:	2382      	movs	r3, #130	; 0x82
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d000      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x3a>
 80028f4:	e12d      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x296>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028f6:	68a3      	ldr	r3, [r4, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d000      	beq.n	80028fe <HAL_SPI_TransmitReceive+0x42>
 80028fc:	e132      	b.n	8002b64 <HAL_SPI_TransmitReceive+0x2a8>
 80028fe:	2904      	cmp	r1, #4
 8002900:	d000      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x48>
 8002902:	e131      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x2ac>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002904:	9b00      	ldr	r3, [sp, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d100      	bne.n	800290c <HAL_SPI_TransmitReceive+0x50>
 800290a:	e12f      	b.n	8002b6c <HAL_SPI_TransmitReceive+0x2b0>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d100      	bne.n	8002914 <HAL_SPI_TransmitReceive+0x58>
 8002912:	e12d      	b.n	8002b70 <HAL_SPI_TransmitReceive+0x2b4>
 8002914:	2e00      	cmp	r6, #0
 8002916:	d100      	bne.n	800291a <HAL_SPI_TransmitReceive+0x5e>
 8002918:	e12c      	b.n	8002b74 <HAL_SPI_TransmitReceive+0x2b8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800291a:	235d      	movs	r3, #93	; 0x5d
 800291c:	5ce3      	ldrb	r3, [r4, r3]
 800291e:	2b04      	cmp	r3, #4
 8002920:	d002      	beq.n	8002928 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002922:	235d      	movs	r3, #93	; 0x5d
 8002924:	2205      	movs	r2, #5
 8002926:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002928:	2300      	movs	r3, #0
 800292a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800292c:	9a01      	ldr	r2, [sp, #4]
 800292e:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002930:	2246      	movs	r2, #70	; 0x46
 8002932:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferSize  = Size;
 8002934:	3a02      	subs	r2, #2
 8002936:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002938:	9a00      	ldr	r2, [sp, #0]
 800293a:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800293c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800293e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002940:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002942:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002944:	23e0      	movs	r3, #224	; 0xe0
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	68e2      	ldr	r2, [r4, #12]
 800294a:	429a      	cmp	r2, r3
 800294c:	d801      	bhi.n	8002952 <HAL_SPI_TransmitReceive+0x96>
 800294e:	2e01      	cmp	r6, #1
 8002950:	d923      	bls.n	800299a <HAL_SPI_TransmitReceive+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	6853      	ldr	r3, [r2, #4]
 8002956:	498c      	ldr	r1, [pc, #560]	; (8002b88 <HAL_SPI_TransmitReceive+0x2cc>)
 8002958:	400b      	ands	r3, r1
 800295a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	0652      	lsls	r2, r2, #25
 8002962:	d403      	bmi.n	800296c <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2140      	movs	r1, #64	; 0x40
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800296c:	23e0      	movs	r3, #224	; 0xe0
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	68e2      	ldr	r2, [r4, #12]
 8002972:	429a      	cmp	r2, r3
 8002974:	d955      	bls.n	8002a22 <HAL_SPI_TransmitReceive+0x166>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002976:	6863      	ldr	r3, [r4, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_SPI_TransmitReceive+0xc4>
 800297c:	2e01      	cmp	r6, #1
 800297e:	d10a      	bne.n	8002996 <HAL_SPI_TransmitReceive+0xda>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002984:	8812      	ldrh	r2, [r2, #0]
 8002986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002988:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800298a:	3302      	adds	r3, #2
 800298c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800298e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002990:	3b01      	subs	r3, #1
 8002992:	b29b      	uxth	r3, r3
 8002994:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002996:	2601      	movs	r6, #1
 8002998:	e02e      	b.n	80029f8 <HAL_SPI_TransmitReceive+0x13c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	6851      	ldr	r1, [r2, #4]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	430b      	orrs	r3, r1
 80029a4:	6053      	str	r3, [r2, #4]
 80029a6:	e7d9      	b.n	800295c <HAL_SPI_TransmitReceive+0xa0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029aa:	8812      	ldrh	r2, [r2, #0]
 80029ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029b0:	3302      	adds	r3, #2
 80029b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80029b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80029bc:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	07d2      	lsls	r2, r2, #31
 80029c4:	d510      	bpl.n	80029e8 <HAL_SPI_TransmitReceive+0x12c>
 80029c6:	2246      	movs	r2, #70	; 0x46
 80029c8:	5aa2      	ldrh	r2, [r4, r2]
 80029ca:	b292      	uxth	r2, r2
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029d4:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d8:	3302      	adds	r3, #2
 80029da:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80029dc:	2246      	movs	r2, #70	; 0x46
 80029de:	5aa3      	ldrh	r3, [r4, r2]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80029e6:	2601      	movs	r6, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029e8:	f7fe fb90 	bl	800110c <HAL_GetTick>
 80029ec:	1bc0      	subs	r0, r0, r7
 80029ee:	42a8      	cmp	r0, r5
 80029f0:	d302      	bcc.n	80029f8 <HAL_SPI_TransmitReceive+0x13c>
 80029f2:	1c6b      	adds	r3, r5, #1
 80029f4:	d000      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x13c>
 80029f6:	e0bf      	b.n	8002b78 <HAL_SPI_TransmitReceive+0x2bc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x150>
 8002a00:	3346      	adds	r3, #70	; 0x46
 8002a02:	5ae3      	ldrh	r3, [r4, r3]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d100      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x150>
 8002a0a:	e097      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x280>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	0792      	lsls	r2, r2, #30
 8002a12:	d5d4      	bpl.n	80029be <HAL_SPI_TransmitReceive+0x102>
 8002a14:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a16:	b292      	uxth	r2, r2
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d0d0      	beq.n	80029be <HAL_SPI_TransmitReceive+0x102>
 8002a1c:	2e01      	cmp	r6, #1
 8002a1e:	d1ce      	bne.n	80029be <HAL_SPI_TransmitReceive+0x102>
 8002a20:	e7c2      	b.n	80029a8 <HAL_SPI_TransmitReceive+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a22:	6863      	ldr	r3, [r4, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_SPI_TransmitReceive+0x170>
 8002a28:	2e01      	cmp	r6, #1
 8002a2a:	d10e      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x18e>
      if (hspi->TxXferCount > 1U)
 8002a2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d90c      	bls.n	8002a4e <HAL_SPI_TransmitReceive+0x192>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a3e:	3302      	adds	r3, #2
 8002a40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a44:	3b02      	subs	r3, #2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002a4a:	2601      	movs	r6, #1
 8002a4c:	e044      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x21c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a58:	3301      	adds	r3, #1
 8002a5a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002a5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002a64:	e7f1      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x18e>
        if (hspi->TxXferCount > 1U)
 8002a66:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	d90b      	bls.n	8002a86 <HAL_SPI_TransmitReceive+0x1ca>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a70:	8812      	ldrh	r2, [r2, #0]
 8002a72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a76:	3302      	adds	r3, #2
 8002a78:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a7c:	3b02      	subs	r3, #2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002a82:	2600      	movs	r6, #0
 8002a84:	e03b      	b.n	8002afe <HAL_SPI_TransmitReceive+0x242>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8002a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a8e:	3301      	adds	r3, #1
 8002a90:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002a92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	e02f      	b.n	8002afe <HAL_SPI_TransmitReceive+0x242>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a9e:	6822      	ldr	r2, [r4, #0]
 8002aa0:	6851      	ldr	r1, [r2, #4]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	015b      	lsls	r3, r3, #5
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002aaa:	2601      	movs	r6, #1
 8002aac:	e00b      	b.n	8002ac6 <HAL_SPI_TransmitReceive+0x20a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002aae:	7b1b      	ldrb	r3, [r3, #12]
 8002ab0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ab2:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002aba:	2246      	movs	r2, #70	; 0x46
 8002abc:	5aa3      	ldrh	r3, [r4, r2]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8002ac4:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ac6:	f7fe fb21 	bl	800110c <HAL_GetTick>
 8002aca:	1bc0      	subs	r0, r0, r7
 8002acc:	42a8      	cmp	r0, r5
 8002ace:	d301      	bcc.n	8002ad4 <HAL_SPI_TransmitReceive+0x218>
 8002ad0:	1c6b      	adds	r3, r5, #1
 8002ad2:	d153      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x2c0>
 8002ad4:	2d00      	cmp	r5, #0
 8002ad6:	d053      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x2c4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x22e>
 8002ae0:	3346      	adds	r3, #70	; 0x46
 8002ae2:	5ae3      	ldrh	r3, [r4, r3]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d028      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x280>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	0792      	lsls	r2, r2, #30
 8002af0:	d505      	bpl.n	8002afe <HAL_SPI_TransmitReceive+0x242>
 8002af2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002af4:	b292      	uxth	r2, r2
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d001      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x242>
 8002afa:	2e01      	cmp	r6, #1
 8002afc:	d0b3      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x1aa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	07d2      	lsls	r2, r2, #31
 8002b04:	d5df      	bpl.n	8002ac6 <HAL_SPI_TransmitReceive+0x20a>
 8002b06:	2246      	movs	r2, #70	; 0x46
 8002b08:	5aa2      	ldrh	r2, [r4, r2]
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	d0da      	beq.n	8002ac6 <HAL_SPI_TransmitReceive+0x20a>
        if (hspi->RxXferCount > 1U)
 8002b10:	2246      	movs	r2, #70	; 0x46
 8002b12:	5aa2      	ldrh	r2, [r4, r2]
 8002b14:	b292      	uxth	r2, r2
 8002b16:	2a01      	cmp	r2, #1
 8002b18:	d9c9      	bls.n	8002aae <HAL_SPI_TransmitReceive+0x1f2>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b1e:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b22:	3302      	adds	r3, #2
 8002b24:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b26:	2246      	movs	r2, #70	; 0x46
 8002b28:	5aa3      	ldrh	r3, [r4, r2]
 8002b2a:	3b02      	subs	r3, #2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 8002b30:	5aa3      	ldrh	r3, [r4, r2]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d9b2      	bls.n	8002a9e <HAL_SPI_TransmitReceive+0x1e2>
        txallowed = 1U;
 8002b38:	2601      	movs	r6, #1
 8002b3a:	e7c4      	b.n	8002ac6 <HAL_SPI_TransmitReceive+0x20a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b3c:	003a      	movs	r2, r7
 8002b3e:	0029      	movs	r1, r5
 8002b40:	0020      	movs	r0, r4
 8002b42:	f7ff fd0b 	bl	800255c <SPI_EndRxTxTransaction>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002b4e:	2001      	movs	r0, #1
 8002b50:	e000      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_BUSY;
 8002b52:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b54:	235d      	movs	r3, #93	; 0x5d
 8002b56:	2201      	movs	r2, #1
 8002b58:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	54e2      	strb	r2, [r4, r3]
}
 8002b60:	b003      	add	sp, #12
 8002b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 8002b64:	2002      	movs	r0, #2
 8002b66:	e7f5      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
 8002b68:	2002      	movs	r0, #2
 8002b6a:	e7f3      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	e7f1      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
 8002b70:	2001      	movs	r0, #1
 8002b72:	e7ef      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
 8002b74:	2001      	movs	r0, #1
 8002b76:	e7ed      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
        errorcode = HAL_TIMEOUT;
 8002b78:	2003      	movs	r0, #3
 8002b7a:	e7eb      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
        errorcode = HAL_TIMEOUT;
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	e7e9      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
 8002b80:	2003      	movs	r0, #3
 8002b82:	e7e7      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x298>
  __HAL_LOCK(hspi);
 8002b84:	2002      	movs	r0, #2
 8002b86:	e7eb      	b.n	8002b60 <HAL_SPI_TransmitReceive+0x2a4>
 8002b88:	ffffefff 	.word	0xffffefff

08002b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b8c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b92:	2201      	movs	r2, #1
 8002b94:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b98:	6801      	ldr	r1, [r0, #0]
 8002b9a:	680b      	ldr	r3, [r1, #0]
 8002b9c:	4d12      	ldr	r5, [pc, #72]	; (8002be8 <UART_EndRxTransfer+0x5c>)
 8002b9e:	402b      	ands	r3, r5
 8002ba0:	600b      	str	r3, [r1, #0]
 8002ba2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bae:	6802      	ldr	r2, [r0, #0]
 8002bb0:	6893      	ldr	r3, [r2, #8]
 8002bb2:	4c0e      	ldr	r4, [pc, #56]	; (8002bec <UART_EndRxTransfer+0x60>)
 8002bb4:	4023      	ands	r3, r4
 8002bb6:	6093      	str	r3, [r2, #8]
 8002bb8:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d006      	beq.n	8002bd0 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	2388      	movs	r3, #136	; 0x88
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bcc:	6703      	str	r3, [r0, #112]	; 0x70
}
 8002bce:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd8:	6802      	ldr	r2, [r0, #0]
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	2410      	movs	r4, #16
 8002bde:	43a3      	bics	r3, r4
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	f381 8810 	msr	PRIMASK, r1
}
 8002be6:	e7ec      	b.n	8002bc2 <UART_EndRxTransfer+0x36>
 8002be8:	fffffedf 	.word	0xfffffedf
 8002bec:	effffffe 	.word	0xeffffffe

08002bf0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002bf0:	b510      	push	{r4, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bf2:	2384      	movs	r3, #132	; 0x84
 8002bf4:	58c3      	ldr	r3, [r0, r3]
 8002bf6:	2b21      	cmp	r3, #33	; 0x21
 8002bf8:	d000      	beq.n	8002bfc <UART_TxISR_8BIT+0xc>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002bfa:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002bfc:	3335      	adds	r3, #53	; 0x35
 8002bfe:	5ac3      	ldrh	r3, [r0, r3]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d117      	bne.n	8002c36 <UART_TxISR_8BIT+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c06:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002c10:	6801      	ldr	r1, [r0, #0]
 8002c12:	680b      	ldr	r3, [r1, #0]
 8002c14:	2480      	movs	r4, #128	; 0x80
 8002c16:	43a3      	bics	r3, r4
 8002c18:	600b      	str	r3, [r1, #0]
 8002c1a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	2040      	movs	r0, #64	; 0x40
 8002c2c:	4303      	orrs	r3, r0
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	f381 8810 	msr	PRIMASK, r1
}
 8002c34:	e7e1      	b.n	8002bfa <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002c36:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002c3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c40:	3301      	adds	r3, #1
 8002c42:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8002c44:	2256      	movs	r2, #86	; 0x56
 8002c46:	5a83      	ldrh	r3, [r0, r2]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	5283      	strh	r3, [r0, r2]
}
 8002c4e:	e7d4      	b.n	8002bfa <UART_TxISR_8BIT+0xa>

08002c50 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c50:	b510      	push	{r4, lr}
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c52:	2384      	movs	r3, #132	; 0x84
 8002c54:	58c3      	ldr	r3, [r0, r3]
 8002c56:	2b21      	cmp	r3, #33	; 0x21
 8002c58:	d000      	beq.n	8002c5c <UART_TxISR_16BIT+0xc>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002c5a:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002c5c:	3335      	adds	r3, #53	; 0x35
 8002c5e:	5ac3      	ldrh	r3, [r0, r3]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d117      	bne.n	8002c96 <UART_TxISR_16BIT+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002c70:	6801      	ldr	r1, [r0, #0]
 8002c72:	680b      	ldr	r3, [r1, #0]
 8002c74:	2480      	movs	r4, #128	; 0x80
 8002c76:	43a3      	bics	r3, r4
 8002c78:	600b      	str	r3, [r1, #0]
 8002c7a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c7e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c86:	6802      	ldr	r2, [r0, #0]
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	2040      	movs	r0, #64	; 0x40
 8002c8c:	4303      	orrs	r3, r0
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	f381 8810 	msr	PRIMASK, r1
}
 8002c94:	e7e1      	b.n	8002c5a <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002c96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	6802      	ldr	r2, [r0, #0]
 8002c9c:	05db      	lsls	r3, r3, #23
 8002c9e:	0ddb      	lsrs	r3, r3, #23
 8002ca0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002ca2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8002ca8:	2256      	movs	r2, #86	; 0x56
 8002caa:	5a83      	ldrh	r3, [r0, r2]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	5283      	strh	r3, [r0, r2]
}
 8002cb2:	e7d2      	b.n	8002c5a <UART_TxISR_16BIT+0xa>

08002cb4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002cb4:	b510      	push	{r4, lr}
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cb6:	2384      	movs	r3, #132	; 0x84
 8002cb8:	58c3      	ldr	r3, [r0, r3]
 8002cba:	2b21      	cmp	r3, #33	; 0x21
 8002cbc:	d000      	beq.n	8002cc0 <UART_TxISR_8BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 8002cbe:	bd10      	pop	{r4, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002cc0:	3349      	adds	r3, #73	; 0x49
 8002cc2:	5ac3      	ldrh	r3, [r0, r3]
 8002cc4:	e019      	b.n	8002cfa <UART_TxISR_8BIT_FIFOEN+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	3201      	adds	r2, #1
 8002ccc:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002cd0:	6801      	ldr	r1, [r0, #0]
 8002cd2:	688b      	ldr	r3, [r1, #8]
 8002cd4:	4c14      	ldr	r4, [pc, #80]	; (8002d28 <UART_TxISR_8BIT_FIFOEN+0x74>)
 8002cd6:	4023      	ands	r3, r4
 8002cd8:	608b      	str	r3, [r1, #8]
 8002cda:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cde:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ce6:	6802      	ldr	r2, [r0, #0]
 8002ce8:	6813      	ldr	r3, [r2, #0]
 8002cea:	2040      	movs	r0, #64	; 0x40
 8002cec:	4303      	orrs	r3, r0
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	f381 8810 	msr	PRIMASK, r1
}
 8002cf4:	e7e3      	b.n	8002cbe <UART_TxISR_8BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0df      	beq.n	8002cbe <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8002cfe:	2256      	movs	r2, #86	; 0x56
 8002d00:	5a82      	ldrh	r2, [r0, r2]
 8002d02:	b292      	uxth	r2, r2
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d0de      	beq.n	8002cc6 <UART_TxISR_8BIT_FIFOEN+0x12>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002d08:	6802      	ldr	r2, [r0, #0]
 8002d0a:	69d1      	ldr	r1, [r2, #28]
 8002d0c:	0609      	lsls	r1, r1, #24
 8002d0e:	d5f2      	bpl.n	8002cf6 <UART_TxISR_8BIT_FIFOEN+0x42>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002d10:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002d12:	7809      	ldrb	r1, [r1, #0]
 8002d14:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8002d16:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002d18:	3201      	adds	r2, #1
 8002d1a:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002d1c:	2156      	movs	r1, #86	; 0x56
 8002d1e:	5a42      	ldrh	r2, [r0, r1]
 8002d20:	3a01      	subs	r2, #1
 8002d22:	b292      	uxth	r2, r2
 8002d24:	5242      	strh	r2, [r0, r1]
 8002d26:	e7e6      	b.n	8002cf6 <UART_TxISR_8BIT_FIFOEN+0x42>
 8002d28:	ff7fffff 	.word	0xff7fffff

08002d2c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002d2c:	b510      	push	{r4, lr}
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d2e:	2384      	movs	r3, #132	; 0x84
 8002d30:	58c3      	ldr	r3, [r0, r3]
 8002d32:	2b21      	cmp	r3, #33	; 0x21
 8002d34:	d000      	beq.n	8002d38 <UART_TxISR_16BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 8002d36:	bd10      	pop	{r4, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002d38:	3349      	adds	r3, #73	; 0x49
 8002d3a:	5ac3      	ldrh	r3, [r0, r3]
 8002d3c:	e019      	b.n	8002d72 <UART_TxISR_16BIT_FIFOEN+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	3201      	adds	r2, #1
 8002d44:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002d48:	6801      	ldr	r1, [r0, #0]
 8002d4a:	688b      	ldr	r3, [r1, #8]
 8002d4c:	4c15      	ldr	r4, [pc, #84]	; (8002da4 <UART_TxISR_16BIT_FIFOEN+0x78>)
 8002d4e:	4023      	ands	r3, r4
 8002d50:	608b      	str	r3, [r1, #8]
 8002d52:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d56:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d5e:	6802      	ldr	r2, [r0, #0]
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	2040      	movs	r0, #64	; 0x40
 8002d64:	4303      	orrs	r3, r0
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	f381 8810 	msr	PRIMASK, r1
}
 8002d6c:	e7e3      	b.n	8002d36 <UART_TxISR_16BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0df      	beq.n	8002d36 <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8002d76:	2256      	movs	r2, #86	; 0x56
 8002d78:	5a82      	ldrh	r2, [r0, r2]
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d0de      	beq.n	8002d3e <UART_TxISR_16BIT_FIFOEN+0x12>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002d80:	6801      	ldr	r1, [r0, #0]
 8002d82:	69ca      	ldr	r2, [r1, #28]
 8002d84:	0612      	lsls	r2, r2, #24
 8002d86:	d5f2      	bpl.n	8002d6e <UART_TxISR_16BIT_FIFOEN+0x42>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002d88:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002d8a:	8812      	ldrh	r2, [r2, #0]
 8002d8c:	05d2      	lsls	r2, r2, #23
 8002d8e:	0dd2      	lsrs	r2, r2, #23
 8002d90:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002d92:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002d94:	3202      	adds	r2, #2
 8002d96:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002d98:	2156      	movs	r1, #86	; 0x56
 8002d9a:	5a42      	ldrh	r2, [r0, r1]
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	5242      	strh	r2, [r0, r1]
 8002da2:	e7e4      	b.n	8002d6e <UART_TxISR_16BIT_FIFOEN+0x42>
 8002da4:	ff7fffff 	.word	0xff7fffff

08002da8 <HAL_UART_Transmit_IT>:
{
 8002da8:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8002daa:	2384      	movs	r3, #132	; 0x84
 8002dac:	58c3      	ldr	r3, [r0, r3]
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d160      	bne.n	8002e74 <HAL_UART_Transmit_IT+0xcc>
    if ((pData == NULL) || (Size == 0U))
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d060      	beq.n	8002e78 <HAL_UART_Transmit_IT+0xd0>
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	d060      	beq.n	8002e7c <HAL_UART_Transmit_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dba:	6883      	ldr	r3, [r0, #8]
 8002dbc:	2480      	movs	r4, #128	; 0x80
 8002dbe:	0164      	lsls	r4, r4, #5
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d02d      	beq.n	8002e20 <HAL_UART_Transmit_IT+0x78>
    __HAL_LOCK(huart);
 8002dc4:	2480      	movs	r4, #128	; 0x80
 8002dc6:	5d04      	ldrb	r4, [r0, r4]
 8002dc8:	2c01      	cmp	r4, #1
 8002dca:	d059      	beq.n	8002e80 <HAL_UART_Transmit_IT+0xd8>
 8002dcc:	2480      	movs	r4, #128	; 0x80
 8002dce:	2501      	movs	r5, #1
 8002dd0:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 8002dd2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002dd4:	2154      	movs	r1, #84	; 0x54
 8002dd6:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 8002dd8:	3102      	adds	r1, #2
 8002dda:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6742      	str	r2, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	3136      	adds	r1, #54	; 0x36
 8002de2:	5042      	str	r2, [r0, r1]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de4:	3284      	adds	r2, #132	; 0x84
 8002de6:	396b      	subs	r1, #107	; 0x6b
 8002de8:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	0592      	lsls	r2, r2, #22
 8002dee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002df0:	4291      	cmp	r1, r2
 8002df2:	d01c      	beq.n	8002e2e <HAL_UART_Transmit_IT+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0152      	lsls	r2, r2, #5
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d035      	beq.n	8002e68 <HAL_UART_Transmit_IT+0xc0>
        huart->TxISR = UART_TxISR_8BIT;
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_UART_Transmit_IT+0xdc>)
 8002dfe:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	2300      	movs	r3, #0
 8002e04:	5443      	strb	r3, [r0, r1]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e06:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002e10:	6802      	ldr	r2, [r0, #0]
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	f384 8810 	msr	PRIMASK, r4
    return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	e02a      	b.n	8002e76 <HAL_UART_Transmit_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	6904      	ldr	r4, [r0, #16]
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d1ce      	bne.n	8002dc4 <HAL_UART_Transmit_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e26:	07cc      	lsls	r4, r1, #31
 8002e28:	d5cc      	bpl.n	8002dc4 <HAL_UART_Transmit_IT+0x1c>
        return  HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	e023      	b.n	8002e76 <HAL_UART_Transmit_IT+0xce>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2e:	2280      	movs	r2, #128	; 0x80
 8002e30:	0152      	lsls	r2, r2, #5
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d012      	beq.n	8002e5c <HAL_UART_Transmit_IT+0xb4>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_UART_Transmit_IT+0xe0>)
 8002e38:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e44:	3b7f      	subs	r3, #127	; 0x7f
 8002e46:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002e4a:	6802      	ldr	r2, [r0, #0]
 8002e4c:	6890      	ldr	r0, [r2, #8]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	4303      	orrs	r3, r0
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	f381 8810 	msr	PRIMASK, r1
}
 8002e5a:	e7df      	b.n	8002e1c <HAL_UART_Transmit_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	6903      	ldr	r3, [r0, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e9      	bne.n	8002e36 <HAL_UART_Transmit_IT+0x8e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_UART_Transmit_IT+0xe4>)
 8002e64:	6743      	str	r3, [r0, #116]	; 0x74
 8002e66:	e7e8      	b.n	8002e3a <HAL_UART_Transmit_IT+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e68:	6903      	ldr	r3, [r0, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1c6      	bne.n	8002dfc <HAL_UART_Transmit_IT+0x54>
        huart->TxISR = UART_TxISR_16BIT;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_UART_Transmit_IT+0xe8>)
 8002e70:	6743      	str	r3, [r0, #116]	; 0x74
 8002e72:	e7c5      	b.n	8002e00 <HAL_UART_Transmit_IT+0x58>
    return HAL_BUSY;
 8002e74:	2002      	movs	r0, #2
}
 8002e76:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e7fc      	b.n	8002e76 <HAL_UART_Transmit_IT+0xce>
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	e7fa      	b.n	8002e76 <HAL_UART_Transmit_IT+0xce>
    __HAL_LOCK(huart);
 8002e80:	2002      	movs	r0, #2
 8002e82:	e7f8      	b.n	8002e76 <HAL_UART_Transmit_IT+0xce>
 8002e84:	08002bf1 	.word	0x08002bf1
 8002e88:	08002cb5 	.word	0x08002cb5
 8002e8c:	08002d2d 	.word	0x08002d2d
 8002e90:	08002c51 	.word	0x08002c51

08002e94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e94:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e96:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ea0:	6802      	ldr	r2, [r0, #0]
 8002ea2:	6813      	ldr	r3, [r2, #0]
 8002ea4:	2440      	movs	r4, #64	; 0x40
 8002ea6:	43a3      	bics	r3, r4
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eae:	2384      	movs	r3, #132	; 0x84
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eb8:	f7fd fefc 	bl	8000cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <HAL_UART_ErrorCallback>:
}
 8002ebe:	4770      	bx	lr

08002ec0 <UART_DMAAbortOnError>:
{
 8002ec0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ec2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	225e      	movs	r2, #94	; 0x5e
 8002ec8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8002eca:	3a08      	subs	r2, #8
 8002ecc:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8002ece:	f7ff fff6 	bl	8002ebe <HAL_UART_ErrorCallback>
}
 8002ed2:	bd10      	pop	{r4, pc}

08002ed4 <HAL_UARTEx_RxEventCallback>:
}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_UART_IRQHandler>:
{
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002edc:	6802      	ldr	r2, [r0, #0]
 8002ede:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ee0:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee2:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ee4:	49b9      	ldr	r1, [pc, #740]	; (80031cc <HAL_UART_IRQHandler+0x2f4>)
 8002ee6:	001e      	movs	r6, r3
 8002ee8:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8002eea:	420b      	tst	r3, r1
 8002eec:	d105      	bne.n	8002efa <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002eee:	0699      	lsls	r1, r3, #26
 8002ef0:	d503      	bpl.n	8002efa <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ef2:	0681      	lsls	r1, r0, #26
 8002ef4:	d42c      	bmi.n	8002f50 <HAL_UART_IRQHandler+0x78>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ef6:	00e9      	lsls	r1, r5, #3
 8002ef8:	d42a      	bmi.n	8002f50 <HAL_UART_IRQHandler+0x78>
  if ((errorflags != 0U)
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_UART_IRQHandler+0x36>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002efe:	49b4      	ldr	r1, [pc, #720]	; (80031d0 <HAL_UART_IRQHandler+0x2f8>)
 8002f00:	002e      	movs	r6, r5
 8002f02:	400e      	ands	r6, r1
 8002f04:	420d      	tst	r5, r1
 8002f06:	d129      	bne.n	8002f5c <HAL_UART_IRQHandler+0x84>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f08:	49b2      	ldr	r1, [pc, #712]	; (80031d4 <HAL_UART_IRQHandler+0x2fc>)
 8002f0a:	4208      	tst	r0, r1
 8002f0c:	d126      	bne.n	8002f5c <HAL_UART_IRQHandler+0x84>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002f10:	2901      	cmp	r1, #1
 8002f12:	d100      	bne.n	8002f16 <HAL_UART_IRQHandler+0x3e>
 8002f14:	e0a7      	b.n	8003066 <HAL_UART_IRQHandler+0x18e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f16:	02d9      	lsls	r1, r3, #11
 8002f18:	d502      	bpl.n	8002f20 <HAL_UART_IRQHandler+0x48>
 8002f1a:	0269      	lsls	r1, r5, #9
 8002f1c:	d500      	bpl.n	8002f20 <HAL_UART_IRQHandler+0x48>
 8002f1e:	e13a      	b.n	8003196 <HAL_UART_IRQHandler+0x2be>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f20:	061a      	lsls	r2, r3, #24
 8002f22:	d505      	bpl.n	8002f30 <HAL_UART_IRQHandler+0x58>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f24:	0602      	lsls	r2, r0, #24
 8002f26:	d500      	bpl.n	8002f2a <HAL_UART_IRQHandler+0x52>
 8002f28:	e13c      	b.n	80031a4 <HAL_UART_IRQHandler+0x2cc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f2a:	022a      	lsls	r2, r5, #8
 8002f2c:	d500      	bpl.n	8002f30 <HAL_UART_IRQHandler+0x58>
 8002f2e:	e139      	b.n	80031a4 <HAL_UART_IRQHandler+0x2cc>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f30:	065a      	lsls	r2, r3, #25
 8002f32:	d502      	bpl.n	8002f3a <HAL_UART_IRQHandler+0x62>
 8002f34:	0642      	lsls	r2, r0, #25
 8002f36:	d500      	bpl.n	8002f3a <HAL_UART_IRQHandler+0x62>
 8002f38:	e13b      	b.n	80031b2 <HAL_UART_IRQHandler+0x2da>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	d502      	bpl.n	8002f44 <HAL_UART_IRQHandler+0x6c>
 8002f3e:	0042      	lsls	r2, r0, #1
 8002f40:	d500      	bpl.n	8002f44 <HAL_UART_IRQHandler+0x6c>
 8002f42:	e13a      	b.n	80031ba <HAL_UART_IRQHandler+0x2e2>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f44:	01db      	lsls	r3, r3, #7
 8002f46:	d502      	bpl.n	8002f4e <HAL_UART_IRQHandler+0x76>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	da00      	bge.n	8002f4e <HAL_UART_IRQHandler+0x76>
 8002f4c:	e139      	b.n	80031c2 <HAL_UART_IRQHandler+0x2ea>
}
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (huart->RxISR != NULL)
 8002f50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0fb      	beq.n	8002f4e <HAL_UART_IRQHandler+0x76>
        huart->RxISR(huart);
 8002f56:	0020      	movs	r0, r4
 8002f58:	4798      	blx	r3
      return;
 8002f5a:	e7f8      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f5c:	07d9      	lsls	r1, r3, #31
 8002f5e:	d507      	bpl.n	8002f70 <HAL_UART_IRQHandler+0x98>
 8002f60:	05c1      	lsls	r1, r0, #23
 8002f62:	d505      	bpl.n	8002f70 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f64:	2701      	movs	r7, #1
 8002f66:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f68:	218c      	movs	r1, #140	; 0x8c
 8002f6a:	5862      	ldr	r2, [r4, r1]
 8002f6c:	433a      	orrs	r2, r7
 8002f6e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f70:	079a      	lsls	r2, r3, #30
 8002f72:	d509      	bpl.n	8002f88 <HAL_UART_IRQHandler+0xb0>
 8002f74:	07ea      	lsls	r2, r5, #31
 8002f76:	d507      	bpl.n	8002f88 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f7e:	318a      	adds	r1, #138	; 0x8a
 8002f80:	5862      	ldr	r2, [r4, r1]
 8002f82:	2704      	movs	r7, #4
 8002f84:	433a      	orrs	r2, r7
 8002f86:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f88:	075a      	lsls	r2, r3, #29
 8002f8a:	d509      	bpl.n	8002fa0 <HAL_UART_IRQHandler+0xc8>
 8002f8c:	07ea      	lsls	r2, r5, #31
 8002f8e:	d507      	bpl.n	8002fa0 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	2104      	movs	r1, #4
 8002f94:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f96:	3188      	adds	r1, #136	; 0x88
 8002f98:	5862      	ldr	r2, [r4, r1]
 8002f9a:	2702      	movs	r7, #2
 8002f9c:	433a      	orrs	r2, r7
 8002f9e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fa0:	071a      	lsls	r2, r3, #28
 8002fa2:	d50a      	bpl.n	8002fba <HAL_UART_IRQHandler+0xe2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fa4:	0682      	lsls	r2, r0, #26
 8002fa6:	d401      	bmi.n	8002fac <HAL_UART_IRQHandler+0xd4>
 8002fa8:	2e00      	cmp	r6, #0
 8002faa:	d006      	beq.n	8002fba <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	2608      	movs	r6, #8
 8002fb0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fb2:	218c      	movs	r1, #140	; 0x8c
 8002fb4:	5862      	ldr	r2, [r4, r1]
 8002fb6:	4332      	orrs	r2, r6
 8002fb8:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fba:	051a      	lsls	r2, r3, #20
 8002fbc:	d50a      	bpl.n	8002fd4 <HAL_UART_IRQHandler+0xfc>
 8002fbe:	0142      	lsls	r2, r0, #5
 8002fc0:	d508      	bpl.n	8002fd4 <HAL_UART_IRQHandler+0xfc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0109      	lsls	r1, r1, #4
 8002fc8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fca:	218c      	movs	r1, #140	; 0x8c
 8002fcc:	5862      	ldr	r2, [r4, r1]
 8002fce:	2620      	movs	r6, #32
 8002fd0:	4332      	orrs	r2, r6
 8002fd2:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd4:	228c      	movs	r2, #140	; 0x8c
 8002fd6:	58a2      	ldr	r2, [r4, r2]
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	d0b8      	beq.n	8002f4e <HAL_UART_IRQHandler+0x76>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fdc:	069b      	lsls	r3, r3, #26
 8002fde:	d508      	bpl.n	8002ff2 <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fe0:	0683      	lsls	r3, r0, #26
 8002fe2:	d401      	bmi.n	8002fe8 <HAL_UART_IRQHandler+0x110>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fe4:	00eb      	lsls	r3, r5, #3
 8002fe6:	d504      	bpl.n	8002ff2 <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8002fe8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 8002fee:	0020      	movs	r0, r4
 8002ff0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002ff2:	238c      	movs	r3, #140	; 0x8c
 8002ff4:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	065b      	lsls	r3, r3, #25
 8002ffc:	d402      	bmi.n	8003004 <HAL_UART_IRQHandler+0x12c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ffe:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003000:	4213      	tst	r3, r2
 8003002:	d029      	beq.n	8003058 <HAL_UART_IRQHandler+0x180>
        UART_EndRxTransfer(huart);
 8003004:	0020      	movs	r0, r4
 8003006:	f7ff fdc1 	bl	8002b8c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	065b      	lsls	r3, r3, #25
 8003010:	d51e      	bpl.n	8003050 <HAL_UART_IRQHandler+0x178>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	2301      	movs	r3, #1
 8003018:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	6893      	ldr	r3, [r2, #8]
 8003020:	2040      	movs	r0, #64	; 0x40
 8003022:	4383      	bics	r3, r0
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800302a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <HAL_UART_IRQHandler+0x170>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003030:	4a69      	ldr	r2, [pc, #420]	; (80031d8 <HAL_UART_IRQHandler+0x300>)
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003034:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003036:	f7fe f919 	bl	800126c <HAL_DMA_Abort_IT>
 800303a:	2800      	cmp	r0, #0
 800303c:	d100      	bne.n	8003040 <HAL_UART_IRQHandler+0x168>
 800303e:	e786      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003040:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003042:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003044:	4798      	blx	r3
 8003046:	e782      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
            HAL_UART_ErrorCallback(huart);
 8003048:	0020      	movs	r0, r4
 800304a:	f7ff ff38 	bl	8002ebe <HAL_UART_ErrorCallback>
 800304e:	e77e      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
          HAL_UART_ErrorCallback(huart);
 8003050:	0020      	movs	r0, r4
 8003052:	f7ff ff34 	bl	8002ebe <HAL_UART_ErrorCallback>
 8003056:	e77a      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
        HAL_UART_ErrorCallback(huart);
 8003058:	0020      	movs	r0, r4
 800305a:	f7ff ff30 	bl	8002ebe <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	238c      	movs	r3, #140	; 0x8c
 8003060:	2200      	movs	r2, #0
 8003062:	50e2      	str	r2, [r4, r3]
    return;
 8003064:	e773      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003066:	06d9      	lsls	r1, r3, #27
 8003068:	d400      	bmi.n	800306c <HAL_UART_IRQHandler+0x194>
 800306a:	e754      	b.n	8002f16 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800306c:	06c1      	lsls	r1, r0, #27
 800306e:	d400      	bmi.n	8003072 <HAL_UART_IRQHandler+0x19a>
 8003070:	e751      	b.n	8002f16 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003072:	2310      	movs	r3, #16
 8003074:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	065b      	lsls	r3, r3, #25
 800307c:	d551      	bpl.n	8003122 <HAL_UART_IRQHandler+0x24a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800307e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003080:	6813      	ldr	r3, [r2, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003086:	2b00      	cmp	r3, #0
 8003088:	d100      	bne.n	800308c <HAL_UART_IRQHandler+0x1b4>
 800308a:	e760      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308c:	215c      	movs	r1, #92	; 0x5c
 800308e:	5a61      	ldrh	r1, [r4, r1]
 8003090:	4299      	cmp	r1, r3
 8003092:	d800      	bhi.n	8003096 <HAL_UART_IRQHandler+0x1be>
 8003094:	e75b      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
        huart->RxXferCount = nb_remaining_rx_data;
 8003096:	215e      	movs	r1, #94	; 0x5e
 8003098:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	069b      	lsls	r3, r3, #26
 80030a0:	d509      	bpl.n	80030b6 <HAL_UART_IRQHandler+0x1de>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030a2:	235c      	movs	r3, #92	; 0x5c
 80030a4:	5ae1      	ldrh	r1, [r4, r3]
 80030a6:	3302      	adds	r3, #2
 80030a8:	5ae3      	ldrh	r3, [r4, r3]
 80030aa:	1ac9      	subs	r1, r1, r3
 80030ac:	b289      	uxth	r1, r1
 80030ae:	0020      	movs	r0, r4
 80030b0:	f7ff ff10 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
      return;
 80030b4:	e74b      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	2301      	movs	r3, #1
 80030bc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030c0:	6821      	ldr	r1, [r4, #0]
 80030c2:	680a      	ldr	r2, [r1, #0]
 80030c4:	4d45      	ldr	r5, [pc, #276]	; (80031dc <HAL_UART_IRQHandler+0x304>)
 80030c6:	402a      	ands	r2, r5
 80030c8:	600a      	str	r2, [r1, #0]
 80030ca:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d6:	6821      	ldr	r1, [r4, #0]
 80030d8:	688a      	ldr	r2, [r1, #8]
 80030da:	439a      	bics	r2, r3
 80030dc:	608a      	str	r2, [r1, #8]
 80030de:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ea:	6821      	ldr	r1, [r4, #0]
 80030ec:	688a      	ldr	r2, [r1, #8]
 80030ee:	3542      	adds	r5, #66	; 0x42
 80030f0:	35ff      	adds	r5, #255	; 0xff
 80030f2:	43aa      	bics	r2, r5
 80030f4:	608a      	str	r2, [r1, #8]
 80030f6:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80030fa:	2288      	movs	r2, #136	; 0x88
 80030fc:	2120      	movs	r1, #32
 80030fe:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	2200      	movs	r2, #0
 8003102:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003104:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	6822      	ldr	r2, [r4, #0]
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	2010      	movs	r0, #16
 8003112:	4383      	bics	r3, r0
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800311a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800311c:	f7fe f866 	bl	80011ec <HAL_DMA_Abort>
 8003120:	e7bf      	b.n	80030a2 <HAL_UART_IRQHandler+0x1ca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003122:	235c      	movs	r3, #92	; 0x5c
 8003124:	5ae1      	ldrh	r1, [r4, r3]
 8003126:	3302      	adds	r3, #2
 8003128:	5ae2      	ldrh	r2, [r4, r3]
 800312a:	1a89      	subs	r1, r1, r2
 800312c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800312e:	5ae3      	ldrh	r3, [r4, r3]
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d100      	bne.n	8003138 <HAL_UART_IRQHandler+0x260>
 8003136:	e70a      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
          && (nb_rx_data > 0U))
 8003138:	2900      	cmp	r1, #0
 800313a:	d100      	bne.n	800313e <HAL_UART_IRQHandler+0x266>
 800313c:	e707      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	2301      	movs	r3, #1
 8003144:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	6802      	ldr	r2, [r0, #0]
 800314c:	4e24      	ldr	r6, [pc, #144]	; (80031e0 <HAL_UART_IRQHandler+0x308>)
 800314e:	4032      	ands	r2, r6
 8003150:	6002      	str	r2, [r0, #0]
 8003152:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003156:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	6882      	ldr	r2, [r0, #8]
 8003162:	4e20      	ldr	r6, [pc, #128]	; (80031e4 <HAL_UART_IRQHandler+0x30c>)
 8003164:	4032      	ands	r2, r6
 8003166:	6082      	str	r2, [r0, #8]
 8003168:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 800316c:	2288      	movs	r2, #136	; 0x88
 800316e:	2020      	movs	r0, #32
 8003170:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003172:	2200      	movs	r2, #0
 8003174:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8003176:	6722      	str	r2, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	2510      	movs	r5, #16
 8003186:	43ab      	bics	r3, r5
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800318e:	0020      	movs	r0, r4
 8003190:	f7ff fea0 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
      return;
 8003194:	e6db      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	035b      	lsls	r3, r3, #13
 800319a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800319c:	0020      	movs	r0, r4
 800319e:	f000 fb33 	bl	8003808 <HAL_UARTEx_WakeupCallback>
    return;
 80031a2:	e6d4      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
    if (huart->TxISR != NULL)
 80031a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d100      	bne.n	80031ac <HAL_UART_IRQHandler+0x2d4>
 80031aa:	e6d0      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
      huart->TxISR(huart);
 80031ac:	0020      	movs	r0, r4
 80031ae:	4798      	blx	r3
    return;
 80031b0:	e6cd      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
    UART_EndTransmit_IT(huart);
 80031b2:	0020      	movs	r0, r4
 80031b4:	f7ff fe6e 	bl	8002e94 <UART_EndTransmit_IT>
    return;
 80031b8:	e6c9      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80031ba:	0020      	movs	r0, r4
 80031bc:	f000 fb26 	bl	800380c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80031c0:	e6c5      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80031c2:	0020      	movs	r0, r4
 80031c4:	f000 fb21 	bl	800380a <HAL_UARTEx_RxFifoFullCallback>
    return;
 80031c8:	e6c1      	b.n	8002f4e <HAL_UART_IRQHandler+0x76>
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	0000080f 	.word	0x0000080f
 80031d0:	10000001 	.word	0x10000001
 80031d4:	04000120 	.word	0x04000120
 80031d8:	08002ec1 	.word	0x08002ec1
 80031dc:	fffffeff 	.word	0xfffffeff
 80031e0:	fffffedf 	.word	0xfffffedf
 80031e4:	effffffe 	.word	0xeffffffe

080031e8 <UART_SetConfig>:
{
 80031e8:	b510      	push	{r4, lr}
 80031ea:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ec:	6883      	ldr	r3, [r0, #8]
 80031ee:	6902      	ldr	r2, [r0, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	6942      	ldr	r2, [r0, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	69c2      	ldr	r2, [r0, #28]
 80031f8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031fa:	6801      	ldr	r1, [r0, #0]
 80031fc:	680a      	ldr	r2, [r1, #0]
 80031fe:	4863      	ldr	r0, [pc, #396]	; (800338c <UART_SetConfig+0x1a4>)
 8003200:	4002      	ands	r2, r0
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	6853      	ldr	r3, [r2, #4]
 800320a:	4961      	ldr	r1, [pc, #388]	; (8003390 <UART_SetConfig+0x1a8>)
 800320c:	400b      	ands	r3, r1
 800320e:	68e1      	ldr	r1, [r4, #12]
 8003210:	430b      	orrs	r3, r1
 8003212:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003214:	6a22      	ldr	r2, [r4, #32]
 8003216:	69a3      	ldr	r3, [r4, #24]
 8003218:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800321a:	6821      	ldr	r1, [r4, #0]
 800321c:	688b      	ldr	r3, [r1, #8]
 800321e:	485d      	ldr	r0, [pc, #372]	; (8003394 <UART_SetConfig+0x1ac>)
 8003220:	4003      	ands	r3, r0
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800322a:	210f      	movs	r1, #15
 800322c:	438b      	bics	r3, r1
 800322e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003230:	430b      	orrs	r3, r1
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	4a58      	ldr	r2, [pc, #352]	; (8003398 <UART_SetConfig+0x1b0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d01b      	beq.n	8003274 <UART_SetConfig+0x8c>
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <UART_SetConfig+0x1b4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d029      	beq.n	8003296 <UART_SetConfig+0xae>
 8003242:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003244:	69e0      	ldr	r0, [r4, #28]
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	0212      	lsls	r2, r2, #8
 800324a:	4290      	cmp	r0, r2
 800324c:	d02d      	beq.n	80032aa <UART_SetConfig+0xc2>
    switch (clocksource)
 800324e:	2b04      	cmp	r3, #4
 8003250:	d100      	bne.n	8003254 <UART_SetConfig+0x6c>
 8003252:	e094      	b.n	800337e <UART_SetConfig+0x196>
 8003254:	d868      	bhi.n	8003328 <UART_SetConfig+0x140>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d100      	bne.n	800325c <UART_SetConfig+0x74>
 800325a:	e08a      	b.n	8003372 <UART_SetConfig+0x18a>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d161      	bne.n	8003324 <UART_SetConfig+0x13c>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <UART_SetConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	2107      	movs	r1, #7
 8003268:	4019      	ands	r1, r3
 800326a:	3101      	adds	r1, #1
 800326c:	484d      	ldr	r0, [pc, #308]	; (80033a4 <UART_SetConfig+0x1bc>)
 800326e:	f7fc ff55 	bl	800011c <__udivsi3>
        break;
 8003272:	e080      	b.n	8003376 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003274:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <UART_SetConfig+0x1b8>)
 8003276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003278:	2303      	movs	r3, #3
 800327a:	4013      	ands	r3, r2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d00c      	beq.n	800329a <UART_SetConfig+0xb2>
 8003280:	d805      	bhi.n	800328e <UART_SetConfig+0xa6>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <UART_SetConfig+0xb6>
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10b      	bne.n	80032a2 <UART_SetConfig+0xba>
 800328a:	3303      	adds	r3, #3
 800328c:	e7da      	b.n	8003244 <UART_SetConfig+0x5c>
 800328e:	2b03      	cmp	r3, #3
 8003290:	d109      	bne.n	80032a6 <UART_SetConfig+0xbe>
 8003292:	3305      	adds	r3, #5
 8003294:	e7d6      	b.n	8003244 <UART_SetConfig+0x5c>
 8003296:	2300      	movs	r3, #0
 8003298:	e7d4      	b.n	8003244 <UART_SetConfig+0x5c>
 800329a:	2302      	movs	r3, #2
 800329c:	e7d2      	b.n	8003244 <UART_SetConfig+0x5c>
 800329e:	2300      	movs	r3, #0
 80032a0:	e7d0      	b.n	8003244 <UART_SetConfig+0x5c>
 80032a2:	2310      	movs	r3, #16
 80032a4:	e7ce      	b.n	8003244 <UART_SetConfig+0x5c>
 80032a6:	2310      	movs	r3, #16
 80032a8:	e7cc      	b.n	8003244 <UART_SetConfig+0x5c>
    switch (clocksource)
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d037      	beq.n	800331e <UART_SetConfig+0x136>
 80032ae:	d80f      	bhi.n	80032d0 <UART_SetConfig+0xe8>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02e      	beq.n	8003312 <UART_SetConfig+0x12a>
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d109      	bne.n	80032cc <UART_SetConfig+0xe4>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80032b8:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <UART_SetConfig+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	2107      	movs	r1, #7
 80032c0:	4019      	ands	r1, r3
 80032c2:	3101      	adds	r1, #1
 80032c4:	4837      	ldr	r0, [pc, #220]	; (80033a4 <UART_SetConfig+0x1bc>)
 80032c6:	f7fc ff29 	bl	800011c <__udivsi3>
        break;
 80032ca:	e024      	b.n	8003316 <UART_SetConfig+0x12e>
    switch (clocksource)
 80032cc:	2001      	movs	r0, #1
 80032ce:	e047      	b.n	8003360 <UART_SetConfig+0x178>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d11c      	bne.n	800330e <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <UART_SetConfig+0x1c0>)
 80032da:	5a99      	ldrh	r1, [r3, r2]
 80032dc:	f7fc ff1e 	bl	800011c <__udivsi3>
 80032e0:	0040      	lsls	r0, r0, #1
 80032e2:	6863      	ldr	r3, [r4, #4]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	18c0      	adds	r0, r0, r3
 80032e8:	6861      	ldr	r1, [r4, #4]
 80032ea:	f7fc ff17 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ee:	0002      	movs	r2, r0
 80032f0:	3a10      	subs	r2, #16
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <UART_SetConfig+0x1c4>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d845      	bhi.n	8003384 <UART_SetConfig+0x19c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f8:	b282      	uxth	r2, r0
 80032fa:	230f      	movs	r3, #15
 80032fc:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fe:	0840      	lsrs	r0, r0, #1
 8003300:	3b08      	subs	r3, #8
 8003302:	4018      	ands	r0, r3
 8003304:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	60d8      	str	r0, [r3, #12]
 800330a:	2000      	movs	r0, #0
 800330c:	e028      	b.n	8003360 <UART_SetConfig+0x178>
    switch (clocksource)
 800330e:	2001      	movs	r0, #1
 8003310:	e026      	b.n	8003360 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003312:	f7fe ff77 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003316:	2800      	cmp	r0, #0
 8003318:	d1dc      	bne.n	80032d4 <UART_SetConfig+0xec>
 800331a:	2000      	movs	r0, #0
 800331c:	e020      	b.n	8003360 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800331e:	f7fe fe73 	bl	8002008 <HAL_RCC_GetSysClockFreq>
        break;
 8003322:	e7f8      	b.n	8003316 <UART_SetConfig+0x12e>
    switch (clocksource)
 8003324:	2001      	movs	r0, #1
 8003326:	e01b      	b.n	8003360 <UART_SetConfig+0x178>
 8003328:	2b08      	cmp	r3, #8
 800332a:	d118      	bne.n	800335e <UART_SetConfig+0x176>
 800332c:	2080      	movs	r0, #128	; 0x80
 800332e:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <UART_SetConfig+0x1c0>)
 8003336:	5a99      	ldrh	r1, [r3, r2]
 8003338:	f7fc fef0 	bl	800011c <__udivsi3>
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	18c0      	adds	r0, r0, r3
 8003342:	6861      	ldr	r1, [r4, #4]
 8003344:	f7fc feea 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	0002      	movs	r2, r0
 800334a:	3a10      	subs	r2, #16
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <UART_SetConfig+0x1c4>)
 800334e:	429a      	cmp	r2, r3
 8003350:	d81a      	bhi.n	8003388 <UART_SetConfig+0x1a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	0400      	lsls	r0, r0, #16
 8003356:	0c00      	lsrs	r0, r0, #16
 8003358:	60d8      	str	r0, [r3, #12]
 800335a:	2000      	movs	r0, #0
 800335c:	e000      	b.n	8003360 <UART_SetConfig+0x178>
    switch (clocksource)
 800335e:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8003360:	2301      	movs	r3, #1
 8003362:	226a      	movs	r2, #106	; 0x6a
 8003364:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8003366:	3a02      	subs	r2, #2
 8003368:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800336e:	6763      	str	r3, [r4, #116]	; 0x74
}
 8003370:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8003372:	f7fe ff47 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003376:	2800      	cmp	r0, #0
 8003378:	d1da      	bne.n	8003330 <UART_SetConfig+0x148>
 800337a:	2000      	movs	r0, #0
 800337c:	e7f0      	b.n	8003360 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe fe43 	bl	8002008 <HAL_RCC_GetSysClockFreq>
        break;
 8003382:	e7f8      	b.n	8003376 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003384:	2001      	movs	r0, #1
 8003386:	e7eb      	b.n	8003360 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8003388:	2001      	movs	r0, #1
 800338a:	e7e9      	b.n	8003360 <UART_SetConfig+0x178>
 800338c:	cfff69f3 	.word	0xcfff69f3
 8003390:	ffffcfff 	.word	0xffffcfff
 8003394:	11fff4ff 	.word	0x11fff4ff
 8003398:	40013800 	.word	0x40013800
 800339c:	40004400 	.word	0x40004400
 80033a0:	40021000 	.word	0x40021000
 80033a4:	02dc6c00 	.word	0x02dc6c00
 80033a8:	08004d9c 	.word	0x08004d9c
 80033ac:	0000ffef 	.word	0x0000ffef

080033b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033b2:	07db      	lsls	r3, r3, #31
 80033b4:	d506      	bpl.n	80033c4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b6:	6802      	ldr	r2, [r0, #0]
 80033b8:	6853      	ldr	r3, [r2, #4]
 80033ba:	492c      	ldr	r1, [pc, #176]	; (800346c <UART_AdvFeatureConfig+0xbc>)
 80033bc:	400b      	ands	r3, r1
 80033be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033c6:	079b      	lsls	r3, r3, #30
 80033c8:	d506      	bpl.n	80033d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ca:	6802      	ldr	r2, [r0, #0]
 80033cc:	6853      	ldr	r3, [r2, #4]
 80033ce:	4928      	ldr	r1, [pc, #160]	; (8003470 <UART_AdvFeatureConfig+0xc0>)
 80033d0:	400b      	ands	r3, r1
 80033d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033da:	075b      	lsls	r3, r3, #29
 80033dc:	d506      	bpl.n	80033ec <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033de:	6802      	ldr	r2, [r0, #0]
 80033e0:	6853      	ldr	r3, [r2, #4]
 80033e2:	4924      	ldr	r1, [pc, #144]	; (8003474 <UART_AdvFeatureConfig+0xc4>)
 80033e4:	400b      	ands	r3, r1
 80033e6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80033e8:	430b      	orrs	r3, r1
 80033ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033ee:	071b      	lsls	r3, r3, #28
 80033f0:	d506      	bpl.n	8003400 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f2:	6802      	ldr	r2, [r0, #0]
 80033f4:	6853      	ldr	r3, [r2, #4]
 80033f6:	4920      	ldr	r1, [pc, #128]	; (8003478 <UART_AdvFeatureConfig+0xc8>)
 80033f8:	400b      	ands	r3, r1
 80033fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003400:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003402:	06db      	lsls	r3, r3, #27
 8003404:	d506      	bpl.n	8003414 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003406:	6802      	ldr	r2, [r0, #0]
 8003408:	6893      	ldr	r3, [r2, #8]
 800340a:	491c      	ldr	r1, [pc, #112]	; (800347c <UART_AdvFeatureConfig+0xcc>)
 800340c:	400b      	ands	r3, r1
 800340e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003410:	430b      	orrs	r3, r1
 8003412:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003414:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003416:	069b      	lsls	r3, r3, #26
 8003418:	d506      	bpl.n	8003428 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341a:	6802      	ldr	r2, [r0, #0]
 800341c:	6893      	ldr	r3, [r2, #8]
 800341e:	4918      	ldr	r1, [pc, #96]	; (8003480 <UART_AdvFeatureConfig+0xd0>)
 8003420:	400b      	ands	r3, r1
 8003422:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003424:	430b      	orrs	r3, r1
 8003426:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800342a:	065b      	lsls	r3, r3, #25
 800342c:	d50b      	bpl.n	8003446 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342e:	6802      	ldr	r2, [r0, #0]
 8003430:	6853      	ldr	r3, [r2, #4]
 8003432:	4914      	ldr	r1, [pc, #80]	; (8003484 <UART_AdvFeatureConfig+0xd4>)
 8003434:	400b      	ands	r3, r1
 8003436:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003438:	430b      	orrs	r3, r1
 800343a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	035b      	lsls	r3, r3, #13
 8003440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003442:	429a      	cmp	r2, r3
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003446:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	d506      	bpl.n	800345a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344c:	6802      	ldr	r2, [r0, #0]
 800344e:	6853      	ldr	r3, [r2, #4]
 8003450:	490d      	ldr	r1, [pc, #52]	; (8003488 <UART_AdvFeatureConfig+0xd8>)
 8003452:	400b      	ands	r3, r1
 8003454:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003456:	430b      	orrs	r3, r1
 8003458:	6053      	str	r3, [r2, #4]
}
 800345a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800345c:	6802      	ldr	r2, [r0, #0]
 800345e:	6853      	ldr	r3, [r2, #4]
 8003460:	490a      	ldr	r1, [pc, #40]	; (800348c <UART_AdvFeatureConfig+0xdc>)
 8003462:	400b      	ands	r3, r1
 8003464:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003466:	430b      	orrs	r3, r1
 8003468:	6053      	str	r3, [r2, #4]
 800346a:	e7ec      	b.n	8003446 <UART_AdvFeatureConfig+0x96>
 800346c:	fffdffff 	.word	0xfffdffff
 8003470:	fffeffff 	.word	0xfffeffff
 8003474:	fffbffff 	.word	0xfffbffff
 8003478:	ffff7fff 	.word	0xffff7fff
 800347c:	ffffefff 	.word	0xffffefff
 8003480:	ffffdfff 	.word	0xffffdfff
 8003484:	ffefffff 	.word	0xffefffff
 8003488:	fff7ffff 	.word	0xfff7ffff
 800348c:	ff9fffff 	.word	0xff9fffff

08003490 <UART_WaitOnFlagUntilTimeout>:
{
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	46ce      	mov	lr, r9
 8003494:	4647      	mov	r7, r8
 8003496:	b580      	push	{r7, lr}
 8003498:	0006      	movs	r6, r0
 800349a:	000d      	movs	r5, r1
 800349c:	0017      	movs	r7, r2
 800349e:	4699      	mov	r9, r3
 80034a0:	9b08      	ldr	r3, [sp, #32]
 80034a2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	6833      	ldr	r3, [r6, #0]
 80034a6:	69dc      	ldr	r4, [r3, #28]
 80034a8:	402c      	ands	r4, r5
 80034aa:	1b64      	subs	r4, r4, r5
 80034ac:	4263      	negs	r3, r4
 80034ae:	415c      	adcs	r4, r3
 80034b0:	42bc      	cmp	r4, r7
 80034b2:	d157      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	4643      	mov	r3, r8
 80034b6:	3301      	adds	r3, #1
 80034b8:	d0f4      	beq.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fd fe27 	bl	800110c <HAL_GetTick>
 80034be:	464b      	mov	r3, r9
 80034c0:	1ac0      	subs	r0, r0, r3
 80034c2:	4540      	cmp	r0, r8
 80034c4:	d82e      	bhi.n	8003524 <UART_WaitOnFlagUntilTimeout+0x94>
 80034c6:	4643      	mov	r3, r8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02b      	beq.n	8003524 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034cc:	6833      	ldr	r3, [r6, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	0752      	lsls	r2, r2, #29
 80034d2:	d5e7      	bpl.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	0512      	lsls	r2, r2, #20
 80034d8:	d5e4      	bpl.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e4:	2201      	movs	r2, #1
 80034e6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034ea:	6831      	ldr	r1, [r6, #0]
 80034ec:	680b      	ldr	r3, [r1, #0]
 80034ee:	4c20      	ldr	r4, [pc, #128]	; (8003570 <UART_WaitOnFlagUntilTimeout+0xe0>)
 80034f0:	4023      	ands	r3, r4
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	6831      	ldr	r1, [r6, #0]
 8003502:	688b      	ldr	r3, [r1, #8]
 8003504:	4393      	bics	r3, r2
 8003506:	608b      	str	r3, [r1, #8]
 8003508:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800350c:	2320      	movs	r3, #32
 800350e:	3283      	adds	r2, #131	; 0x83
 8003510:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003512:	3204      	adds	r2, #4
 8003514:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003516:	3204      	adds	r2, #4
 8003518:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 800351a:	3360      	adds	r3, #96	; 0x60
 800351c:	2200      	movs	r2, #0
 800351e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8003520:	2003      	movs	r0, #3
 8003522:	e020      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003524:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	2201      	movs	r2, #1
 800352a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800352e:	6831      	ldr	r1, [r6, #0]
 8003530:	680b      	ldr	r3, [r1, #0]
 8003532:	4c0f      	ldr	r4, [pc, #60]	; (8003570 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8003534:	4023      	ands	r3, r4
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003544:	6831      	ldr	r1, [r6, #0]
 8003546:	688b      	ldr	r3, [r1, #8]
 8003548:	4393      	bics	r3, r2
 800354a:	608b      	str	r3, [r1, #8]
 800354c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003550:	2320      	movs	r3, #32
 8003552:	3283      	adds	r2, #131	; 0x83
 8003554:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003556:	3204      	adds	r2, #4
 8003558:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 800355a:	3360      	adds	r3, #96	; 0x60
 800355c:	2200      	movs	r2, #0
 800355e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8003560:	2003      	movs	r0, #3
 8003562:	e000      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8003564:	2000      	movs	r0, #0
}
 8003566:	bcc0      	pop	{r6, r7}
 8003568:	46b9      	mov	r9, r7
 800356a:	46b0      	mov	r8, r6
 800356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	fffffe5f 	.word	0xfffffe5f

08003574 <HAL_UART_Receive>:
{
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	46c6      	mov	lr, r8
 8003578:	b500      	push	{lr}
 800357a:	b084      	sub	sp, #16
 800357c:	0004      	movs	r4, r0
 800357e:	000e      	movs	r6, r1
 8003580:	0015      	movs	r5, r2
 8003582:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003584:	2388      	movs	r3, #136	; 0x88
 8003586:	58c3      	ldr	r3, [r0, r3]
 8003588:	2b20      	cmp	r3, #32
 800358a:	d000      	beq.n	800358e <HAL_UART_Receive+0x1a>
 800358c:	e092      	b.n	80036b4 <HAL_UART_Receive+0x140>
    if ((pData == NULL) || (Size == 0U))
 800358e:	2900      	cmp	r1, #0
 8003590:	d100      	bne.n	8003594 <HAL_UART_Receive+0x20>
 8003592:	e094      	b.n	80036be <HAL_UART_Receive+0x14a>
 8003594:	2a00      	cmp	r2, #0
 8003596:	d100      	bne.n	800359a <HAL_UART_Receive+0x26>
 8003598:	e093      	b.n	80036c2 <HAL_UART_Receive+0x14e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	015b      	lsls	r3, r3, #5
 800359e:	6882      	ldr	r2, [r0, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d023      	beq.n	80035ec <HAL_UART_Receive+0x78>
    __HAL_LOCK(huart);
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	5ce3      	ldrb	r3, [r4, r3]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d100      	bne.n	80035ae <HAL_UART_Receive+0x3a>
 80035ac:	e08b      	b.n	80036c6 <HAL_UART_Receive+0x152>
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	2201      	movs	r2, #1
 80035b2:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	328b      	adds	r2, #139	; 0x8b
 80035b8:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ba:	3a04      	subs	r2, #4
 80035bc:	2122      	movs	r1, #34	; 0x22
 80035be:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c0:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 80035c2:	f7fd fda3 	bl	800110c <HAL_GetTick>
 80035c6:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 80035c8:	235c      	movs	r3, #92	; 0x5c
 80035ca:	52e5      	strh	r5, [r4, r3]
    huart->RxXferCount = Size;
 80035cc:	3302      	adds	r3, #2
 80035ce:	52e5      	strh	r5, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0152      	lsls	r2, r2, #5
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00f      	beq.n	80035fa <HAL_UART_Receive+0x86>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11c      	bne.n	8003618 <HAL_UART_Receive+0xa4>
 80035de:	6922      	ldr	r2, [r4, #16]
 80035e0:	2a00      	cmp	r2, #0
 80035e2:	d115      	bne.n	8003610 <HAL_UART_Receive+0x9c>
 80035e4:	3260      	adds	r2, #96	; 0x60
 80035e6:	21ff      	movs	r1, #255	; 0xff
 80035e8:	52a1      	strh	r1, [r4, r2]
 80035ea:	e01c      	b.n	8003626 <HAL_UART_Receive+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	6903      	ldr	r3, [r0, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1d8      	bne.n	80035a4 <HAL_UART_Receive+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 80035f2:	07cb      	lsls	r3, r1, #31
 80035f4:	d5d6      	bpl.n	80035a4 <HAL_UART_Receive+0x30>
        return  HAL_ERROR;
 80035f6:	2001      	movs	r0, #1
 80035f8:	e05d      	b.n	80036b6 <HAL_UART_Receive+0x142>
    UART_MASK_COMPUTATION(huart);
 80035fa:	6922      	ldr	r2, [r4, #16]
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	d103      	bne.n	8003608 <HAL_UART_Receive+0x94>
 8003600:	3260      	adds	r2, #96	; 0x60
 8003602:	4933      	ldr	r1, [pc, #204]	; (80036d0 <HAL_UART_Receive+0x15c>)
 8003604:	52a1      	strh	r1, [r4, r2]
 8003606:	e00e      	b.n	8003626 <HAL_UART_Receive+0xb2>
 8003608:	2260      	movs	r2, #96	; 0x60
 800360a:	21ff      	movs	r1, #255	; 0xff
 800360c:	52a1      	strh	r1, [r4, r2]
 800360e:	e00a      	b.n	8003626 <HAL_UART_Receive+0xb2>
 8003610:	2260      	movs	r2, #96	; 0x60
 8003612:	217f      	movs	r1, #127	; 0x7f
 8003614:	52a1      	strh	r1, [r4, r2]
 8003616:	e006      	b.n	8003626 <HAL_UART_Receive+0xb2>
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	0552      	lsls	r2, r2, #21
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_UART_Receive+0xca>
 8003620:	2260      	movs	r2, #96	; 0x60
 8003622:	2100      	movs	r1, #0
 8003624:	52a1      	strh	r1, [r4, r2]
    uhMask = huart->Mask;
 8003626:	2260      	movs	r2, #96	; 0x60
 8003628:	5aa2      	ldrh	r2, [r4, r2]
 800362a:	9203      	str	r2, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	0152      	lsls	r2, r2, #5
 8003630:	4293      	cmp	r3, r2
 8003632:	d00f      	beq.n	8003654 <HAL_UART_Receive+0xe0>
      pdata16bits = NULL;
 8003634:	2500      	movs	r5, #0
    __HAL_UNLOCK(huart);
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	2200      	movs	r2, #0
 800363a:	54e2      	strb	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 800363c:	e01d      	b.n	800367a <HAL_UART_Receive+0x106>
    UART_MASK_COMPUTATION(huart);
 800363e:	6922      	ldr	r2, [r4, #16]
 8003640:	2a00      	cmp	r2, #0
 8003642:	d103      	bne.n	800364c <HAL_UART_Receive+0xd8>
 8003644:	3260      	adds	r2, #96	; 0x60
 8003646:	217f      	movs	r1, #127	; 0x7f
 8003648:	52a1      	strh	r1, [r4, r2]
 800364a:	e7ec      	b.n	8003626 <HAL_UART_Receive+0xb2>
 800364c:	2260      	movs	r2, #96	; 0x60
 800364e:	213f      	movs	r1, #63	; 0x3f
 8003650:	52a1      	strh	r1, [r4, r2]
 8003652:	e7e8      	b.n	8003626 <HAL_UART_Receive+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_UART_Receive+0xea>
      pdata16bits = NULL;
 800365a:	2500      	movs	r5, #0
 800365c:	e7eb      	b.n	8003636 <HAL_UART_Receive+0xc2>
      pdata16bits = (uint16_t *) pData;
 800365e:	0035      	movs	r5, r6
      pdata8bits  = NULL;
 8003660:	2600      	movs	r6, #0
 8003662:	e7e8      	b.n	8003636 <HAL_UART_Receive+0xc2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	9a03      	ldr	r2, [sp, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 800366e:	3502      	adds	r5, #2
      huart->RxXferCount--;
 8003670:	235e      	movs	r3, #94	; 0x5e
 8003672:	5ae2      	ldrh	r2, [r4, r3]
 8003674:	3a01      	subs	r2, #1
 8003676:	b292      	uxth	r2, r2
 8003678:	52e2      	strh	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 800367a:	235e      	movs	r3, #94	; 0x5e
 800367c:	5ae3      	ldrh	r3, [r4, r3]
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d012      	beq.n	80036aa <HAL_UART_Receive+0x136>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003684:	9700      	str	r7, [sp, #0]
 8003686:	4643      	mov	r3, r8
 8003688:	2200      	movs	r2, #0
 800368a:	2120      	movs	r1, #32
 800368c:	0020      	movs	r0, r4
 800368e:	f7ff feff 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 8003692:	2800      	cmp	r0, #0
 8003694:	d119      	bne.n	80036ca <HAL_UART_Receive+0x156>
      if (pdata8bits == NULL)
 8003696:	2e00      	cmp	r6, #0
 8003698:	d0e4      	beq.n	8003664 <HAL_UART_Receive+0xf0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	466a      	mov	r2, sp
 80036a0:	7b12      	ldrb	r2, [r2, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7e2      	b.n	8003670 <HAL_UART_Receive+0xfc>
    huart->RxState = HAL_UART_STATE_READY;
 80036aa:	3388      	adds	r3, #136	; 0x88
 80036ac:	2220      	movs	r2, #32
 80036ae:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e000      	b.n	80036b6 <HAL_UART_Receive+0x142>
    return HAL_BUSY;
 80036b4:	2002      	movs	r0, #2
}
 80036b6:	b004      	add	sp, #16
 80036b8:	bc80      	pop	{r7}
 80036ba:	46b8      	mov	r8, r7
 80036bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80036be:	2001      	movs	r0, #1
 80036c0:	e7f9      	b.n	80036b6 <HAL_UART_Receive+0x142>
 80036c2:	2001      	movs	r0, #1
 80036c4:	e7f7      	b.n	80036b6 <HAL_UART_Receive+0x142>
    __HAL_LOCK(huart);
 80036c6:	2002      	movs	r0, #2
 80036c8:	e7f5      	b.n	80036b6 <HAL_UART_Receive+0x142>
        return HAL_TIMEOUT;
 80036ca:	2003      	movs	r0, #3
 80036cc:	e7f3      	b.n	80036b6 <HAL_UART_Receive+0x142>
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	000001ff 	.word	0x000001ff

080036d4 <UART_CheckIdleState>:
{
 80036d4:	b530      	push	{r4, r5, lr}
 80036d6:	b083      	sub	sp, #12
 80036d8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	238c      	movs	r3, #140	; 0x8c
 80036dc:	2200      	movs	r2, #0
 80036de:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80036e0:	f7fd fd14 	bl	800110c <HAL_GetTick>
 80036e4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	0713      	lsls	r3, r2, #28
 80036ec:	d40f      	bmi.n	800370e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	075b      	lsls	r3, r3, #29
 80036f4:	d418      	bmi.n	8003728 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80036f6:	2320      	movs	r3, #32
 80036f8:	2284      	movs	r2, #132	; 0x84
 80036fa:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036fc:	3204      	adds	r2, #4
 80036fe:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	2300      	movs	r3, #0
 8003702:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003704:	3a08      	subs	r2, #8
 8003706:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003708:	2000      	movs	r0, #0
}
 800370a:	b003      	add	sp, #12
 800370c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370e:	2180      	movs	r1, #128	; 0x80
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <UART_CheckIdleState+0x70>)
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	0003      	movs	r3, r0
 8003716:	2200      	movs	r2, #0
 8003718:	0389      	lsls	r1, r1, #14
 800371a:	0020      	movs	r0, r4
 800371c:	f7ff feb8 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 8003720:	2800      	cmp	r0, #0
 8003722:	d0e4      	beq.n	80036ee <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003724:	2003      	movs	r0, #3
 8003726:	e7f0      	b.n	800370a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <UART_CheckIdleState+0x70>)
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	002b      	movs	r3, r5
 8003730:	2200      	movs	r2, #0
 8003732:	03c9      	lsls	r1, r1, #15
 8003734:	0020      	movs	r0, r4
 8003736:	f7ff feab 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 800373a:	2800      	cmp	r0, #0
 800373c:	d0db      	beq.n	80036f6 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 800373e:	2003      	movs	r0, #3
 8003740:	e7e3      	b.n	800370a <UART_CheckIdleState+0x36>
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	01ffffff 	.word	0x01ffffff

08003748 <HAL_UART_Init>:
{
 8003748:	b510      	push	{r4, lr}
 800374a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800374c:	d030      	beq.n	80037b0 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	2384      	movs	r3, #132	; 0x84
 8003750:	58c3      	ldr	r3, [r0, r3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003756:	2384      	movs	r3, #132	; 0x84
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	438b      	bics	r3, r1
 8003764:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003766:	0020      	movs	r0, r4
 8003768:	f7ff fd3e 	bl	80031e8 <UART_SetConfig>
 800376c:	2801      	cmp	r0, #1
 800376e:	d014      	beq.n	800379a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	6853      	ldr	r3, [r2, #4]
 800377a:	490e      	ldr	r1, [pc, #56]	; (80037b4 <HAL_UART_Init+0x6c>)
 800377c:	400b      	ands	r3, r1
 800377e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	6893      	ldr	r3, [r2, #8]
 8003784:	212a      	movs	r1, #42	; 0x2a
 8003786:	438b      	bics	r3, r1
 8003788:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	6813      	ldr	r3, [r2, #0]
 800378e:	3929      	subs	r1, #41	; 0x29
 8003790:	430b      	orrs	r3, r1
 8003792:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003794:	0020      	movs	r0, r4
 8003796:	f7ff ff9d 	bl	80036d4 <UART_CheckIdleState>
}
 800379a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800379c:	3380      	adds	r3, #128	; 0x80
 800379e:	2200      	movs	r2, #0
 80037a0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80037a2:	f7fd fb8f 	bl	8000ec4 <HAL_UART_MspInit>
 80037a6:	e7d6      	b.n	8003756 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7ff fe01 	bl	80033b0 <UART_AdvFeatureConfig>
 80037ae:	e7e2      	b.n	8003776 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
 80037b2:	e7f2      	b.n	800379a <HAL_UART_Init+0x52>
 80037b4:	ffffb7ff 	.word	0xffffb7ff

080037b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037bc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80037c2:	3301      	adds	r3, #1
 80037c4:	226a      	movs	r2, #106	; 0x6a
 80037c6:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80037c8:	3a02      	subs	r2, #2
 80037ca:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037ce:	6802      	ldr	r2, [r0, #0]
 80037d0:	6895      	ldr	r5, [r2, #8]
 80037d2:	0e6d      	lsrs	r5, r5, #25
 80037d4:	2307      	movs	r3, #7
 80037d6:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	0f52      	lsrs	r2, r2, #29
 80037dc:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037de:	4f08      	ldr	r7, [pc, #32]	; (8003800 <UARTEx_SetNbDataToProcess+0x48>)
 80037e0:	5cf8      	ldrb	r0, [r7, r3]
 80037e2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037e4:	4e07      	ldr	r6, [pc, #28]	; (8003804 <UARTEx_SetNbDataToProcess+0x4c>)
 80037e6:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037e8:	f7fc fd22 	bl	8000230 <__divsi3>
 80037ec:	236a      	movs	r3, #106	; 0x6a
 80037ee:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037f0:	5d78      	ldrb	r0, [r7, r5]
 80037f2:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037f4:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037f6:	f7fc fd1b 	bl	8000230 <__divsi3>
 80037fa:	2368      	movs	r3, #104	; 0x68
 80037fc:	52e0      	strh	r0, [r4, r3]
}
 80037fe:	e7e5      	b.n	80037cc <UARTEx_SetNbDataToProcess+0x14>
 8003800:	08004dbc 	.word	0x08004dbc
 8003804:	08004db4 	.word	0x08004db4

08003808 <HAL_UARTEx_WakeupCallback>:
}
 8003808:	4770      	bx	lr

0800380a <HAL_UARTEx_RxFifoFullCallback>:
}
 800380a:	4770      	bx	lr

0800380c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800380c:	4770      	bx	lr
	...

08003810 <HAL_UARTEx_DisableFifoMode>:
{
 8003810:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	5cc3      	ldrb	r3, [r0, r3]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d015      	beq.n	8003846 <HAL_UARTEx_DisableFifoMode+0x36>
 800381a:	2480      	movs	r4, #128	; 0x80
 800381c:	2601      	movs	r6, #1
 800381e:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	2584      	movs	r5, #132	; 0x84
 8003822:	2324      	movs	r3, #36	; 0x24
 8003824:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003826:	6802      	ldr	r2, [r0, #0]
 8003828:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800382a:	6811      	ldr	r1, [r2, #0]
 800382c:	43b1      	bics	r1, r6
 800382e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003830:	4a06      	ldr	r2, [pc, #24]	; (800384c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003832:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003834:	2200      	movs	r2, #0
 8003836:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003838:	6801      	ldr	r1, [r0, #0]
 800383a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800383c:	2320      	movs	r3, #32
 800383e:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003840:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003842:	2000      	movs	r0, #0
}
 8003844:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003846:	2002      	movs	r0, #2
 8003848:	e7fc      	b.n	8003844 <HAL_UARTEx_DisableFifoMode+0x34>
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	dfffffff 	.word	0xdfffffff

08003850 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	0004      	movs	r4, r0
 8003854:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	5cc3      	ldrb	r3, [r0, r3]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d01b      	beq.n	8003896 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800385e:	2580      	movs	r5, #128	; 0x80
 8003860:	2001      	movs	r0, #1
 8003862:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	2684      	movs	r6, #132	; 0x84
 8003866:	2324      	movs	r3, #36	; 0x24
 8003868:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	4381      	bics	r1, r0
 8003872:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	6883      	ldr	r3, [r0, #8]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	08d9      	lsrs	r1, r3, #3
 800387c:	4311      	orrs	r1, r2
 800387e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003880:	0020      	movs	r0, r4
 8003882:	f7ff ff99 	bl	80037b8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800388a:	2320      	movs	r3, #32
 800388c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800388e:	2300      	movs	r3, #0
 8003890:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003892:	2000      	movs	r0, #0
}
 8003894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003896:	2002      	movs	r0, #2
 8003898:	e7fc      	b.n	8003894 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800389c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	0004      	movs	r4, r0
 80038a0:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	5c82      	ldrb	r2, [r0, r2]
 80038a6:	2a01      	cmp	r2, #1
 80038a8:	d01b      	beq.n	80038e2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80038aa:	2580      	movs	r5, #128	; 0x80
 80038ac:	2001      	movs	r0, #1
 80038ae:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	2684      	movs	r6, #132	; 0x84
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80038ba:	6811      	ldr	r1, [r2, #0]
 80038bc:	4381      	bics	r1, r0
 80038be:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	6891      	ldr	r1, [r2, #8]
 80038c4:	4808      	ldr	r0, [pc, #32]	; (80038e8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80038c6:	4001      	ands	r1, r0
 80038c8:	4319      	orrs	r1, r3
 80038ca:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80038cc:	0020      	movs	r0, r4
 80038ce:	f7ff ff73 	bl	80037b8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038d6:	2320      	movs	r3, #32
 80038d8:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80038da:	2300      	movs	r3, #0
 80038dc:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80038de:	2000      	movs	r0, #0
}
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80038e2:	2002      	movs	r0, #2
 80038e4:	e7fc      	b.n	80038e0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	f1ffffff 	.word	0xf1ffffff

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	2000000c 	.word	0x2000000c

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	2600      	movs	r6, #0
 80038fc:	4d0c      	ldr	r5, [pc, #48]	; (8003930 <__libc_init_array+0x38>)
 80038fe:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	2600      	movs	r6, #0
 800390a:	f001 f951 	bl	8004bb0 <_init>
 800390e:	4d0a      	ldr	r5, [pc, #40]	; (8003938 <__libc_init_array+0x40>)
 8003910:	4c0a      	ldr	r4, [pc, #40]	; (800393c <__libc_init_array+0x44>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	00b3      	lsls	r3, r6, #2
 800391e:	58eb      	ldr	r3, [r5, r3]
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	00b3      	lsls	r3, r6, #2
 8003928:	58eb      	ldr	r3, [r5, r3]
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08004e5c 	.word	0x08004e5c
 8003934:	08004e5c 	.word	0x08004e5c
 8003938:	08004e5c 	.word	0x08004e5c
 800393c:	08004e60 	.word	0x08004e60

08003940 <memcpy>:
 8003940:	2300      	movs	r3, #0
 8003942:	b510      	push	{r4, lr}
 8003944:	429a      	cmp	r2, r3
 8003946:	d100      	bne.n	800394a <memcpy+0xa>
 8003948:	bd10      	pop	{r4, pc}
 800394a:	5ccc      	ldrb	r4, [r1, r3]
 800394c:	54c4      	strb	r4, [r0, r3]
 800394e:	3301      	adds	r3, #1
 8003950:	e7f8      	b.n	8003944 <memcpy+0x4>

08003952 <memset>:
 8003952:	0003      	movs	r3, r0
 8003954:	1882      	adds	r2, r0, r2
 8003956:	4293      	cmp	r3, r2
 8003958:	d100      	bne.n	800395c <memset+0xa>
 800395a:	4770      	bx	lr
 800395c:	7019      	strb	r1, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	e7f9      	b.n	8003956 <memset+0x4>
	...

08003964 <iprintf>:
 8003964:	b40f      	push	{r0, r1, r2, r3}
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <iprintf+0x30>)
 8003968:	b513      	push	{r0, r1, r4, lr}
 800396a:	681c      	ldr	r4, [r3, #0]
 800396c:	2c00      	cmp	r4, #0
 800396e:	d005      	beq.n	800397c <iprintf+0x18>
 8003970:	69a3      	ldr	r3, [r4, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <iprintf+0x18>
 8003976:	0020      	movs	r0, r4
 8003978:	f000 fb4e 	bl	8004018 <__sinit>
 800397c:	ab05      	add	r3, sp, #20
 800397e:	0020      	movs	r0, r4
 8003980:	9a04      	ldr	r2, [sp, #16]
 8003982:	68a1      	ldr	r1, [r4, #8]
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	f000 fd6b 	bl	8004460 <_vfiprintf_r>
 800398a:	bc16      	pop	{r1, r2, r4}
 800398c:	bc08      	pop	{r3}
 800398e:	b004      	add	sp, #16
 8003990:	4718      	bx	r3
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	2000000c 	.word	0x2000000c

08003998 <_puts_r>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	0005      	movs	r5, r0
 800399c:	000e      	movs	r6, r1
 800399e:	2800      	cmp	r0, #0
 80039a0:	d004      	beq.n	80039ac <_puts_r+0x14>
 80039a2:	6983      	ldr	r3, [r0, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <_puts_r+0x14>
 80039a8:	f000 fb36 	bl	8004018 <__sinit>
 80039ac:	69ab      	ldr	r3, [r5, #24]
 80039ae:	68ac      	ldr	r4, [r5, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <_puts_r+0x22>
 80039b4:	0028      	movs	r0, r5
 80039b6:	f000 fb2f 	bl	8004018 <__sinit>
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <_puts_r+0xd8>)
 80039bc:	429c      	cmp	r4, r3
 80039be:	d122      	bne.n	8003a06 <_puts_r+0x6e>
 80039c0:	686c      	ldr	r4, [r5, #4]
 80039c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c4:	07db      	lsls	r3, r3, #31
 80039c6:	d405      	bmi.n	80039d4 <_puts_r+0x3c>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	059b      	lsls	r3, r3, #22
 80039cc:	d402      	bmi.n	80039d4 <_puts_r+0x3c>
 80039ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d0:	f000 fbc3 	bl	800415a <__retarget_lock_acquire_recursive>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	071b      	lsls	r3, r3, #28
 80039d8:	d502      	bpl.n	80039e0 <_puts_r+0x48>
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d129      	bne.n	8003a34 <_puts_r+0x9c>
 80039e0:	0021      	movs	r1, r4
 80039e2:	0028      	movs	r0, r5
 80039e4:	f000 f972 	bl	8003ccc <__swsetup_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d023      	beq.n	8003a34 <_puts_r+0x9c>
 80039ec:	2501      	movs	r5, #1
 80039ee:	426d      	negs	r5, r5
 80039f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039f2:	07db      	lsls	r3, r3, #31
 80039f4:	d405      	bmi.n	8003a02 <_puts_r+0x6a>
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	059b      	lsls	r3, r3, #22
 80039fa:	d402      	bmi.n	8003a02 <_puts_r+0x6a>
 80039fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039fe:	f000 fbad 	bl	800415c <__retarget_lock_release_recursive>
 8003a02:	0028      	movs	r0, r5
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <_puts_r+0xdc>)
 8003a08:	429c      	cmp	r4, r3
 8003a0a:	d101      	bne.n	8003a10 <_puts_r+0x78>
 8003a0c:	68ac      	ldr	r4, [r5, #8]
 8003a0e:	e7d8      	b.n	80039c2 <_puts_r+0x2a>
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <_puts_r+0xe0>)
 8003a12:	429c      	cmp	r4, r3
 8003a14:	d1d5      	bne.n	80039c2 <_puts_r+0x2a>
 8003a16:	68ec      	ldr	r4, [r5, #12]
 8003a18:	e7d3      	b.n	80039c2 <_puts_r+0x2a>
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	60a3      	str	r3, [r4, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	da04      	bge.n	8003a2c <_puts_r+0x94>
 8003a22:	69a2      	ldr	r2, [r4, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	dc16      	bgt.n	8003a56 <_puts_r+0xbe>
 8003a28:	290a      	cmp	r1, #10
 8003a2a:	d014      	beq.n	8003a56 <_puts_r+0xbe>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	6022      	str	r2, [r4, #0]
 8003a32:	7019      	strb	r1, [r3, #0]
 8003a34:	68a3      	ldr	r3, [r4, #8]
 8003a36:	7831      	ldrb	r1, [r6, #0]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	d1ed      	bne.n	8003a1a <_puts_r+0x82>
 8003a3e:	60a3      	str	r3, [r4, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da0f      	bge.n	8003a64 <_puts_r+0xcc>
 8003a44:	0028      	movs	r0, r5
 8003a46:	0022      	movs	r2, r4
 8003a48:	310a      	adds	r1, #10
 8003a4a:	f000 f8e9 	bl	8003c20 <__swbuf_r>
 8003a4e:	250a      	movs	r5, #10
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d1cd      	bne.n	80039f0 <_puts_r+0x58>
 8003a54:	e7ca      	b.n	80039ec <_puts_r+0x54>
 8003a56:	0022      	movs	r2, r4
 8003a58:	0028      	movs	r0, r5
 8003a5a:	f000 f8e1 	bl	8003c20 <__swbuf_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	d1e8      	bne.n	8003a34 <_puts_r+0x9c>
 8003a62:	e7c3      	b.n	80039ec <_puts_r+0x54>
 8003a64:	250a      	movs	r5, #10
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	6022      	str	r2, [r4, #0]
 8003a6c:	701d      	strb	r5, [r3, #0]
 8003a6e:	e7bf      	b.n	80039f0 <_puts_r+0x58>
 8003a70:	08004de8 	.word	0x08004de8
 8003a74:	08004e08 	.word	0x08004e08
 8003a78:	08004dc8 	.word	0x08004dc8

08003a7c <puts>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <puts+0x10>)
 8003a80:	0001      	movs	r1, r0
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	f7ff ff88 	bl	8003998 <_puts_r>
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <setvbuf>:
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	001d      	movs	r5, r3
 8003a94:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <setvbuf+0x17c>)
 8003a96:	b085      	sub	sp, #20
 8003a98:	681e      	ldr	r6, [r3, #0]
 8003a9a:	0004      	movs	r4, r0
 8003a9c:	000f      	movs	r7, r1
 8003a9e:	9200      	str	r2, [sp, #0]
 8003aa0:	2e00      	cmp	r6, #0
 8003aa2:	d005      	beq.n	8003ab0 <setvbuf+0x20>
 8003aa4:	69b3      	ldr	r3, [r6, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <setvbuf+0x20>
 8003aaa:	0030      	movs	r0, r6
 8003aac:	f000 fab4 	bl	8004018 <__sinit>
 8003ab0:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <setvbuf+0x180>)
 8003ab2:	429c      	cmp	r4, r3
 8003ab4:	d161      	bne.n	8003b7a <setvbuf+0xea>
 8003ab6:	6874      	ldr	r4, [r6, #4]
 8003ab8:	9b00      	ldr	r3, [sp, #0]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d005      	beq.n	8003aca <setvbuf+0x3a>
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d900      	bls.n	8003ac4 <setvbuf+0x34>
 8003ac2:	e09d      	b.n	8003c00 <setvbuf+0x170>
 8003ac4:	2d00      	cmp	r5, #0
 8003ac6:	da00      	bge.n	8003aca <setvbuf+0x3a>
 8003ac8:	e09a      	b.n	8003c00 <setvbuf+0x170>
 8003aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003acc:	07db      	lsls	r3, r3, #31
 8003ace:	d405      	bmi.n	8003adc <setvbuf+0x4c>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	059b      	lsls	r3, r3, #22
 8003ad4:	d402      	bmi.n	8003adc <setvbuf+0x4c>
 8003ad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ad8:	f000 fb3f 	bl	800415a <__retarget_lock_acquire_recursive>
 8003adc:	0021      	movs	r1, r4
 8003ade:	0030      	movs	r0, r6
 8003ae0:	f000 f9f8 	bl	8003ed4 <_fflush_r>
 8003ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d008      	beq.n	8003afc <setvbuf+0x6c>
 8003aea:	0023      	movs	r3, r4
 8003aec:	3344      	adds	r3, #68	; 0x44
 8003aee:	4299      	cmp	r1, r3
 8003af0:	d002      	beq.n	8003af8 <setvbuf+0x68>
 8003af2:	0030      	movs	r0, r6
 8003af4:	f000 fbaa 	bl	800424c <_free_r>
 8003af8:	2300      	movs	r3, #0
 8003afa:	6363      	str	r3, [r4, #52]	; 0x34
 8003afc:	2300      	movs	r3, #0
 8003afe:	61a3      	str	r3, [r4, #24]
 8003b00:	6063      	str	r3, [r4, #4]
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	d503      	bpl.n	8003b10 <setvbuf+0x80>
 8003b08:	0030      	movs	r0, r6
 8003b0a:	6921      	ldr	r1, [r4, #16]
 8003b0c:	f000 fb9e 	bl	800424c <_free_r>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	4a40      	ldr	r2, [pc, #256]	; (8003c14 <setvbuf+0x184>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	9b00      	ldr	r3, [sp, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d100      	bne.n	8003b20 <setvbuf+0x90>
 8003b1e:	e069      	b.n	8003bf4 <setvbuf+0x164>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	0021      	movs	r1, r4
 8003b24:	0030      	movs	r0, r6
 8003b26:	aa02      	add	r2, sp, #8
 8003b28:	f000 fb1a 	bl	8004160 <__swhatbuf_r>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	4303      	orrs	r3, r0
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	2d00      	cmp	r5, #0
 8003b34:	d12b      	bne.n	8003b8e <setvbuf+0xfe>
 8003b36:	9d02      	ldr	r5, [sp, #8]
 8003b38:	0028      	movs	r0, r5
 8003b3a:	f000 fb7d 	bl	8004238 <malloc>
 8003b3e:	1e07      	subs	r7, r0, #0
 8003b40:	d153      	bne.n	8003bea <setvbuf+0x15a>
 8003b42:	9b02      	ldr	r3, [sp, #8]
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	42ab      	cmp	r3, r5
 8003b48:	d149      	bne.n	8003bde <setvbuf+0x14e>
 8003b4a:	2501      	movs	r5, #1
 8003b4c:	426d      	negs	r5, r5
 8003b4e:	2302      	movs	r3, #2
 8003b50:	89a2      	ldrh	r2, [r4, #12]
 8003b52:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003b54:	4313      	orrs	r3, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	60a2      	str	r2, [r4, #8]
 8003b5a:	0022      	movs	r2, r4
 8003b5c:	3247      	adds	r2, #71	; 0x47
 8003b5e:	6022      	str	r2, [r4, #0]
 8003b60:	6122      	str	r2, [r4, #16]
 8003b62:	2201      	movs	r2, #1
 8003b64:	b21b      	sxth	r3, r3
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	6162      	str	r2, [r4, #20]
 8003b6a:	4211      	tst	r1, r2
 8003b6c:	d134      	bne.n	8003bd8 <setvbuf+0x148>
 8003b6e:	059b      	lsls	r3, r3, #22
 8003b70:	d432      	bmi.n	8003bd8 <setvbuf+0x148>
 8003b72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b74:	f000 faf2 	bl	800415c <__retarget_lock_release_recursive>
 8003b78:	e02e      	b.n	8003bd8 <setvbuf+0x148>
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <setvbuf+0x188>)
 8003b7c:	429c      	cmp	r4, r3
 8003b7e:	d101      	bne.n	8003b84 <setvbuf+0xf4>
 8003b80:	68b4      	ldr	r4, [r6, #8]
 8003b82:	e799      	b.n	8003ab8 <setvbuf+0x28>
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <setvbuf+0x18c>)
 8003b86:	429c      	cmp	r4, r3
 8003b88:	d196      	bne.n	8003ab8 <setvbuf+0x28>
 8003b8a:	68f4      	ldr	r4, [r6, #12]
 8003b8c:	e794      	b.n	8003ab8 <setvbuf+0x28>
 8003b8e:	2f00      	cmp	r7, #0
 8003b90:	d0d2      	beq.n	8003b38 <setvbuf+0xa8>
 8003b92:	69b3      	ldr	r3, [r6, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <setvbuf+0x10e>
 8003b98:	0030      	movs	r0, r6
 8003b9a:	f000 fa3d 	bl	8004018 <__sinit>
 8003b9e:	9b00      	ldr	r3, [sp, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <setvbuf+0x11a>
 8003ba4:	89a2      	ldrh	r2, [r4, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	89a2      	ldrh	r2, [r4, #12]
 8003bac:	2308      	movs	r3, #8
 8003bae:	0011      	movs	r1, r2
 8003bb0:	6027      	str	r7, [r4, #0]
 8003bb2:	6127      	str	r7, [r4, #16]
 8003bb4:	6165      	str	r5, [r4, #20]
 8003bb6:	4019      	ands	r1, r3
 8003bb8:	421a      	tst	r2, r3
 8003bba:	d01f      	beq.n	8003bfc <setvbuf+0x16c>
 8003bbc:	07d3      	lsls	r3, r2, #31
 8003bbe:	d51b      	bpl.n	8003bf8 <setvbuf+0x168>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	426d      	negs	r5, r5
 8003bc4:	60a3      	str	r3, [r4, #8]
 8003bc6:	61a5      	str	r5, [r4, #24]
 8003bc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003bca:	2301      	movs	r3, #1
 8003bcc:	000d      	movs	r5, r1
 8003bce:	401d      	ands	r5, r3
 8003bd0:	4219      	tst	r1, r3
 8003bd2:	d118      	bne.n	8003c06 <setvbuf+0x176>
 8003bd4:	0593      	lsls	r3, r2, #22
 8003bd6:	d5cc      	bpl.n	8003b72 <setvbuf+0xe2>
 8003bd8:	0028      	movs	r0, r5
 8003bda:	b005      	add	sp, #20
 8003bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bde:	9801      	ldr	r0, [sp, #4]
 8003be0:	f000 fb2a 	bl	8004238 <malloc>
 8003be4:	9d01      	ldr	r5, [sp, #4]
 8003be6:	1e07      	subs	r7, r0, #0
 8003be8:	d0af      	beq.n	8003b4a <setvbuf+0xba>
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	89a2      	ldrh	r2, [r4, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	e7ce      	b.n	8003b92 <setvbuf+0x102>
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	e7aa      	b.n	8003b4e <setvbuf+0xbe>
 8003bf8:	60a5      	str	r5, [r4, #8]
 8003bfa:	e7e5      	b.n	8003bc8 <setvbuf+0x138>
 8003bfc:	60a1      	str	r1, [r4, #8]
 8003bfe:	e7e3      	b.n	8003bc8 <setvbuf+0x138>
 8003c00:	2501      	movs	r5, #1
 8003c02:	426d      	negs	r5, r5
 8003c04:	e7e8      	b.n	8003bd8 <setvbuf+0x148>
 8003c06:	2500      	movs	r5, #0
 8003c08:	e7e6      	b.n	8003bd8 <setvbuf+0x148>
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	2000000c 	.word	0x2000000c
 8003c10:	08004de8 	.word	0x08004de8
 8003c14:	fffff35c 	.word	0xfffff35c
 8003c18:	08004e08 	.word	0x08004e08
 8003c1c:	08004dc8 	.word	0x08004dc8

08003c20 <__swbuf_r>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	0005      	movs	r5, r0
 8003c24:	000e      	movs	r6, r1
 8003c26:	0014      	movs	r4, r2
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d004      	beq.n	8003c36 <__swbuf_r+0x16>
 8003c2c:	6983      	ldr	r3, [r0, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <__swbuf_r+0x16>
 8003c32:	f000 f9f1 	bl	8004018 <__sinit>
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <__swbuf_r+0xa0>)
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	d12e      	bne.n	8003c9a <__swbuf_r+0x7a>
 8003c3c:	686c      	ldr	r4, [r5, #4]
 8003c3e:	69a3      	ldr	r3, [r4, #24]
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	071b      	lsls	r3, r3, #28
 8003c46:	d532      	bpl.n	8003cae <__swbuf_r+0x8e>
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02f      	beq.n	8003cae <__swbuf_r+0x8e>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	6922      	ldr	r2, [r4, #16]
 8003c52:	b2f7      	uxtb	r7, r6
 8003c54:	1a98      	subs	r0, r3, r2
 8003c56:	6963      	ldr	r3, [r4, #20]
 8003c58:	b2f6      	uxtb	r6, r6
 8003c5a:	4283      	cmp	r3, r0
 8003c5c:	dc05      	bgt.n	8003c6a <__swbuf_r+0x4a>
 8003c5e:	0021      	movs	r1, r4
 8003c60:	0028      	movs	r0, r5
 8003c62:	f000 f937 	bl	8003ed4 <_fflush_r>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d127      	bne.n	8003cba <__swbuf_r+0x9a>
 8003c6a:	68a3      	ldr	r3, [r4, #8]
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	6022      	str	r2, [r4, #0]
 8003c78:	701f      	strb	r7, [r3, #0]
 8003c7a:	6963      	ldr	r3, [r4, #20]
 8003c7c:	4283      	cmp	r3, r0
 8003c7e:	d004      	beq.n	8003c8a <__swbuf_r+0x6a>
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	07db      	lsls	r3, r3, #31
 8003c84:	d507      	bpl.n	8003c96 <__swbuf_r+0x76>
 8003c86:	2e0a      	cmp	r6, #10
 8003c88:	d105      	bne.n	8003c96 <__swbuf_r+0x76>
 8003c8a:	0021      	movs	r1, r4
 8003c8c:	0028      	movs	r0, r5
 8003c8e:	f000 f921 	bl	8003ed4 <_fflush_r>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d111      	bne.n	8003cba <__swbuf_r+0x9a>
 8003c96:	0030      	movs	r0, r6
 8003c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <__swbuf_r+0xa4>)
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	d101      	bne.n	8003ca4 <__swbuf_r+0x84>
 8003ca0:	68ac      	ldr	r4, [r5, #8]
 8003ca2:	e7cc      	b.n	8003c3e <__swbuf_r+0x1e>
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <__swbuf_r+0xa8>)
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d1c9      	bne.n	8003c3e <__swbuf_r+0x1e>
 8003caa:	68ec      	ldr	r4, [r5, #12]
 8003cac:	e7c7      	b.n	8003c3e <__swbuf_r+0x1e>
 8003cae:	0021      	movs	r1, r4
 8003cb0:	0028      	movs	r0, r5
 8003cb2:	f000 f80b 	bl	8003ccc <__swsetup_r>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d0c9      	beq.n	8003c4e <__swbuf_r+0x2e>
 8003cba:	2601      	movs	r6, #1
 8003cbc:	4276      	negs	r6, r6
 8003cbe:	e7ea      	b.n	8003c96 <__swbuf_r+0x76>
 8003cc0:	08004de8 	.word	0x08004de8
 8003cc4:	08004e08 	.word	0x08004e08
 8003cc8:	08004dc8 	.word	0x08004dc8

08003ccc <__swsetup_r>:
 8003ccc:	4b37      	ldr	r3, [pc, #220]	; (8003dac <__swsetup_r+0xe0>)
 8003cce:	b570      	push	{r4, r5, r6, lr}
 8003cd0:	681d      	ldr	r5, [r3, #0]
 8003cd2:	0006      	movs	r6, r0
 8003cd4:	000c      	movs	r4, r1
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	d005      	beq.n	8003ce6 <__swsetup_r+0x1a>
 8003cda:	69ab      	ldr	r3, [r5, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <__swsetup_r+0x1a>
 8003ce0:	0028      	movs	r0, r5
 8003ce2:	f000 f999 	bl	8004018 <__sinit>
 8003ce6:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <__swsetup_r+0xe4>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d10f      	bne.n	8003d0c <__swsetup_r+0x40>
 8003cec:	686c      	ldr	r4, [r5, #4]
 8003cee:	230c      	movs	r3, #12
 8003cf0:	5ee2      	ldrsh	r2, [r4, r3]
 8003cf2:	b293      	uxth	r3, r2
 8003cf4:	0711      	lsls	r1, r2, #28
 8003cf6:	d42d      	bmi.n	8003d54 <__swsetup_r+0x88>
 8003cf8:	06d9      	lsls	r1, r3, #27
 8003cfa:	d411      	bmi.n	8003d20 <__swsetup_r+0x54>
 8003cfc:	2309      	movs	r3, #9
 8003cfe:	2001      	movs	r0, #1
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	3337      	adds	r3, #55	; 0x37
 8003d04:	4313      	orrs	r3, r2
 8003d06:	81a3      	strh	r3, [r4, #12]
 8003d08:	4240      	negs	r0, r0
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <__swsetup_r+0xe8>)
 8003d0e:	429c      	cmp	r4, r3
 8003d10:	d101      	bne.n	8003d16 <__swsetup_r+0x4a>
 8003d12:	68ac      	ldr	r4, [r5, #8]
 8003d14:	e7eb      	b.n	8003cee <__swsetup_r+0x22>
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <__swsetup_r+0xec>)
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	d1e8      	bne.n	8003cee <__swsetup_r+0x22>
 8003d1c:	68ec      	ldr	r4, [r5, #12]
 8003d1e:	e7e6      	b.n	8003cee <__swsetup_r+0x22>
 8003d20:	075b      	lsls	r3, r3, #29
 8003d22:	d513      	bpl.n	8003d4c <__swsetup_r+0x80>
 8003d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d26:	2900      	cmp	r1, #0
 8003d28:	d008      	beq.n	8003d3c <__swsetup_r+0x70>
 8003d2a:	0023      	movs	r3, r4
 8003d2c:	3344      	adds	r3, #68	; 0x44
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	d002      	beq.n	8003d38 <__swsetup_r+0x6c>
 8003d32:	0030      	movs	r0, r6
 8003d34:	f000 fa8a 	bl	800424c <_free_r>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8003d3c:	2224      	movs	r2, #36	; 0x24
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	4393      	bics	r3, r2
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	2300      	movs	r3, #0
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	89a2      	ldrh	r2, [r4, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <__swsetup_r+0xa6>
 8003d5a:	21a0      	movs	r1, #160	; 0xa0
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	0089      	lsls	r1, r1, #2
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	400b      	ands	r3, r1
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <__swsetup_r+0xa6>
 8003d6a:	0021      	movs	r1, r4
 8003d6c:	0030      	movs	r0, r6
 8003d6e:	f000 fa1f 	bl	80041b0 <__smakebuf_r>
 8003d72:	220c      	movs	r2, #12
 8003d74:	5ea3      	ldrsh	r3, [r4, r2]
 8003d76:	2001      	movs	r0, #1
 8003d78:	001a      	movs	r2, r3
 8003d7a:	b299      	uxth	r1, r3
 8003d7c:	4002      	ands	r2, r0
 8003d7e:	4203      	tst	r3, r0
 8003d80:	d00f      	beq.n	8003da2 <__swsetup_r+0xd6>
 8003d82:	2200      	movs	r2, #0
 8003d84:	60a2      	str	r2, [r4, #8]
 8003d86:	6962      	ldr	r2, [r4, #20]
 8003d88:	4252      	negs	r2, r2
 8003d8a:	61a2      	str	r2, [r4, #24]
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	6922      	ldr	r2, [r4, #16]
 8003d90:	4282      	cmp	r2, r0
 8003d92:	d1ba      	bne.n	8003d0a <__swsetup_r+0x3e>
 8003d94:	060a      	lsls	r2, r1, #24
 8003d96:	d5b8      	bpl.n	8003d0a <__swsetup_r+0x3e>
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	3801      	subs	r0, #1
 8003da0:	e7b3      	b.n	8003d0a <__swsetup_r+0x3e>
 8003da2:	0788      	lsls	r0, r1, #30
 8003da4:	d400      	bmi.n	8003da8 <__swsetup_r+0xdc>
 8003da6:	6962      	ldr	r2, [r4, #20]
 8003da8:	60a2      	str	r2, [r4, #8]
 8003daa:	e7ef      	b.n	8003d8c <__swsetup_r+0xc0>
 8003dac:	2000000c 	.word	0x2000000c
 8003db0:	08004de8 	.word	0x08004de8
 8003db4:	08004e08 	.word	0x08004e08
 8003db8:	08004dc8 	.word	0x08004dc8

08003dbc <__sflush_r>:
 8003dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dbe:	898b      	ldrh	r3, [r1, #12]
 8003dc0:	0005      	movs	r5, r0
 8003dc2:	000c      	movs	r4, r1
 8003dc4:	071a      	lsls	r2, r3, #28
 8003dc6:	d45f      	bmi.n	8003e88 <__sflush_r+0xcc>
 8003dc8:	684a      	ldr	r2, [r1, #4]
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	dc04      	bgt.n	8003dd8 <__sflush_r+0x1c>
 8003dce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	dc01      	bgt.n	8003dd8 <__sflush_r+0x1c>
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dd8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003dda:	2f00      	cmp	r7, #0
 8003ddc:	d0fa      	beq.n	8003dd4 <__sflush_r+0x18>
 8003dde:	2200      	movs	r2, #0
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	682e      	ldr	r6, [r5, #0]
 8003de4:	602a      	str	r2, [r5, #0]
 8003de6:	001a      	movs	r2, r3
 8003de8:	0149      	lsls	r1, r1, #5
 8003dea:	400a      	ands	r2, r1
 8003dec:	420b      	tst	r3, r1
 8003dee:	d034      	beq.n	8003e5a <__sflush_r+0x9e>
 8003df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	075b      	lsls	r3, r3, #29
 8003df6:	d506      	bpl.n	8003e06 <__sflush_r+0x4a>
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	1ac0      	subs	r0, r0, r3
 8003dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <__sflush_r+0x4a>
 8003e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e04:	1ac0      	subs	r0, r0, r3
 8003e06:	0002      	movs	r2, r0
 8003e08:	6a21      	ldr	r1, [r4, #32]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	0028      	movs	r0, r5
 8003e0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e10:	47b8      	blx	r7
 8003e12:	89a1      	ldrh	r1, [r4, #12]
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d106      	bne.n	8003e26 <__sflush_r+0x6a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	2b1d      	cmp	r3, #29
 8003e1c:	d831      	bhi.n	8003e82 <__sflush_r+0xc6>
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <__sflush_r+0x114>)
 8003e20:	40da      	lsrs	r2, r3
 8003e22:	07d3      	lsls	r3, r2, #31
 8003e24:	d52d      	bpl.n	8003e82 <__sflush_r+0xc6>
 8003e26:	2300      	movs	r3, #0
 8003e28:	6063      	str	r3, [r4, #4]
 8003e2a:	6923      	ldr	r3, [r4, #16]
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	04cb      	lsls	r3, r1, #19
 8003e30:	d505      	bpl.n	8003e3e <__sflush_r+0x82>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	d102      	bne.n	8003e3c <__sflush_r+0x80>
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d100      	bne.n	8003e3e <__sflush_r+0x82>
 8003e3c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e40:	602e      	str	r6, [r5, #0]
 8003e42:	2900      	cmp	r1, #0
 8003e44:	d0c6      	beq.n	8003dd4 <__sflush_r+0x18>
 8003e46:	0023      	movs	r3, r4
 8003e48:	3344      	adds	r3, #68	; 0x44
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	d002      	beq.n	8003e54 <__sflush_r+0x98>
 8003e4e:	0028      	movs	r0, r5
 8003e50:	f000 f9fc 	bl	800424c <_free_r>
 8003e54:	2000      	movs	r0, #0
 8003e56:	6360      	str	r0, [r4, #52]	; 0x34
 8003e58:	e7bd      	b.n	8003dd6 <__sflush_r+0x1a>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	0028      	movs	r0, r5
 8003e5e:	6a21      	ldr	r1, [r4, #32]
 8003e60:	47b8      	blx	r7
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	d1c5      	bne.n	8003df2 <__sflush_r+0x36>
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0c2      	beq.n	8003df2 <__sflush_r+0x36>
 8003e6c:	2b1d      	cmp	r3, #29
 8003e6e:	d001      	beq.n	8003e74 <__sflush_r+0xb8>
 8003e70:	2b16      	cmp	r3, #22
 8003e72:	d101      	bne.n	8003e78 <__sflush_r+0xbc>
 8003e74:	602e      	str	r6, [r5, #0]
 8003e76:	e7ad      	b.n	8003dd4 <__sflush_r+0x18>
 8003e78:	2340      	movs	r3, #64	; 0x40
 8003e7a:	89a2      	ldrh	r2, [r4, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	e7a9      	b.n	8003dd6 <__sflush_r+0x1a>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	430b      	orrs	r3, r1
 8003e86:	e7fa      	b.n	8003e7e <__sflush_r+0xc2>
 8003e88:	690f      	ldr	r7, [r1, #16]
 8003e8a:	2f00      	cmp	r7, #0
 8003e8c:	d0a2      	beq.n	8003dd4 <__sflush_r+0x18>
 8003e8e:	680a      	ldr	r2, [r1, #0]
 8003e90:	600f      	str	r7, [r1, #0]
 8003e92:	1bd2      	subs	r2, r2, r7
 8003e94:	9201      	str	r2, [sp, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	079b      	lsls	r3, r3, #30
 8003e9a:	d100      	bne.n	8003e9e <__sflush_r+0xe2>
 8003e9c:	694a      	ldr	r2, [r1, #20]
 8003e9e:	60a2      	str	r2, [r4, #8]
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	dc00      	bgt.n	8003ea8 <__sflush_r+0xec>
 8003ea6:	e795      	b.n	8003dd4 <__sflush_r+0x18>
 8003ea8:	003a      	movs	r2, r7
 8003eaa:	0028      	movs	r0, r5
 8003eac:	9b01      	ldr	r3, [sp, #4]
 8003eae:	6a21      	ldr	r1, [r4, #32]
 8003eb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eb2:	47b0      	blx	r6
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	dc06      	bgt.n	8003ec6 <__sflush_r+0x10a>
 8003eb8:	2340      	movs	r3, #64	; 0x40
 8003eba:	2001      	movs	r0, #1
 8003ebc:	89a2      	ldrh	r2, [r4, #12]
 8003ebe:	4240      	negs	r0, r0
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	e787      	b.n	8003dd6 <__sflush_r+0x1a>
 8003ec6:	9b01      	ldr	r3, [sp, #4]
 8003ec8:	183f      	adds	r7, r7, r0
 8003eca:	1a1b      	subs	r3, r3, r0
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	e7e7      	b.n	8003ea0 <__sflush_r+0xe4>
 8003ed0:	20400001 	.word	0x20400001

08003ed4 <_fflush_r>:
 8003ed4:	690b      	ldr	r3, [r1, #16]
 8003ed6:	b570      	push	{r4, r5, r6, lr}
 8003ed8:	0005      	movs	r5, r0
 8003eda:	000c      	movs	r4, r1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <_fflush_r+0x12>
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d004      	beq.n	8003ef4 <_fflush_r+0x20>
 8003eea:	6983      	ldr	r3, [r0, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <_fflush_r+0x20>
 8003ef0:	f000 f892 	bl	8004018 <__sinit>
 8003ef4:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <_fflush_r+0x74>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d11b      	bne.n	8003f32 <_fflush_r+0x5e>
 8003efa:	686c      	ldr	r4, [r5, #4]
 8003efc:	220c      	movs	r2, #12
 8003efe:	5ea3      	ldrsh	r3, [r4, r2]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ed      	beq.n	8003ee0 <_fflush_r+0xc>
 8003f04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f06:	07d2      	lsls	r2, r2, #31
 8003f08:	d404      	bmi.n	8003f14 <_fflush_r+0x40>
 8003f0a:	059b      	lsls	r3, r3, #22
 8003f0c:	d402      	bmi.n	8003f14 <_fflush_r+0x40>
 8003f0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f10:	f000 f923 	bl	800415a <__retarget_lock_acquire_recursive>
 8003f14:	0028      	movs	r0, r5
 8003f16:	0021      	movs	r1, r4
 8003f18:	f7ff ff50 	bl	8003dbc <__sflush_r>
 8003f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1e:	0005      	movs	r5, r0
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d4de      	bmi.n	8003ee2 <_fflush_r+0xe>
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	059b      	lsls	r3, r3, #22
 8003f28:	d4db      	bmi.n	8003ee2 <_fflush_r+0xe>
 8003f2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2c:	f000 f916 	bl	800415c <__retarget_lock_release_recursive>
 8003f30:	e7d7      	b.n	8003ee2 <_fflush_r+0xe>
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <_fflush_r+0x78>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	d101      	bne.n	8003f3c <_fflush_r+0x68>
 8003f38:	68ac      	ldr	r4, [r5, #8]
 8003f3a:	e7df      	b.n	8003efc <_fflush_r+0x28>
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <_fflush_r+0x7c>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	d1dc      	bne.n	8003efc <_fflush_r+0x28>
 8003f42:	68ec      	ldr	r4, [r5, #12]
 8003f44:	e7da      	b.n	8003efc <_fflush_r+0x28>
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	08004de8 	.word	0x08004de8
 8003f4c:	08004e08 	.word	0x08004e08
 8003f50:	08004dc8 	.word	0x08004dc8

08003f54 <std>:
 8003f54:	2300      	movs	r3, #0
 8003f56:	b510      	push	{r4, lr}
 8003f58:	0004      	movs	r4, r0
 8003f5a:	6003      	str	r3, [r0, #0]
 8003f5c:	6043      	str	r3, [r0, #4]
 8003f5e:	6083      	str	r3, [r0, #8]
 8003f60:	8181      	strh	r1, [r0, #12]
 8003f62:	6643      	str	r3, [r0, #100]	; 0x64
 8003f64:	0019      	movs	r1, r3
 8003f66:	81c2      	strh	r2, [r0, #14]
 8003f68:	6103      	str	r3, [r0, #16]
 8003f6a:	6143      	str	r3, [r0, #20]
 8003f6c:	6183      	str	r3, [r0, #24]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	305c      	adds	r0, #92	; 0x5c
 8003f72:	f7ff fcee 	bl	8003952 <memset>
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <std+0x38>)
 8003f78:	6224      	str	r4, [r4, #32]
 8003f7a:	6263      	str	r3, [r4, #36]	; 0x24
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <std+0x3c>)
 8003f7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <std+0x40>)
 8003f82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <std+0x44>)
 8003f86:	6323      	str	r3, [r4, #48]	; 0x30
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	080049fd 	.word	0x080049fd
 8003f90:	08004a25 	.word	0x08004a25
 8003f94:	08004a5d 	.word	0x08004a5d
 8003f98:	08004a89 	.word	0x08004a89

08003f9c <_cleanup_r>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4902      	ldr	r1, [pc, #8]	; (8003fa8 <_cleanup_r+0xc>)
 8003fa0:	f000 f8ba 	bl	8004118 <_fwalk_reent>
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	08003ed5 	.word	0x08003ed5

08003fac <__sfmoreglue>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	2568      	movs	r5, #104	; 0x68
 8003fb0:	1e4a      	subs	r2, r1, #1
 8003fb2:	4355      	muls	r5, r2
 8003fb4:	000e      	movs	r6, r1
 8003fb6:	0029      	movs	r1, r5
 8003fb8:	3174      	adds	r1, #116	; 0x74
 8003fba:	f000 f9b3 	bl	8004324 <_malloc_r>
 8003fbe:	1e04      	subs	r4, r0, #0
 8003fc0:	d008      	beq.n	8003fd4 <__sfmoreglue+0x28>
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	002a      	movs	r2, r5
 8003fc6:	6001      	str	r1, [r0, #0]
 8003fc8:	6046      	str	r6, [r0, #4]
 8003fca:	300c      	adds	r0, #12
 8003fcc:	60a0      	str	r0, [r4, #8]
 8003fce:	3268      	adds	r2, #104	; 0x68
 8003fd0:	f7ff fcbf 	bl	8003952 <memset>
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}

08003fd8 <__sfp_lock_acquire>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <__sfp_lock_acquire+0xc>)
 8003fdc:	f000 f8bd 	bl	800415a <__retarget_lock_acquire_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	200005dd 	.word	0x200005dd

08003fe8 <__sfp_lock_release>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <__sfp_lock_release+0xc>)
 8003fec:	f000 f8b6 	bl	800415c <__retarget_lock_release_recursive>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	200005dd 	.word	0x200005dd

08003ff8 <__sinit_lock_acquire>:
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4802      	ldr	r0, [pc, #8]	; (8004004 <__sinit_lock_acquire+0xc>)
 8003ffc:	f000 f8ad 	bl	800415a <__retarget_lock_acquire_recursive>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	200005de 	.word	0x200005de

08004008 <__sinit_lock_release>:
 8004008:	b510      	push	{r4, lr}
 800400a:	4802      	ldr	r0, [pc, #8]	; (8004014 <__sinit_lock_release+0xc>)
 800400c:	f000 f8a6 	bl	800415c <__retarget_lock_release_recursive>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	200005de 	.word	0x200005de

08004018 <__sinit>:
 8004018:	b513      	push	{r0, r1, r4, lr}
 800401a:	0004      	movs	r4, r0
 800401c:	f7ff ffec 	bl	8003ff8 <__sinit_lock_acquire>
 8004020:	69a3      	ldr	r3, [r4, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <__sinit+0x14>
 8004026:	f7ff ffef 	bl	8004008 <__sinit_lock_release>
 800402a:	bd13      	pop	{r0, r1, r4, pc}
 800402c:	64a3      	str	r3, [r4, #72]	; 0x48
 800402e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004030:	6523      	str	r3, [r4, #80]	; 0x50
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <__sinit+0x68>)
 8004034:	4a13      	ldr	r2, [pc, #76]	; (8004084 <__sinit+0x6c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	62a2      	str	r2, [r4, #40]	; 0x28
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	42a3      	cmp	r3, r4
 800403e:	d101      	bne.n	8004044 <__sinit+0x2c>
 8004040:	2301      	movs	r3, #1
 8004042:	61a3      	str	r3, [r4, #24]
 8004044:	0020      	movs	r0, r4
 8004046:	f000 f81f 	bl	8004088 <__sfp>
 800404a:	6060      	str	r0, [r4, #4]
 800404c:	0020      	movs	r0, r4
 800404e:	f000 f81b 	bl	8004088 <__sfp>
 8004052:	60a0      	str	r0, [r4, #8]
 8004054:	0020      	movs	r0, r4
 8004056:	f000 f817 	bl	8004088 <__sfp>
 800405a:	2200      	movs	r2, #0
 800405c:	2104      	movs	r1, #4
 800405e:	60e0      	str	r0, [r4, #12]
 8004060:	6860      	ldr	r0, [r4, #4]
 8004062:	f7ff ff77 	bl	8003f54 <std>
 8004066:	2201      	movs	r2, #1
 8004068:	2109      	movs	r1, #9
 800406a:	68a0      	ldr	r0, [r4, #8]
 800406c:	f7ff ff72 	bl	8003f54 <std>
 8004070:	2202      	movs	r2, #2
 8004072:	2112      	movs	r1, #18
 8004074:	68e0      	ldr	r0, [r4, #12]
 8004076:	f7ff ff6d 	bl	8003f54 <std>
 800407a:	2301      	movs	r3, #1
 800407c:	61a3      	str	r3, [r4, #24]
 800407e:	e7d2      	b.n	8004026 <__sinit+0xe>
 8004080:	08004dc4 	.word	0x08004dc4
 8004084:	08003f9d 	.word	0x08003f9d

08004088 <__sfp>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	0007      	movs	r7, r0
 800408c:	f7ff ffa4 	bl	8003fd8 <__sfp_lock_acquire>
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <__sfp+0x88>)
 8004092:	681e      	ldr	r6, [r3, #0]
 8004094:	69b3      	ldr	r3, [r6, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <__sfp+0x18>
 800409a:	0030      	movs	r0, r6
 800409c:	f7ff ffbc 	bl	8004018 <__sinit>
 80040a0:	3648      	adds	r6, #72	; 0x48
 80040a2:	68b4      	ldr	r4, [r6, #8]
 80040a4:	6873      	ldr	r3, [r6, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	d504      	bpl.n	80040b4 <__sfp+0x2c>
 80040aa:	6833      	ldr	r3, [r6, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d022      	beq.n	80040f6 <__sfp+0x6e>
 80040b0:	6836      	ldr	r6, [r6, #0]
 80040b2:	e7f6      	b.n	80040a2 <__sfp+0x1a>
 80040b4:	220c      	movs	r2, #12
 80040b6:	5ea5      	ldrsh	r5, [r4, r2]
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	d11a      	bne.n	80040f2 <__sfp+0x6a>
 80040bc:	0020      	movs	r0, r4
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <__sfp+0x8c>)
 80040c0:	3058      	adds	r0, #88	; 0x58
 80040c2:	60e3      	str	r3, [r4, #12]
 80040c4:	6665      	str	r5, [r4, #100]	; 0x64
 80040c6:	f000 f847 	bl	8004158 <__retarget_lock_init_recursive>
 80040ca:	f7ff ff8d 	bl	8003fe8 <__sfp_lock_release>
 80040ce:	0020      	movs	r0, r4
 80040d0:	2208      	movs	r2, #8
 80040d2:	0029      	movs	r1, r5
 80040d4:	6025      	str	r5, [r4, #0]
 80040d6:	60a5      	str	r5, [r4, #8]
 80040d8:	6065      	str	r5, [r4, #4]
 80040da:	6125      	str	r5, [r4, #16]
 80040dc:	6165      	str	r5, [r4, #20]
 80040de:	61a5      	str	r5, [r4, #24]
 80040e0:	305c      	adds	r0, #92	; 0x5c
 80040e2:	f7ff fc36 	bl	8003952 <memset>
 80040e6:	6365      	str	r5, [r4, #52]	; 0x34
 80040e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80040ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80040ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80040ee:	0020      	movs	r0, r4
 80040f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f2:	3468      	adds	r4, #104	; 0x68
 80040f4:	e7d7      	b.n	80040a6 <__sfp+0x1e>
 80040f6:	2104      	movs	r1, #4
 80040f8:	0038      	movs	r0, r7
 80040fa:	f7ff ff57 	bl	8003fac <__sfmoreglue>
 80040fe:	1e04      	subs	r4, r0, #0
 8004100:	6030      	str	r0, [r6, #0]
 8004102:	d1d5      	bne.n	80040b0 <__sfp+0x28>
 8004104:	f7ff ff70 	bl	8003fe8 <__sfp_lock_release>
 8004108:	230c      	movs	r3, #12
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	e7ef      	b.n	80040ee <__sfp+0x66>
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	08004dc4 	.word	0x08004dc4
 8004114:	ffff0001 	.word	0xffff0001

08004118 <_fwalk_reent>:
 8004118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800411a:	0004      	movs	r4, r0
 800411c:	0006      	movs	r6, r0
 800411e:	2700      	movs	r7, #0
 8004120:	9101      	str	r1, [sp, #4]
 8004122:	3448      	adds	r4, #72	; 0x48
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	68a5      	ldr	r5, [r4, #8]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	9b00      	ldr	r3, [sp, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	d504      	bpl.n	800413c <_fwalk_reent+0x24>
 8004132:	6824      	ldr	r4, [r4, #0]
 8004134:	2c00      	cmp	r4, #0
 8004136:	d1f5      	bne.n	8004124 <_fwalk_reent+0xc>
 8004138:	0038      	movs	r0, r7
 800413a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800413c:	89ab      	ldrh	r3, [r5, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d908      	bls.n	8004154 <_fwalk_reent+0x3c>
 8004142:	220e      	movs	r2, #14
 8004144:	5eab      	ldrsh	r3, [r5, r2]
 8004146:	3301      	adds	r3, #1
 8004148:	d004      	beq.n	8004154 <_fwalk_reent+0x3c>
 800414a:	0029      	movs	r1, r5
 800414c:	0030      	movs	r0, r6
 800414e:	9b01      	ldr	r3, [sp, #4]
 8004150:	4798      	blx	r3
 8004152:	4307      	orrs	r7, r0
 8004154:	3568      	adds	r5, #104	; 0x68
 8004156:	e7e8      	b.n	800412a <_fwalk_reent+0x12>

08004158 <__retarget_lock_init_recursive>:
 8004158:	4770      	bx	lr

0800415a <__retarget_lock_acquire_recursive>:
 800415a:	4770      	bx	lr

0800415c <__retarget_lock_release_recursive>:
 800415c:	4770      	bx	lr
	...

08004160 <__swhatbuf_r>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	000e      	movs	r6, r1
 8004164:	001d      	movs	r5, r3
 8004166:	230e      	movs	r3, #14
 8004168:	5ec9      	ldrsh	r1, [r1, r3]
 800416a:	0014      	movs	r4, r2
 800416c:	b096      	sub	sp, #88	; 0x58
 800416e:	2900      	cmp	r1, #0
 8004170:	da08      	bge.n	8004184 <__swhatbuf_r+0x24>
 8004172:	220c      	movs	r2, #12
 8004174:	5eb3      	ldrsh	r3, [r6, r2]
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	d411      	bmi.n	80041a2 <__swhatbuf_r+0x42>
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	e00f      	b.n	80041a4 <__swhatbuf_r+0x44>
 8004184:	466a      	mov	r2, sp
 8004186:	f000 fcab 	bl	8004ae0 <_fstat_r>
 800418a:	2800      	cmp	r0, #0
 800418c:	dbf1      	blt.n	8004172 <__swhatbuf_r+0x12>
 800418e:	23f0      	movs	r3, #240	; 0xf0
 8004190:	9901      	ldr	r1, [sp, #4]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	4019      	ands	r1, r3
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <__swhatbuf_r+0x4c>)
 8004198:	18c9      	adds	r1, r1, r3
 800419a:	424b      	negs	r3, r1
 800419c:	4159      	adcs	r1, r3
 800419e:	6029      	str	r1, [r5, #0]
 80041a0:	e7ed      	b.n	800417e <__swhatbuf_r+0x1e>
 80041a2:	2340      	movs	r3, #64	; 0x40
 80041a4:	2000      	movs	r0, #0
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	b016      	add	sp, #88	; 0x58
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	ffffe000 	.word	0xffffe000

080041b0 <__smakebuf_r>:
 80041b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041b2:	2602      	movs	r6, #2
 80041b4:	898b      	ldrh	r3, [r1, #12]
 80041b6:	0005      	movs	r5, r0
 80041b8:	000c      	movs	r4, r1
 80041ba:	4233      	tst	r3, r6
 80041bc:	d006      	beq.n	80041cc <__smakebuf_r+0x1c>
 80041be:	0023      	movs	r3, r4
 80041c0:	3347      	adds	r3, #71	; 0x47
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	2301      	movs	r3, #1
 80041c8:	6163      	str	r3, [r4, #20]
 80041ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80041cc:	466a      	mov	r2, sp
 80041ce:	ab01      	add	r3, sp, #4
 80041d0:	f7ff ffc6 	bl	8004160 <__swhatbuf_r>
 80041d4:	9900      	ldr	r1, [sp, #0]
 80041d6:	0007      	movs	r7, r0
 80041d8:	0028      	movs	r0, r5
 80041da:	f000 f8a3 	bl	8004324 <_malloc_r>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d108      	bne.n	80041f4 <__smakebuf_r+0x44>
 80041e2:	220c      	movs	r2, #12
 80041e4:	5ea3      	ldrsh	r3, [r4, r2]
 80041e6:	059a      	lsls	r2, r3, #22
 80041e8:	d4ef      	bmi.n	80041ca <__smakebuf_r+0x1a>
 80041ea:	2203      	movs	r2, #3
 80041ec:	4393      	bics	r3, r2
 80041ee:	431e      	orrs	r6, r3
 80041f0:	81a6      	strh	r6, [r4, #12]
 80041f2:	e7e4      	b.n	80041be <__smakebuf_r+0xe>
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <__smakebuf_r+0x84>)
 80041f6:	62ab      	str	r3, [r5, #40]	; 0x28
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	89a2      	ldrh	r2, [r4, #12]
 80041fc:	6020      	str	r0, [r4, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	9b00      	ldr	r3, [sp, #0]
 8004204:	6120      	str	r0, [r4, #16]
 8004206:	6163      	str	r3, [r4, #20]
 8004208:	9b01      	ldr	r3, [sp, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <__smakebuf_r+0x7a>
 800420e:	0028      	movs	r0, r5
 8004210:	230e      	movs	r3, #14
 8004212:	5ee1      	ldrsh	r1, [r4, r3]
 8004214:	f000 fc76 	bl	8004b04 <_isatty_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	d006      	beq.n	800422a <__smakebuf_r+0x7a>
 800421c:	2203      	movs	r2, #3
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	4393      	bics	r3, r2
 8004222:	001a      	movs	r2, r3
 8004224:	2301      	movs	r3, #1
 8004226:	4313      	orrs	r3, r2
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	89a0      	ldrh	r0, [r4, #12]
 800422c:	4307      	orrs	r7, r0
 800422e:	81a7      	strh	r7, [r4, #12]
 8004230:	e7cb      	b.n	80041ca <__smakebuf_r+0x1a>
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	08003f9d 	.word	0x08003f9d

08004238 <malloc>:
 8004238:	b510      	push	{r4, lr}
 800423a:	4b03      	ldr	r3, [pc, #12]	; (8004248 <malloc+0x10>)
 800423c:	0001      	movs	r1, r0
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f000 f870 	bl	8004324 <_malloc_r>
 8004244:	bd10      	pop	{r4, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	2000000c 	.word	0x2000000c

0800424c <_free_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	0005      	movs	r5, r0
 8004250:	2900      	cmp	r1, #0
 8004252:	d010      	beq.n	8004276 <_free_r+0x2a>
 8004254:	1f0c      	subs	r4, r1, #4
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da00      	bge.n	800425e <_free_r+0x12>
 800425c:	18e4      	adds	r4, r4, r3
 800425e:	0028      	movs	r0, r5
 8004260:	f000 fc82 	bl	8004b68 <__malloc_lock>
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <_free_r+0x90>)
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <_free_r+0x2c>
 800426c:	6063      	str	r3, [r4, #4]
 800426e:	6014      	str	r4, [r2, #0]
 8004270:	0028      	movs	r0, r5
 8004272:	f000 fc81 	bl	8004b78 <__malloc_unlock>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	42a3      	cmp	r3, r4
 800427a:	d908      	bls.n	800428e <_free_r+0x42>
 800427c:	6821      	ldr	r1, [r4, #0]
 800427e:	1860      	adds	r0, r4, r1
 8004280:	4283      	cmp	r3, r0
 8004282:	d1f3      	bne.n	800426c <_free_r+0x20>
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	1841      	adds	r1, r0, r1
 800428a:	6021      	str	r1, [r4, #0]
 800428c:	e7ee      	b.n	800426c <_free_r+0x20>
 800428e:	001a      	movs	r2, r3
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <_free_r+0x4e>
 8004296:	42a3      	cmp	r3, r4
 8004298:	d9f9      	bls.n	800428e <_free_r+0x42>
 800429a:	6811      	ldr	r1, [r2, #0]
 800429c:	1850      	adds	r0, r2, r1
 800429e:	42a0      	cmp	r0, r4
 80042a0:	d10b      	bne.n	80042ba <_free_r+0x6e>
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	1809      	adds	r1, r1, r0
 80042a6:	1850      	adds	r0, r2, r1
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	4283      	cmp	r3, r0
 80042ac:	d1e0      	bne.n	8004270 <_free_r+0x24>
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	1841      	adds	r1, r0, r1
 80042b4:	6011      	str	r1, [r2, #0]
 80042b6:	6053      	str	r3, [r2, #4]
 80042b8:	e7da      	b.n	8004270 <_free_r+0x24>
 80042ba:	42a0      	cmp	r0, r4
 80042bc:	d902      	bls.n	80042c4 <_free_r+0x78>
 80042be:	230c      	movs	r3, #12
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	e7d5      	b.n	8004270 <_free_r+0x24>
 80042c4:	6821      	ldr	r1, [r4, #0]
 80042c6:	1860      	adds	r0, r4, r1
 80042c8:	4283      	cmp	r3, r0
 80042ca:	d103      	bne.n	80042d4 <_free_r+0x88>
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	1841      	adds	r1, r0, r1
 80042d2:	6021      	str	r1, [r4, #0]
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6054      	str	r4, [r2, #4]
 80042d8:	e7ca      	b.n	8004270 <_free_r+0x24>
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	200005e0 	.word	0x200005e0

080042e0 <sbrk_aligned>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4e0f      	ldr	r6, [pc, #60]	; (8004320 <sbrk_aligned+0x40>)
 80042e4:	000d      	movs	r5, r1
 80042e6:	6831      	ldr	r1, [r6, #0]
 80042e8:	0004      	movs	r4, r0
 80042ea:	2900      	cmp	r1, #0
 80042ec:	d102      	bne.n	80042f4 <sbrk_aligned+0x14>
 80042ee:	f000 fb73 	bl	80049d8 <_sbrk_r>
 80042f2:	6030      	str	r0, [r6, #0]
 80042f4:	0029      	movs	r1, r5
 80042f6:	0020      	movs	r0, r4
 80042f8:	f000 fb6e 	bl	80049d8 <_sbrk_r>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d00a      	beq.n	8004316 <sbrk_aligned+0x36>
 8004300:	2303      	movs	r3, #3
 8004302:	1cc5      	adds	r5, r0, #3
 8004304:	439d      	bics	r5, r3
 8004306:	42a8      	cmp	r0, r5
 8004308:	d007      	beq.n	800431a <sbrk_aligned+0x3a>
 800430a:	1a29      	subs	r1, r5, r0
 800430c:	0020      	movs	r0, r4
 800430e:	f000 fb63 	bl	80049d8 <_sbrk_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d101      	bne.n	800431a <sbrk_aligned+0x3a>
 8004316:	2501      	movs	r5, #1
 8004318:	426d      	negs	r5, r5
 800431a:	0028      	movs	r0, r5
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	200005e4 	.word	0x200005e4

08004324 <_malloc_r>:
 8004324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004326:	2203      	movs	r2, #3
 8004328:	1ccb      	adds	r3, r1, #3
 800432a:	4393      	bics	r3, r2
 800432c:	3308      	adds	r3, #8
 800432e:	0006      	movs	r6, r0
 8004330:	001f      	movs	r7, r3
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d232      	bcs.n	800439c <_malloc_r+0x78>
 8004336:	270c      	movs	r7, #12
 8004338:	42b9      	cmp	r1, r7
 800433a:	d831      	bhi.n	80043a0 <_malloc_r+0x7c>
 800433c:	0030      	movs	r0, r6
 800433e:	f000 fc13 	bl	8004b68 <__malloc_lock>
 8004342:	4d32      	ldr	r5, [pc, #200]	; (800440c <_malloc_r+0xe8>)
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	001c      	movs	r4, r3
 8004348:	2c00      	cmp	r4, #0
 800434a:	d12e      	bne.n	80043aa <_malloc_r+0x86>
 800434c:	0039      	movs	r1, r7
 800434e:	0030      	movs	r0, r6
 8004350:	f7ff ffc6 	bl	80042e0 <sbrk_aligned>
 8004354:	0004      	movs	r4, r0
 8004356:	1c43      	adds	r3, r0, #1
 8004358:	d11e      	bne.n	8004398 <_malloc_r+0x74>
 800435a:	682c      	ldr	r4, [r5, #0]
 800435c:	0025      	movs	r5, r4
 800435e:	2d00      	cmp	r5, #0
 8004360:	d14a      	bne.n	80043f8 <_malloc_r+0xd4>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	0029      	movs	r1, r5
 8004366:	18e3      	adds	r3, r4, r3
 8004368:	0030      	movs	r0, r6
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	f000 fb34 	bl	80049d8 <_sbrk_r>
 8004370:	9b01      	ldr	r3, [sp, #4]
 8004372:	4283      	cmp	r3, r0
 8004374:	d143      	bne.n	80043fe <_malloc_r+0xda>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	3703      	adds	r7, #3
 800437a:	1aff      	subs	r7, r7, r3
 800437c:	2303      	movs	r3, #3
 800437e:	439f      	bics	r7, r3
 8004380:	3708      	adds	r7, #8
 8004382:	2f0c      	cmp	r7, #12
 8004384:	d200      	bcs.n	8004388 <_malloc_r+0x64>
 8004386:	270c      	movs	r7, #12
 8004388:	0039      	movs	r1, r7
 800438a:	0030      	movs	r0, r6
 800438c:	f7ff ffa8 	bl	80042e0 <sbrk_aligned>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d034      	beq.n	80043fe <_malloc_r+0xda>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	19df      	adds	r7, r3, r7
 8004398:	6027      	str	r7, [r4, #0]
 800439a:	e013      	b.n	80043c4 <_malloc_r+0xa0>
 800439c:	2b00      	cmp	r3, #0
 800439e:	dacb      	bge.n	8004338 <_malloc_r+0x14>
 80043a0:	230c      	movs	r3, #12
 80043a2:	2500      	movs	r5, #0
 80043a4:	6033      	str	r3, [r6, #0]
 80043a6:	0028      	movs	r0, r5
 80043a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	1bd1      	subs	r1, r2, r7
 80043ae:	d420      	bmi.n	80043f2 <_malloc_r+0xce>
 80043b0:	290b      	cmp	r1, #11
 80043b2:	d917      	bls.n	80043e4 <_malloc_r+0xc0>
 80043b4:	19e2      	adds	r2, r4, r7
 80043b6:	6027      	str	r7, [r4, #0]
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d111      	bne.n	80043e0 <_malloc_r+0xbc>
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	6053      	str	r3, [r2, #4]
 80043c4:	0030      	movs	r0, r6
 80043c6:	0025      	movs	r5, r4
 80043c8:	f000 fbd6 	bl	8004b78 <__malloc_unlock>
 80043cc:	2207      	movs	r2, #7
 80043ce:	350b      	adds	r5, #11
 80043d0:	1d23      	adds	r3, r4, #4
 80043d2:	4395      	bics	r5, r2
 80043d4:	1aea      	subs	r2, r5, r3
 80043d6:	429d      	cmp	r5, r3
 80043d8:	d0e5      	beq.n	80043a6 <_malloc_r+0x82>
 80043da:	1b5b      	subs	r3, r3, r5
 80043dc:	50a3      	str	r3, [r4, r2]
 80043de:	e7e2      	b.n	80043a6 <_malloc_r+0x82>
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	e7ec      	b.n	80043be <_malloc_r+0x9a>
 80043e4:	6862      	ldr	r2, [r4, #4]
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	d101      	bne.n	80043ee <_malloc_r+0xca>
 80043ea:	602a      	str	r2, [r5, #0]
 80043ec:	e7ea      	b.n	80043c4 <_malloc_r+0xa0>
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	e7e8      	b.n	80043c4 <_malloc_r+0xa0>
 80043f2:	0023      	movs	r3, r4
 80043f4:	6864      	ldr	r4, [r4, #4]
 80043f6:	e7a7      	b.n	8004348 <_malloc_r+0x24>
 80043f8:	002c      	movs	r4, r5
 80043fa:	686d      	ldr	r5, [r5, #4]
 80043fc:	e7af      	b.n	800435e <_malloc_r+0x3a>
 80043fe:	230c      	movs	r3, #12
 8004400:	0030      	movs	r0, r6
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	f000 fbb8 	bl	8004b78 <__malloc_unlock>
 8004408:	e7cd      	b.n	80043a6 <_malloc_r+0x82>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	200005e0 	.word	0x200005e0

08004410 <__sfputc_r>:
 8004410:	6893      	ldr	r3, [r2, #8]
 8004412:	b510      	push	{r4, lr}
 8004414:	3b01      	subs	r3, #1
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	da04      	bge.n	8004426 <__sfputc_r+0x16>
 800441c:	6994      	ldr	r4, [r2, #24]
 800441e:	42a3      	cmp	r3, r4
 8004420:	db07      	blt.n	8004432 <__sfputc_r+0x22>
 8004422:	290a      	cmp	r1, #10
 8004424:	d005      	beq.n	8004432 <__sfputc_r+0x22>
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	1c58      	adds	r0, r3, #1
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	7019      	strb	r1, [r3, #0]
 800442e:	0008      	movs	r0, r1
 8004430:	bd10      	pop	{r4, pc}
 8004432:	f7ff fbf5 	bl	8003c20 <__swbuf_r>
 8004436:	0001      	movs	r1, r0
 8004438:	e7f9      	b.n	800442e <__sfputc_r+0x1e>

0800443a <__sfputs_r>:
 800443a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443c:	0006      	movs	r6, r0
 800443e:	000f      	movs	r7, r1
 8004440:	0014      	movs	r4, r2
 8004442:	18d5      	adds	r5, r2, r3
 8004444:	42ac      	cmp	r4, r5
 8004446:	d101      	bne.n	800444c <__sfputs_r+0x12>
 8004448:	2000      	movs	r0, #0
 800444a:	e007      	b.n	800445c <__sfputs_r+0x22>
 800444c:	7821      	ldrb	r1, [r4, #0]
 800444e:	003a      	movs	r2, r7
 8004450:	0030      	movs	r0, r6
 8004452:	f7ff ffdd 	bl	8004410 <__sfputc_r>
 8004456:	3401      	adds	r4, #1
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d1f3      	bne.n	8004444 <__sfputs_r+0xa>
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004460 <_vfiprintf_r>:
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b0a1      	sub	sp, #132	; 0x84
 8004464:	0006      	movs	r6, r0
 8004466:	000c      	movs	r4, r1
 8004468:	001f      	movs	r7, r3
 800446a:	9203      	str	r2, [sp, #12]
 800446c:	2800      	cmp	r0, #0
 800446e:	d004      	beq.n	800447a <_vfiprintf_r+0x1a>
 8004470:	6983      	ldr	r3, [r0, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <_vfiprintf_r+0x1a>
 8004476:	f7ff fdcf 	bl	8004018 <__sinit>
 800447a:	4b8e      	ldr	r3, [pc, #568]	; (80046b4 <_vfiprintf_r+0x254>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d11c      	bne.n	80044ba <_vfiprintf_r+0x5a>
 8004480:	6874      	ldr	r4, [r6, #4]
 8004482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004484:	07db      	lsls	r3, r3, #31
 8004486:	d405      	bmi.n	8004494 <_vfiprintf_r+0x34>
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	059b      	lsls	r3, r3, #22
 800448c:	d402      	bmi.n	8004494 <_vfiprintf_r+0x34>
 800448e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004490:	f7ff fe63 	bl	800415a <__retarget_lock_acquire_recursive>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	071b      	lsls	r3, r3, #28
 8004498:	d502      	bpl.n	80044a0 <_vfiprintf_r+0x40>
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <_vfiprintf_r+0x7c>
 80044a0:	0021      	movs	r1, r4
 80044a2:	0030      	movs	r0, r6
 80044a4:	f7ff fc12 	bl	8003ccc <__swsetup_r>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d017      	beq.n	80044dc <_vfiprintf_r+0x7c>
 80044ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ae:	07db      	lsls	r3, r3, #31
 80044b0:	d50d      	bpl.n	80044ce <_vfiprintf_r+0x6e>
 80044b2:	2001      	movs	r0, #1
 80044b4:	4240      	negs	r0, r0
 80044b6:	b021      	add	sp, #132	; 0x84
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	4b7f      	ldr	r3, [pc, #508]	; (80046b8 <_vfiprintf_r+0x258>)
 80044bc:	429c      	cmp	r4, r3
 80044be:	d101      	bne.n	80044c4 <_vfiprintf_r+0x64>
 80044c0:	68b4      	ldr	r4, [r6, #8]
 80044c2:	e7de      	b.n	8004482 <_vfiprintf_r+0x22>
 80044c4:	4b7d      	ldr	r3, [pc, #500]	; (80046bc <_vfiprintf_r+0x25c>)
 80044c6:	429c      	cmp	r4, r3
 80044c8:	d1db      	bne.n	8004482 <_vfiprintf_r+0x22>
 80044ca:	68f4      	ldr	r4, [r6, #12]
 80044cc:	e7d9      	b.n	8004482 <_vfiprintf_r+0x22>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	059b      	lsls	r3, r3, #22
 80044d2:	d4ee      	bmi.n	80044b2 <_vfiprintf_r+0x52>
 80044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d6:	f7ff fe41 	bl	800415c <__retarget_lock_release_recursive>
 80044da:	e7ea      	b.n	80044b2 <_vfiprintf_r+0x52>
 80044dc:	2300      	movs	r3, #0
 80044de:	ad08      	add	r5, sp, #32
 80044e0:	616b      	str	r3, [r5, #20]
 80044e2:	3320      	adds	r3, #32
 80044e4:	766b      	strb	r3, [r5, #25]
 80044e6:	3310      	adds	r3, #16
 80044e8:	76ab      	strb	r3, [r5, #26]
 80044ea:	9707      	str	r7, [sp, #28]
 80044ec:	9f03      	ldr	r7, [sp, #12]
 80044ee:	783b      	ldrb	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <_vfiprintf_r+0x98>
 80044f4:	2b25      	cmp	r3, #37	; 0x25
 80044f6:	d14e      	bne.n	8004596 <_vfiprintf_r+0x136>
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	1afb      	subs	r3, r7, r3
 80044fc:	9305      	str	r3, [sp, #20]
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	429f      	cmp	r7, r3
 8004502:	d00d      	beq.n	8004520 <_vfiprintf_r+0xc0>
 8004504:	9b05      	ldr	r3, [sp, #20]
 8004506:	0021      	movs	r1, r4
 8004508:	0030      	movs	r0, r6
 800450a:	9a03      	ldr	r2, [sp, #12]
 800450c:	f7ff ff95 	bl	800443a <__sfputs_r>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d100      	bne.n	8004516 <_vfiprintf_r+0xb6>
 8004514:	e0b5      	b.n	8004682 <_vfiprintf_r+0x222>
 8004516:	696a      	ldr	r2, [r5, #20]
 8004518:	9b05      	ldr	r3, [sp, #20]
 800451a:	4694      	mov	ip, r2
 800451c:	4463      	add	r3, ip
 800451e:	616b      	str	r3, [r5, #20]
 8004520:	783b      	ldrb	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d100      	bne.n	8004528 <_vfiprintf_r+0xc8>
 8004526:	e0ac      	b.n	8004682 <_vfiprintf_r+0x222>
 8004528:	2201      	movs	r2, #1
 800452a:	1c7b      	adds	r3, r7, #1
 800452c:	9303      	str	r3, [sp, #12]
 800452e:	2300      	movs	r3, #0
 8004530:	4252      	negs	r2, r2
 8004532:	606a      	str	r2, [r5, #4]
 8004534:	a904      	add	r1, sp, #16
 8004536:	3254      	adds	r2, #84	; 0x54
 8004538:	1852      	adds	r2, r2, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	60eb      	str	r3, [r5, #12]
 800453e:	60ab      	str	r3, [r5, #8]
 8004540:	7013      	strb	r3, [r2, #0]
 8004542:	65ab      	str	r3, [r5, #88]	; 0x58
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	2205      	movs	r2, #5
 8004548:	7819      	ldrb	r1, [r3, #0]
 800454a:	485d      	ldr	r0, [pc, #372]	; (80046c0 <_vfiprintf_r+0x260>)
 800454c:	f000 fb00 	bl	8004b50 <memchr>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	1c5f      	adds	r7, r3, #1
 8004554:	2800      	cmp	r0, #0
 8004556:	d120      	bne.n	800459a <_vfiprintf_r+0x13a>
 8004558:	682a      	ldr	r2, [r5, #0]
 800455a:	06d3      	lsls	r3, r2, #27
 800455c:	d504      	bpl.n	8004568 <_vfiprintf_r+0x108>
 800455e:	2353      	movs	r3, #83	; 0x53
 8004560:	a904      	add	r1, sp, #16
 8004562:	185b      	adds	r3, r3, r1
 8004564:	2120      	movs	r1, #32
 8004566:	7019      	strb	r1, [r3, #0]
 8004568:	0713      	lsls	r3, r2, #28
 800456a:	d504      	bpl.n	8004576 <_vfiprintf_r+0x116>
 800456c:	2353      	movs	r3, #83	; 0x53
 800456e:	a904      	add	r1, sp, #16
 8004570:	185b      	adds	r3, r3, r1
 8004572:	212b      	movs	r1, #43	; 0x2b
 8004574:	7019      	strb	r1, [r3, #0]
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b2a      	cmp	r3, #42	; 0x2a
 800457c:	d016      	beq.n	80045ac <_vfiprintf_r+0x14c>
 800457e:	2100      	movs	r1, #0
 8004580:	68eb      	ldr	r3, [r5, #12]
 8004582:	9f03      	ldr	r7, [sp, #12]
 8004584:	783a      	ldrb	r2, [r7, #0]
 8004586:	1c78      	adds	r0, r7, #1
 8004588:	3a30      	subs	r2, #48	; 0x30
 800458a:	4684      	mov	ip, r0
 800458c:	2a09      	cmp	r2, #9
 800458e:	d94f      	bls.n	8004630 <_vfiprintf_r+0x1d0>
 8004590:	2900      	cmp	r1, #0
 8004592:	d111      	bne.n	80045b8 <_vfiprintf_r+0x158>
 8004594:	e017      	b.n	80045c6 <_vfiprintf_r+0x166>
 8004596:	3701      	adds	r7, #1
 8004598:	e7a9      	b.n	80044ee <_vfiprintf_r+0x8e>
 800459a:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <_vfiprintf_r+0x260>)
 800459c:	682a      	ldr	r2, [r5, #0]
 800459e:	1ac0      	subs	r0, r0, r3
 80045a0:	2301      	movs	r3, #1
 80045a2:	4083      	lsls	r3, r0
 80045a4:	4313      	orrs	r3, r2
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	9703      	str	r7, [sp, #12]
 80045aa:	e7cb      	b.n	8004544 <_vfiprintf_r+0xe4>
 80045ac:	9b07      	ldr	r3, [sp, #28]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9107      	str	r1, [sp, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db01      	blt.n	80045bc <_vfiprintf_r+0x15c>
 80045b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ba:	e004      	b.n	80045c6 <_vfiprintf_r+0x166>
 80045bc:	425b      	negs	r3, r3
 80045be:	60eb      	str	r3, [r5, #12]
 80045c0:	2302      	movs	r3, #2
 80045c2:	4313      	orrs	r3, r2
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	783b      	ldrb	r3, [r7, #0]
 80045c8:	2b2e      	cmp	r3, #46	; 0x2e
 80045ca:	d10a      	bne.n	80045e2 <_vfiprintf_r+0x182>
 80045cc:	787b      	ldrb	r3, [r7, #1]
 80045ce:	2b2a      	cmp	r3, #42	; 0x2a
 80045d0:	d137      	bne.n	8004642 <_vfiprintf_r+0x1e2>
 80045d2:	9b07      	ldr	r3, [sp, #28]
 80045d4:	3702      	adds	r7, #2
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	9207      	str	r2, [sp, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db2d      	blt.n	800463c <_vfiprintf_r+0x1dc>
 80045e0:	9309      	str	r3, [sp, #36]	; 0x24
 80045e2:	2203      	movs	r2, #3
 80045e4:	7839      	ldrb	r1, [r7, #0]
 80045e6:	4837      	ldr	r0, [pc, #220]	; (80046c4 <_vfiprintf_r+0x264>)
 80045e8:	f000 fab2 	bl	8004b50 <memchr>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d007      	beq.n	8004600 <_vfiprintf_r+0x1a0>
 80045f0:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <_vfiprintf_r+0x264>)
 80045f2:	682a      	ldr	r2, [r5, #0]
 80045f4:	1ac0      	subs	r0, r0, r3
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	4083      	lsls	r3, r0
 80045fa:	4313      	orrs	r3, r2
 80045fc:	3701      	adds	r7, #1
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	7839      	ldrb	r1, [r7, #0]
 8004602:	1c7b      	adds	r3, r7, #1
 8004604:	2206      	movs	r2, #6
 8004606:	4830      	ldr	r0, [pc, #192]	; (80046c8 <_vfiprintf_r+0x268>)
 8004608:	9303      	str	r3, [sp, #12]
 800460a:	7629      	strb	r1, [r5, #24]
 800460c:	f000 faa0 	bl	8004b50 <memchr>
 8004610:	2800      	cmp	r0, #0
 8004612:	d045      	beq.n	80046a0 <_vfiprintf_r+0x240>
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <_vfiprintf_r+0x26c>)
 8004616:	2b00      	cmp	r3, #0
 8004618:	d127      	bne.n	800466a <_vfiprintf_r+0x20a>
 800461a:	2207      	movs	r2, #7
 800461c:	9b07      	ldr	r3, [sp, #28]
 800461e:	3307      	adds	r3, #7
 8004620:	4393      	bics	r3, r2
 8004622:	3308      	adds	r3, #8
 8004624:	9307      	str	r3, [sp, #28]
 8004626:	696b      	ldr	r3, [r5, #20]
 8004628:	9a04      	ldr	r2, [sp, #16]
 800462a:	189b      	adds	r3, r3, r2
 800462c:	616b      	str	r3, [r5, #20]
 800462e:	e75d      	b.n	80044ec <_vfiprintf_r+0x8c>
 8004630:	210a      	movs	r1, #10
 8004632:	434b      	muls	r3, r1
 8004634:	4667      	mov	r7, ip
 8004636:	189b      	adds	r3, r3, r2
 8004638:	3909      	subs	r1, #9
 800463a:	e7a3      	b.n	8004584 <_vfiprintf_r+0x124>
 800463c:	2301      	movs	r3, #1
 800463e:	425b      	negs	r3, r3
 8004640:	e7ce      	b.n	80045e0 <_vfiprintf_r+0x180>
 8004642:	2300      	movs	r3, #0
 8004644:	001a      	movs	r2, r3
 8004646:	3701      	adds	r7, #1
 8004648:	606b      	str	r3, [r5, #4]
 800464a:	7839      	ldrb	r1, [r7, #0]
 800464c:	1c78      	adds	r0, r7, #1
 800464e:	3930      	subs	r1, #48	; 0x30
 8004650:	4684      	mov	ip, r0
 8004652:	2909      	cmp	r1, #9
 8004654:	d903      	bls.n	800465e <_vfiprintf_r+0x1fe>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0c3      	beq.n	80045e2 <_vfiprintf_r+0x182>
 800465a:	9209      	str	r2, [sp, #36]	; 0x24
 800465c:	e7c1      	b.n	80045e2 <_vfiprintf_r+0x182>
 800465e:	230a      	movs	r3, #10
 8004660:	435a      	muls	r2, r3
 8004662:	4667      	mov	r7, ip
 8004664:	1852      	adds	r2, r2, r1
 8004666:	3b09      	subs	r3, #9
 8004668:	e7ef      	b.n	800464a <_vfiprintf_r+0x1ea>
 800466a:	ab07      	add	r3, sp, #28
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	0022      	movs	r2, r4
 8004670:	0029      	movs	r1, r5
 8004672:	0030      	movs	r0, r6
 8004674:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <_vfiprintf_r+0x270>)
 8004676:	e000      	b.n	800467a <_vfiprintf_r+0x21a>
 8004678:	bf00      	nop
 800467a:	9004      	str	r0, [sp, #16]
 800467c:	9b04      	ldr	r3, [sp, #16]
 800467e:	3301      	adds	r3, #1
 8004680:	d1d1      	bne.n	8004626 <_vfiprintf_r+0x1c6>
 8004682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004684:	07db      	lsls	r3, r3, #31
 8004686:	d405      	bmi.n	8004694 <_vfiprintf_r+0x234>
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	059b      	lsls	r3, r3, #22
 800468c:	d402      	bmi.n	8004694 <_vfiprintf_r+0x234>
 800468e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004690:	f7ff fd64 	bl	800415c <__retarget_lock_release_recursive>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	065b      	lsls	r3, r3, #25
 8004698:	d500      	bpl.n	800469c <_vfiprintf_r+0x23c>
 800469a:	e70a      	b.n	80044b2 <_vfiprintf_r+0x52>
 800469c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800469e:	e70a      	b.n	80044b6 <_vfiprintf_r+0x56>
 80046a0:	ab07      	add	r3, sp, #28
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	0022      	movs	r2, r4
 80046a6:	0029      	movs	r1, r5
 80046a8:	0030      	movs	r0, r6
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <_vfiprintf_r+0x270>)
 80046ac:	f000 f882 	bl	80047b4 <_printf_i>
 80046b0:	e7e3      	b.n	800467a <_vfiprintf_r+0x21a>
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	08004de8 	.word	0x08004de8
 80046b8:	08004e08 	.word	0x08004e08
 80046bc:	08004dc8 	.word	0x08004dc8
 80046c0:	08004e28 	.word	0x08004e28
 80046c4:	08004e2e 	.word	0x08004e2e
 80046c8:	08004e32 	.word	0x08004e32
 80046cc:	00000000 	.word	0x00000000
 80046d0:	0800443b 	.word	0x0800443b

080046d4 <_printf_common>:
 80046d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d6:	0015      	movs	r5, r2
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	688a      	ldr	r2, [r1, #8]
 80046dc:	690b      	ldr	r3, [r1, #16]
 80046de:	000c      	movs	r4, r1
 80046e0:	9000      	str	r0, [sp, #0]
 80046e2:	4293      	cmp	r3, r2
 80046e4:	da00      	bge.n	80046e8 <_printf_common+0x14>
 80046e6:	0013      	movs	r3, r2
 80046e8:	0022      	movs	r2, r4
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	3243      	adds	r2, #67	; 0x43
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	d001      	beq.n	80046f8 <_printf_common+0x24>
 80046f4:	3301      	adds	r3, #1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	d502      	bpl.n	8004704 <_printf_common+0x30>
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	3302      	adds	r3, #2
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	2306      	movs	r3, #6
 8004708:	0017      	movs	r7, r2
 800470a:	401f      	ands	r7, r3
 800470c:	421a      	tst	r2, r3
 800470e:	d027      	beq.n	8004760 <_printf_common+0x8c>
 8004710:	0023      	movs	r3, r4
 8004712:	3343      	adds	r3, #67	; 0x43
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	4193      	sbcs	r3, r2
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	0692      	lsls	r2, r2, #26
 800471e:	d430      	bmi.n	8004782 <_printf_common+0xae>
 8004720:	0022      	movs	r2, r4
 8004722:	9901      	ldr	r1, [sp, #4]
 8004724:	9800      	ldr	r0, [sp, #0]
 8004726:	9e08      	ldr	r6, [sp, #32]
 8004728:	3243      	adds	r2, #67	; 0x43
 800472a:	47b0      	blx	r6
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d025      	beq.n	800477c <_printf_common+0xa8>
 8004730:	2306      	movs	r3, #6
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	682a      	ldr	r2, [r5, #0]
 8004736:	68e1      	ldr	r1, [r4, #12]
 8004738:	2500      	movs	r5, #0
 800473a:	4003      	ands	r3, r0
 800473c:	2b04      	cmp	r3, #4
 800473e:	d103      	bne.n	8004748 <_printf_common+0x74>
 8004740:	1a8d      	subs	r5, r1, r2
 8004742:	43eb      	mvns	r3, r5
 8004744:	17db      	asrs	r3, r3, #31
 8004746:	401d      	ands	r5, r3
 8004748:	68a3      	ldr	r3, [r4, #8]
 800474a:	6922      	ldr	r2, [r4, #16]
 800474c:	4293      	cmp	r3, r2
 800474e:	dd01      	ble.n	8004754 <_printf_common+0x80>
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	18ed      	adds	r5, r5, r3
 8004754:	2700      	movs	r7, #0
 8004756:	42bd      	cmp	r5, r7
 8004758:	d120      	bne.n	800479c <_printf_common+0xc8>
 800475a:	2000      	movs	r0, #0
 800475c:	e010      	b.n	8004780 <_printf_common+0xac>
 800475e:	3701      	adds	r7, #1
 8004760:	68e3      	ldr	r3, [r4, #12]
 8004762:	682a      	ldr	r2, [r5, #0]
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	42bb      	cmp	r3, r7
 8004768:	ddd2      	ble.n	8004710 <_printf_common+0x3c>
 800476a:	0022      	movs	r2, r4
 800476c:	2301      	movs	r3, #1
 800476e:	9901      	ldr	r1, [sp, #4]
 8004770:	9800      	ldr	r0, [sp, #0]
 8004772:	9e08      	ldr	r6, [sp, #32]
 8004774:	3219      	adds	r2, #25
 8004776:	47b0      	blx	r6
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d1f0      	bne.n	800475e <_printf_common+0x8a>
 800477c:	2001      	movs	r0, #1
 800477e:	4240      	negs	r0, r0
 8004780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004782:	2030      	movs	r0, #48	; 0x30
 8004784:	18e1      	adds	r1, r4, r3
 8004786:	3143      	adds	r1, #67	; 0x43
 8004788:	7008      	strb	r0, [r1, #0]
 800478a:	0021      	movs	r1, r4
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	3145      	adds	r1, #69	; 0x45
 8004790:	7809      	ldrb	r1, [r1, #0]
 8004792:	18a2      	adds	r2, r4, r2
 8004794:	3243      	adds	r2, #67	; 0x43
 8004796:	3302      	adds	r3, #2
 8004798:	7011      	strb	r1, [r2, #0]
 800479a:	e7c1      	b.n	8004720 <_printf_common+0x4c>
 800479c:	0022      	movs	r2, r4
 800479e:	2301      	movs	r3, #1
 80047a0:	9901      	ldr	r1, [sp, #4]
 80047a2:	9800      	ldr	r0, [sp, #0]
 80047a4:	9e08      	ldr	r6, [sp, #32]
 80047a6:	321a      	adds	r2, #26
 80047a8:	47b0      	blx	r6
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d0e6      	beq.n	800477c <_printf_common+0xa8>
 80047ae:	3701      	adds	r7, #1
 80047b0:	e7d1      	b.n	8004756 <_printf_common+0x82>
	...

080047b4 <_printf_i>:
 80047b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b6:	b08b      	sub	sp, #44	; 0x2c
 80047b8:	9206      	str	r2, [sp, #24]
 80047ba:	000a      	movs	r2, r1
 80047bc:	3243      	adds	r2, #67	; 0x43
 80047be:	9307      	str	r3, [sp, #28]
 80047c0:	9005      	str	r0, [sp, #20]
 80047c2:	9204      	str	r2, [sp, #16]
 80047c4:	7e0a      	ldrb	r2, [r1, #24]
 80047c6:	000c      	movs	r4, r1
 80047c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047ca:	2a78      	cmp	r2, #120	; 0x78
 80047cc:	d807      	bhi.n	80047de <_printf_i+0x2a>
 80047ce:	2a62      	cmp	r2, #98	; 0x62
 80047d0:	d809      	bhi.n	80047e6 <_printf_i+0x32>
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d100      	bne.n	80047d8 <_printf_i+0x24>
 80047d6:	e0c1      	b.n	800495c <_printf_i+0x1a8>
 80047d8:	2a58      	cmp	r2, #88	; 0x58
 80047da:	d100      	bne.n	80047de <_printf_i+0x2a>
 80047dc:	e08c      	b.n	80048f8 <_printf_i+0x144>
 80047de:	0026      	movs	r6, r4
 80047e0:	3642      	adds	r6, #66	; 0x42
 80047e2:	7032      	strb	r2, [r6, #0]
 80047e4:	e022      	b.n	800482c <_printf_i+0x78>
 80047e6:	0010      	movs	r0, r2
 80047e8:	3863      	subs	r0, #99	; 0x63
 80047ea:	2815      	cmp	r0, #21
 80047ec:	d8f7      	bhi.n	80047de <_printf_i+0x2a>
 80047ee:	f7fb fc8b 	bl	8000108 <__gnu_thumb1_case_shi>
 80047f2:	0016      	.short	0x0016
 80047f4:	fff6001f 	.word	0xfff6001f
 80047f8:	fff6fff6 	.word	0xfff6fff6
 80047fc:	001ffff6 	.word	0x001ffff6
 8004800:	fff6fff6 	.word	0xfff6fff6
 8004804:	fff6fff6 	.word	0xfff6fff6
 8004808:	003600a8 	.word	0x003600a8
 800480c:	fff6009a 	.word	0xfff6009a
 8004810:	00b9fff6 	.word	0x00b9fff6
 8004814:	0036fff6 	.word	0x0036fff6
 8004818:	fff6fff6 	.word	0xfff6fff6
 800481c:	009e      	.short	0x009e
 800481e:	0026      	movs	r6, r4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	3642      	adds	r6, #66	; 0x42
 8004824:	1d11      	adds	r1, r2, #4
 8004826:	6019      	str	r1, [r3, #0]
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	7033      	strb	r3, [r6, #0]
 800482c:	2301      	movs	r3, #1
 800482e:	e0a7      	b.n	8004980 <_printf_i+0x1cc>
 8004830:	6808      	ldr	r0, [r1, #0]
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	1d0a      	adds	r2, r1, #4
 8004836:	0605      	lsls	r5, r0, #24
 8004838:	d50b      	bpl.n	8004852 <_printf_i+0x9e>
 800483a:	680d      	ldr	r5, [r1, #0]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	2d00      	cmp	r5, #0
 8004840:	da03      	bge.n	800484a <_printf_i+0x96>
 8004842:	232d      	movs	r3, #45	; 0x2d
 8004844:	9a04      	ldr	r2, [sp, #16]
 8004846:	426d      	negs	r5, r5
 8004848:	7013      	strb	r3, [r2, #0]
 800484a:	4b61      	ldr	r3, [pc, #388]	; (80049d0 <_printf_i+0x21c>)
 800484c:	270a      	movs	r7, #10
 800484e:	9303      	str	r3, [sp, #12]
 8004850:	e01b      	b.n	800488a <_printf_i+0xd6>
 8004852:	680d      	ldr	r5, [r1, #0]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	0641      	lsls	r1, r0, #25
 8004858:	d5f1      	bpl.n	800483e <_printf_i+0x8a>
 800485a:	b22d      	sxth	r5, r5
 800485c:	e7ef      	b.n	800483e <_printf_i+0x8a>
 800485e:	680d      	ldr	r5, [r1, #0]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	1d08      	adds	r0, r1, #4
 8004864:	6018      	str	r0, [r3, #0]
 8004866:	062e      	lsls	r6, r5, #24
 8004868:	d501      	bpl.n	800486e <_printf_i+0xba>
 800486a:	680d      	ldr	r5, [r1, #0]
 800486c:	e003      	b.n	8004876 <_printf_i+0xc2>
 800486e:	066d      	lsls	r5, r5, #25
 8004870:	d5fb      	bpl.n	800486a <_printf_i+0xb6>
 8004872:	680d      	ldr	r5, [r1, #0]
 8004874:	b2ad      	uxth	r5, r5
 8004876:	4b56      	ldr	r3, [pc, #344]	; (80049d0 <_printf_i+0x21c>)
 8004878:	2708      	movs	r7, #8
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	2a6f      	cmp	r2, #111	; 0x6f
 800487e:	d000      	beq.n	8004882 <_printf_i+0xce>
 8004880:	3702      	adds	r7, #2
 8004882:	0023      	movs	r3, r4
 8004884:	2200      	movs	r2, #0
 8004886:	3343      	adds	r3, #67	; 0x43
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	60a3      	str	r3, [r4, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	db03      	blt.n	800489a <_printf_i+0xe6>
 8004892:	2204      	movs	r2, #4
 8004894:	6821      	ldr	r1, [r4, #0]
 8004896:	4391      	bics	r1, r2
 8004898:	6021      	str	r1, [r4, #0]
 800489a:	2d00      	cmp	r5, #0
 800489c:	d102      	bne.n	80048a4 <_printf_i+0xf0>
 800489e:	9e04      	ldr	r6, [sp, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <_printf_i+0x10a>
 80048a4:	9e04      	ldr	r6, [sp, #16]
 80048a6:	0028      	movs	r0, r5
 80048a8:	0039      	movs	r1, r7
 80048aa:	f7fb fcbd 	bl	8000228 <__aeabi_uidivmod>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	3e01      	subs	r6, #1
 80048b2:	5c5b      	ldrb	r3, [r3, r1]
 80048b4:	7033      	strb	r3, [r6, #0]
 80048b6:	002b      	movs	r3, r5
 80048b8:	0005      	movs	r5, r0
 80048ba:	429f      	cmp	r7, r3
 80048bc:	d9f3      	bls.n	80048a6 <_printf_i+0xf2>
 80048be:	2f08      	cmp	r7, #8
 80048c0:	d109      	bne.n	80048d6 <_printf_i+0x122>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d506      	bpl.n	80048d6 <_printf_i+0x122>
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	6922      	ldr	r2, [r4, #16]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	dc02      	bgt.n	80048d6 <_printf_i+0x122>
 80048d0:	2330      	movs	r3, #48	; 0x30
 80048d2:	3e01      	subs	r6, #1
 80048d4:	7033      	strb	r3, [r6, #0]
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	1b9b      	subs	r3, r3, r6
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	9b07      	ldr	r3, [sp, #28]
 80048de:	0021      	movs	r1, r4
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	9805      	ldr	r0, [sp, #20]
 80048e4:	9b06      	ldr	r3, [sp, #24]
 80048e6:	aa09      	add	r2, sp, #36	; 0x24
 80048e8:	f7ff fef4 	bl	80046d4 <_printf_common>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d14c      	bne.n	800498a <_printf_i+0x1d6>
 80048f0:	2001      	movs	r0, #1
 80048f2:	4240      	negs	r0, r0
 80048f4:	b00b      	add	sp, #44	; 0x2c
 80048f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f8:	3145      	adds	r1, #69	; 0x45
 80048fa:	700a      	strb	r2, [r1, #0]
 80048fc:	4a34      	ldr	r2, [pc, #208]	; (80049d0 <_printf_i+0x21c>)
 80048fe:	9203      	str	r2, [sp, #12]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	6821      	ldr	r1, [r4, #0]
 8004904:	ca20      	ldmia	r2!, {r5}
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	0608      	lsls	r0, r1, #24
 800490a:	d516      	bpl.n	800493a <_printf_i+0x186>
 800490c:	07cb      	lsls	r3, r1, #31
 800490e:	d502      	bpl.n	8004916 <_printf_i+0x162>
 8004910:	2320      	movs	r3, #32
 8004912:	4319      	orrs	r1, r3
 8004914:	6021      	str	r1, [r4, #0]
 8004916:	2710      	movs	r7, #16
 8004918:	2d00      	cmp	r5, #0
 800491a:	d1b2      	bne.n	8004882 <_printf_i+0xce>
 800491c:	2320      	movs	r3, #32
 800491e:	6822      	ldr	r2, [r4, #0]
 8004920:	439a      	bics	r2, r3
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	e7ad      	b.n	8004882 <_printf_i+0xce>
 8004926:	2220      	movs	r2, #32
 8004928:	6809      	ldr	r1, [r1, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	6022      	str	r2, [r4, #0]
 800492e:	0022      	movs	r2, r4
 8004930:	2178      	movs	r1, #120	; 0x78
 8004932:	3245      	adds	r2, #69	; 0x45
 8004934:	7011      	strb	r1, [r2, #0]
 8004936:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <_printf_i+0x220>)
 8004938:	e7e1      	b.n	80048fe <_printf_i+0x14a>
 800493a:	0648      	lsls	r0, r1, #25
 800493c:	d5e6      	bpl.n	800490c <_printf_i+0x158>
 800493e:	b2ad      	uxth	r5, r5
 8004940:	e7e4      	b.n	800490c <_printf_i+0x158>
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	680d      	ldr	r5, [r1, #0]
 8004946:	1d10      	adds	r0, r2, #4
 8004948:	6949      	ldr	r1, [r1, #20]
 800494a:	6018      	str	r0, [r3, #0]
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	062e      	lsls	r6, r5, #24
 8004950:	d501      	bpl.n	8004956 <_printf_i+0x1a2>
 8004952:	6019      	str	r1, [r3, #0]
 8004954:	e002      	b.n	800495c <_printf_i+0x1a8>
 8004956:	066d      	lsls	r5, r5, #25
 8004958:	d5fb      	bpl.n	8004952 <_printf_i+0x19e>
 800495a:	8019      	strh	r1, [r3, #0]
 800495c:	2300      	movs	r3, #0
 800495e:	9e04      	ldr	r6, [sp, #16]
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	e7bb      	b.n	80048dc <_printf_i+0x128>
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	1d11      	adds	r1, r2, #4
 8004968:	6019      	str	r1, [r3, #0]
 800496a:	6816      	ldr	r6, [r2, #0]
 800496c:	2100      	movs	r1, #0
 800496e:	0030      	movs	r0, r6
 8004970:	6862      	ldr	r2, [r4, #4]
 8004972:	f000 f8ed 	bl	8004b50 <memchr>
 8004976:	2800      	cmp	r0, #0
 8004978:	d001      	beq.n	800497e <_printf_i+0x1ca>
 800497a:	1b80      	subs	r0, r0, r6
 800497c:	6060      	str	r0, [r4, #4]
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	2300      	movs	r3, #0
 8004984:	9a04      	ldr	r2, [sp, #16]
 8004986:	7013      	strb	r3, [r2, #0]
 8004988:	e7a8      	b.n	80048dc <_printf_i+0x128>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	0032      	movs	r2, r6
 800498e:	9906      	ldr	r1, [sp, #24]
 8004990:	9805      	ldr	r0, [sp, #20]
 8004992:	9d07      	ldr	r5, [sp, #28]
 8004994:	47a8      	blx	r5
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	d0aa      	beq.n	80048f0 <_printf_i+0x13c>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	079b      	lsls	r3, r3, #30
 800499e:	d415      	bmi.n	80049cc <_printf_i+0x218>
 80049a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a2:	68e0      	ldr	r0, [r4, #12]
 80049a4:	4298      	cmp	r0, r3
 80049a6:	daa5      	bge.n	80048f4 <_printf_i+0x140>
 80049a8:	0018      	movs	r0, r3
 80049aa:	e7a3      	b.n	80048f4 <_printf_i+0x140>
 80049ac:	0022      	movs	r2, r4
 80049ae:	2301      	movs	r3, #1
 80049b0:	9906      	ldr	r1, [sp, #24]
 80049b2:	9805      	ldr	r0, [sp, #20]
 80049b4:	9e07      	ldr	r6, [sp, #28]
 80049b6:	3219      	adds	r2, #25
 80049b8:	47b0      	blx	r6
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d098      	beq.n	80048f0 <_printf_i+0x13c>
 80049be:	3501      	adds	r5, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	42ab      	cmp	r3, r5
 80049c8:	dcf0      	bgt.n	80049ac <_printf_i+0x1f8>
 80049ca:	e7e9      	b.n	80049a0 <_printf_i+0x1ec>
 80049cc:	2500      	movs	r5, #0
 80049ce:	e7f7      	b.n	80049c0 <_printf_i+0x20c>
 80049d0:	08004e39 	.word	0x08004e39
 80049d4:	08004e4a 	.word	0x08004e4a

080049d8 <_sbrk_r>:
 80049d8:	2300      	movs	r3, #0
 80049da:	b570      	push	{r4, r5, r6, lr}
 80049dc:	4d06      	ldr	r5, [pc, #24]	; (80049f8 <_sbrk_r+0x20>)
 80049de:	0004      	movs	r4, r0
 80049e0:	0008      	movs	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fc faf8 	bl	8000fd8 <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d103      	bne.n	80049f4 <_sbrk_r+0x1c>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d000      	beq.n	80049f4 <_sbrk_r+0x1c>
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	200005e8 	.word	0x200005e8

080049fc <__sread>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	000c      	movs	r4, r1
 8004a00:	250e      	movs	r5, #14
 8004a02:	5f49      	ldrsh	r1, [r1, r5]
 8004a04:	f000 f8c0 	bl	8004b88 <_read_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	db03      	blt.n	8004a14 <__sread+0x18>
 8004a0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a0e:	181b      	adds	r3, r3, r0
 8004a10:	6563      	str	r3, [r4, #84]	; 0x54
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <__sread+0x24>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	e7f9      	b.n	8004a12 <__sread+0x16>
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	ffffefff 	.word	0xffffefff

08004a24 <__swrite>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	001f      	movs	r7, r3
 8004a28:	898b      	ldrh	r3, [r1, #12]
 8004a2a:	0005      	movs	r5, r0
 8004a2c:	000c      	movs	r4, r1
 8004a2e:	0016      	movs	r6, r2
 8004a30:	05db      	lsls	r3, r3, #23
 8004a32:	d505      	bpl.n	8004a40 <__swrite+0x1c>
 8004a34:	230e      	movs	r3, #14
 8004a36:	5ec9      	ldrsh	r1, [r1, r3]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f000 f874 	bl	8004b28 <_lseek_r>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	4a05      	ldr	r2, [pc, #20]	; (8004a58 <__swrite+0x34>)
 8004a44:	0028      	movs	r0, r5
 8004a46:	4013      	ands	r3, r2
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	0032      	movs	r2, r6
 8004a4c:	230e      	movs	r3, #14
 8004a4e:	5ee1      	ldrsh	r1, [r4, r3]
 8004a50:	003b      	movs	r3, r7
 8004a52:	f000 f81f 	bl	8004a94 <_write_r>
 8004a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a58:	ffffefff 	.word	0xffffefff

08004a5c <__sseek>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	000c      	movs	r4, r1
 8004a60:	250e      	movs	r5, #14
 8004a62:	5f49      	ldrsh	r1, [r1, r5]
 8004a64:	f000 f860 	bl	8004b28 <_lseek_r>
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	1c42      	adds	r2, r0, #1
 8004a6c:	d103      	bne.n	8004a76 <__sseek+0x1a>
 8004a6e:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <__sseek+0x28>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	81a3      	strh	r3, [r4, #12]
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	0152      	lsls	r2, r2, #5
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a80:	e7f8      	b.n	8004a74 <__sseek+0x18>
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	ffffefff 	.word	0xffffefff

08004a88 <__sclose>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	230e      	movs	r3, #14
 8004a8c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a8e:	f000 f815 	bl	8004abc <_close_r>
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <_write_r>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	0004      	movs	r4, r0
 8004a98:	0008      	movs	r0, r1
 8004a9a:	0011      	movs	r1, r2
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4d05      	ldr	r5, [pc, #20]	; (8004ab8 <_write_r+0x24>)
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fc f8d0 	bl	8000c48 <_write>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d103      	bne.n	8004ab4 <_write_r+0x20>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d000      	beq.n	8004ab4 <_write_r+0x20>
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	200005e8 	.word	0x200005e8

08004abc <_close_r>:
 8004abc:	2300      	movs	r3, #0
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	4d06      	ldr	r5, [pc, #24]	; (8004adc <_close_r+0x20>)
 8004ac2:	0004      	movs	r4, r0
 8004ac4:	0008      	movs	r0, r1
 8004ac6:	602b      	str	r3, [r5, #0]
 8004ac8:	f7fc f91a 	bl	8000d00 <_close>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d103      	bne.n	8004ad8 <_close_r+0x1c>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d000      	beq.n	8004ad8 <_close_r+0x1c>
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	200005e8 	.word	0x200005e8

08004ae0 <_fstat_r>:
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	b570      	push	{r4, r5, r6, lr}
 8004ae4:	4d06      	ldr	r5, [pc, #24]	; (8004b00 <_fstat_r+0x20>)
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	0011      	movs	r1, r2
 8004aec:	602b      	str	r3, [r5, #0]
 8004aee:	f7fc f935 	bl	8000d5c <_fstat>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d103      	bne.n	8004afe <_fstat_r+0x1e>
 8004af6:	682b      	ldr	r3, [r5, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d000      	beq.n	8004afe <_fstat_r+0x1e>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	200005e8 	.word	0x200005e8

08004b04 <_isatty_r>:
 8004b04:	2300      	movs	r3, #0
 8004b06:	b570      	push	{r4, r5, r6, lr}
 8004b08:	4d06      	ldr	r5, [pc, #24]	; (8004b24 <_isatty_r+0x20>)
 8004b0a:	0004      	movs	r4, r0
 8004b0c:	0008      	movs	r0, r1
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	f7fc f88e 	bl	8000c30 <_isatty>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d103      	bne.n	8004b20 <_isatty_r+0x1c>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d000      	beq.n	8004b20 <_isatty_r+0x1c>
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	200005e8 	.word	0x200005e8

08004b28 <_lseek_r>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	0008      	movs	r0, r1
 8004b2e:	0011      	movs	r1, r2
 8004b30:	001a      	movs	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	4d05      	ldr	r5, [pc, #20]	; (8004b4c <_lseek_r+0x24>)
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fc f8ee 	bl	8000d18 <_lseek>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d103      	bne.n	8004b48 <_lseek_r+0x20>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d000      	beq.n	8004b48 <_lseek_r+0x20>
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	200005e8 	.word	0x200005e8

08004b50 <memchr>:
 8004b50:	b2c9      	uxtb	r1, r1
 8004b52:	1882      	adds	r2, r0, r2
 8004b54:	4290      	cmp	r0, r2
 8004b56:	d101      	bne.n	8004b5c <memchr+0xc>
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4770      	bx	lr
 8004b5c:	7803      	ldrb	r3, [r0, #0]
 8004b5e:	428b      	cmp	r3, r1
 8004b60:	d0fb      	beq.n	8004b5a <memchr+0xa>
 8004b62:	3001      	adds	r0, #1
 8004b64:	e7f6      	b.n	8004b54 <memchr+0x4>
	...

08004b68 <__malloc_lock>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4802      	ldr	r0, [pc, #8]	; (8004b74 <__malloc_lock+0xc>)
 8004b6c:	f7ff faf5 	bl	800415a <__retarget_lock_acquire_recursive>
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	200005dc 	.word	0x200005dc

08004b78 <__malloc_unlock>:
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	4802      	ldr	r0, [pc, #8]	; (8004b84 <__malloc_unlock+0xc>)
 8004b7c:	f7ff faee 	bl	800415c <__retarget_lock_release_recursive>
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	200005dc 	.word	0x200005dc

08004b88 <_read_r>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	0004      	movs	r4, r0
 8004b8c:	0008      	movs	r0, r1
 8004b8e:	0011      	movs	r1, r2
 8004b90:	001a      	movs	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	4d05      	ldr	r5, [pc, #20]	; (8004bac <_read_r+0x24>)
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	f7fc f8c6 	bl	8000d28 <_read>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d103      	bne.n	8004ba8 <_read_r+0x20>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d000      	beq.n	8004ba8 <_read_r+0x20>
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	bd70      	pop	{r4, r5, r6, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	200005e8 	.word	0x200005e8

08004bb0 <_init>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr

08004bbc <_fini>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr
