
HiFiDAC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004420  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800465c  0800465c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800465c  0800465c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800465c  0800465c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000070  080046d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  080046d4  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017988  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2b  00000000  00000000  00037a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000eb85  00000000  00000000  0003a44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00048fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c88  00000000  00000000  00049cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001539e  00000000  00000000  0004a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018399  00000000  00000000  0005fcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c881  00000000  00000000  00078087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f4908  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c58  00000000  00000000  000f4958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044c8 	.word	0x080044c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080044c8 	.word	0x080044c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <DAC_SPI_Read>:
  memcpy(spi_data + 2, data, size);

  return HAL_SPI_Transmit(&hspi1, spi_data, size + 2, 100);
}

HAL_StatusTypeDef DAC_SPI_Read(DAC_SPI_Register reg, uint8_t* data, uint8_t size) {
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	b0a5      	sub	sp, #148	; 0x94
 800040c:	0004      	movs	r4, r0
 800040e:	000d      	movs	r5, r1
 8000410:	0017      	movs	r7, r2
  uint8_t spi_send_data[66] = { 0 };
 8000412:	2600      	movs	r6, #0
 8000414:	9613      	str	r6, [sp, #76]	; 0x4c
 8000416:	223e      	movs	r2, #62	; 0x3e
 8000418:	2100      	movs	r1, #0
 800041a:	a814      	add	r0, sp, #80	; 0x50
 800041c:	f002 ff25 	bl	800326a <memset>
  uint8_t spi_receive_data[66] = { 0 };
 8000420:	9602      	str	r6, [sp, #8]
 8000422:	223e      	movs	r2, #62	; 0x3e
 8000424:	2100      	movs	r1, #0
 8000426:	a803      	add	r0, sp, #12
 8000428:	f002 ff1f 	bl	800326a <memset>

  uint8_t address = (uint8_t)reg;

  if (!(DAC_SPI_IS_READWRITE(address) || DAC_SPI_IS_READONLY(address)) || size > 64) return HAL_ERROR;
 800042c:	2c8e      	cmp	r4, #142	; 0x8e
 800042e:	d904      	bls.n	800043a <DAC_SPI_Read+0x32>
 8000430:	0023      	movs	r3, r4
 8000432:	3320      	adds	r3, #32
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b1b      	cmp	r3, #27
 8000438:	d81f      	bhi.n	800047a <DAC_SPI_Read+0x72>
 800043a:	2f40      	cmp	r7, #64	; 0x40
 800043c:	d903      	bls.n	8000446 <DAC_SPI_Read+0x3e>
 800043e:	2401      	movs	r4, #1

  HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(&hspi1, spi_send_data, spi_receive_data, size + 2, 100);

  if (result == HAL_OK) memcpy(data, spi_receive_data + 2, size);
  return result;
}
 8000440:	0020      	movs	r0, r4
 8000442:	b025      	add	sp, #148	; 0x94
 8000444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  spi_send_data[0] = 0x01; //read command
 8000446:	2301      	movs	r3, #1
 8000448:	466a      	mov	r2, sp
 800044a:	214c      	movs	r1, #76	; 0x4c
 800044c:	1852      	adds	r2, r2, r1
 800044e:	7013      	strb	r3, [r2, #0]
  spi_send_data[1] = address;
 8000450:	466b      	mov	r3, sp
 8000452:	224d      	movs	r2, #77	; 0x4d
 8000454:	189b      	adds	r3, r3, r2
 8000456:	701c      	strb	r4, [r3, #0]
  HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(&hspi1, spi_send_data, spi_receive_data, size + 2, 100);
 8000458:	1cbb      	adds	r3, r7, #2
 800045a:	3217      	adds	r2, #23
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	aa02      	add	r2, sp, #8
 8000460:	a913      	add	r1, sp, #76	; 0x4c
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <DAC_SPI_Read+0x78>)
 8000464:	f001 feb6 	bl	80021d4 <HAL_SPI_TransmitReceive>
 8000468:	1e04      	subs	r4, r0, #0
  if (result == HAL_OK) memcpy(data, spi_receive_data + 2, size);
 800046a:	d1e9      	bne.n	8000440 <DAC_SPI_Read+0x38>
 800046c:	003a      	movs	r2, r7
 800046e:	210a      	movs	r1, #10
 8000470:	4469      	add	r1, sp
 8000472:	0028      	movs	r0, r5
 8000474:	f002 fef0 	bl	8003258 <memcpy>
 8000478:	e7e2      	b.n	8000440 <DAC_SPI_Read+0x38>
  if (!(DAC_SPI_IS_READWRITE(address) || DAC_SPI_IS_READONLY(address)) || size > 64) return HAL_ERROR;
 800047a:	2401      	movs	r4, #1
 800047c:	e7e0      	b.n	8000440 <DAC_SPI_Read+0x38>
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200000d8 	.word	0x200000d8

08000484 <DAC_SPI_Read8>:
  uint8_t write24data[3] = { data & 0xFF, (data >> 8) & 0xFF, (data >> 16) & 0xFF };

  return DAC_SPI_Write(reg, write24data, 3);
}

HAL_StatusTypeDef DAC_SPI_Read8(DAC_SPI_Register reg, uint8_t* data) {
 8000484:	b510      	push	{r4, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	000c      	movs	r4, r1
  uint8_t read8data[1] = { 0 };
 800048a:	a901      	add	r1, sp, #4
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <DAC_SPI_Read8+0x24>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	700b      	strb	r3, [r1, #0]

  HAL_StatusTypeDef result = DAC_SPI_Read(reg, read8data, 1);
 8000492:	2201      	movs	r2, #1
 8000494:	f7ff ffb8 	bl	8000408 <DAC_SPI_Read>

  if (result == HAL_OK) *data = read8data[0];
 8000498:	2800      	cmp	r0, #0
 800049a:	d102      	bne.n	80004a2 <DAC_SPI_Read8+0x1e>
 800049c:	ab01      	add	r3, sp, #4
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	7023      	strb	r3, [r4, #0]
  return result;
}
 80004a2:	b002      	add	sp, #8
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	08004538 	.word	0x08004538

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	46c6      	mov	lr, r8
 80004b0:	b500      	push	{lr}
 80004b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	2214      	movs	r2, #20
 80004b6:	2100      	movs	r1, #0
 80004b8:	a803      	add	r0, sp, #12
 80004ba:	f002 fed6 	bl	800326a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b28      	ldr	r3, [pc, #160]	; (8000560 <MX_GPIO_Init+0xb4>)
 80004c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004c2:	2204      	movs	r2, #4
 80004c4:	4311      	orrs	r1, r2
 80004c6:	6359      	str	r1, [r3, #52]	; 0x34
 80004c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004ca:	400a      	ands	r2, r1
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d2:	2501      	movs	r5, #1
 80004d4:	432a      	orrs	r2, r5
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
 80004d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004da:	402a      	ands	r2, r5
 80004dc:	9201      	str	r2, [sp, #4]
 80004de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004e2:	2202      	movs	r2, #2
 80004e4:	4311      	orrs	r1, r2
 80004e6:	6359      	str	r1, [r3, #52]	; 0x34
 80004e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ea:	401a      	ands	r2, r3
 80004ec:	9202      	str	r2, [sp, #8]
 80004ee:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_EN_GPIO_Port, DAC_EN_Pin, GPIO_PIN_RESET);
 80004f0:	27a0      	movs	r7, #160	; 0xa0
 80004f2:	05ff      	lsls	r7, r7, #23
 80004f4:	2200      	movs	r2, #0
 80004f6:	2108      	movs	r1, #8
 80004f8:	0038      	movs	r0, r7
 80004fa:	f000 fd83 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_INT_N_GPIO_Port, I2C_INT_N_Pin, GPIO_PIN_SET);
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4698      	mov	r8, r3
 8000504:	4e17      	ldr	r6, [pc, #92]	; (8000564 <MX_GPIO_Init+0xb8>)
 8000506:	2201      	movs	r2, #1
 8000508:	0019      	movs	r1, r3
 800050a:	0030      	movs	r0, r6
 800050c:	f000 fd7a 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DAC_EN_Pin */
  GPIO_InitStruct.Pin = DAC_EN_Pin;
 8000510:	2308      	movs	r3, #8
 8000512:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2400      	movs	r4, #0
 8000518:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DAC_EN_GPIO_Port, &GPIO_InitStruct);
 800051c:	a903      	add	r1, sp, #12
 800051e:	0038      	movs	r0, r7
 8000520:	f000 fc92 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 800052c:	a903      	add	r1, sp, #12
 800052e:	0038      	movs	r0, r7
 8000530:	f000 fc8a 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO3_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO3_Pin|GPIO4_Pin;
 8000534:	2307      	movs	r3, #7
 8000536:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	a903      	add	r1, sp, #12
 800053e:	0030      	movs	r0, r6
 8000540:	f000 fc82 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_N_Pin */
  GPIO_InitStruct.Pin = I2C_INT_N_Pin;
 8000544:	4643      	mov	r3, r8
 8000546:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(I2C_INT_N_GPIO_Port, &GPIO_InitStruct);
 800054e:	a903      	add	r1, sp, #12
 8000550:	0030      	movs	r0, r6
 8000552:	f000 fc79 	bl	8000e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000556:	b008      	add	sp, #32
 8000558:	bc80      	pop	{r7}
 800055a:	46b8      	mov	r8, r7
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000
 8000564:	50000400 	.word	0x50000400

08000568 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056a:	e7fe      	b.n	800056a <Error_Handler+0x2>

0800056c <MX_SPI1_Init>:
{
 800056c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800056e:	4810      	ldr	r0, [pc, #64]	; (80005b0 <MX_SPI1_Init+0x44>)
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <MX_SPI1_Init+0x48>)
 8000572:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000574:	2382      	movs	r3, #130	; 0x82
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800057a:	2300      	movs	r3, #0
 800057c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800057e:	22e0      	movs	r2, #224	; 0xe0
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000584:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000586:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	02d2      	lsls	r2, r2, #11
 800058c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000592:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000594:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000596:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000598:	3a29      	subs	r2, #41	; 0x29
 800059a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800059c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800059e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a0:	f001 fd96 	bl	80020d0 <HAL_SPI_Init>
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d100      	bne.n	80005aa <MX_SPI1_Init+0x3e>
}
 80005a8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005aa:	f7ff ffdd 	bl	8000568 <Error_Handler>
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	200000d8 	.word	0x200000d8
 80005b4:	40013000 	.word	0x40013000

080005b8 <MX_I2C1_Init>:
{
 80005b8:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <MX_I2C1_Init+0x50>)
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_I2C1_Init+0x54>)
 80005be:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00802D3B;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <MX_I2C1_Init+0x58>)
 80005c2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 58;
 80005c4:	233a      	movs	r3, #58	; 0x3a
 80005c6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c8:	3b39      	subs	r3, #57	; 0x39
 80005ca:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d8:	f000 fd60 	bl	800109c <HAL_I2C_Init>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d10c      	bne.n	80005fa <MX_I2C1_Init+0x42>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <MX_I2C1_Init+0x50>)
 80005e4:	f001 f8ce 	bl	8001784 <HAL_I2CEx_ConfigAnalogFilter>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d108      	bne.n	80005fe <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <MX_I2C1_Init+0x50>)
 80005f0:	f001 f8f4 	bl	80017dc <HAL_I2CEx_ConfigDigitalFilter>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d104      	bne.n	8000602 <MX_I2C1_Init+0x4a>
}
 80005f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005fa:	f7ff ffb5 	bl	8000568 <Error_Handler>
    Error_Handler();
 80005fe:	f7ff ffb3 	bl	8000568 <Error_Handler>
    Error_Handler();
 8000602:	f7ff ffb1 	bl	8000568 <Error_Handler>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	2000008c 	.word	0x2000008c
 800060c:	40005400 	.word	0x40005400
 8000610:	00802d3b 	.word	0x00802d3b

08000614 <MX_USART1_UART_Init>:
{
 8000614:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_USART1_UART_Init+0x60>)
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_USART1_UART_Init+0x64>)
 800061a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800061c:	23e1      	movs	r3, #225	; 0xe1
 800061e:	025b      	lsls	r3, r3, #9
 8000620:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	2300      	movs	r3, #0
 8000624:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000626:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000628:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062a:	220c      	movs	r2, #12
 800062c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000634:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000636:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000638:	f002 fd12 	bl	8003060 <HAL_UART_Init>
 800063c:	2800      	cmp	r0, #0
 800063e:	d111      	bne.n	8000664 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000640:	2100      	movs	r1, #0
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_USART1_UART_Init+0x60>)
 8000644:	f002 fd90 	bl	8003168 <HAL_UARTEx_SetTxFifoThreshold>
 8000648:	2800      	cmp	r0, #0
 800064a:	d10d      	bne.n	8000668 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_USART1_UART_Init+0x60>)
 8000650:	f002 fdb0 	bl	80031b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000654:	2800      	cmp	r0, #0
 8000656:	d109      	bne.n	800066c <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_USART1_UART_Init+0x60>)
 800065a:	f002 fd65 	bl	8003128 <HAL_UARTEx_DisableFifoMode>
 800065e:	2800      	cmp	r0, #0
 8000660:	d106      	bne.n	8000670 <MX_USART1_UART_Init+0x5c>
}
 8000662:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000664:	f7ff ff80 	bl	8000568 <Error_Handler>
    Error_Handler();
 8000668:	f7ff ff7e 	bl	8000568 <Error_Handler>
    Error_Handler();
 800066c:	f7ff ff7c 	bl	8000568 <Error_Handler>
    Error_Handler();
 8000670:	f7ff ff7a 	bl	8000568 <Error_Handler>
 8000674:	2000013c 	.word	0x2000013c
 8000678:	40013800 	.word	0x40013800

0800067c <SystemClock_Config>:
{
 800067c:	b500      	push	{lr}
 800067e:	b08d      	sub	sp, #52	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	221c      	movs	r2, #28
 8000682:	2100      	movs	r1, #0
 8000684:	a805      	add	r0, sp, #20
 8000686:	f002 fdf0 	bl	800326a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	2214      	movs	r2, #20
 800068c:	2100      	movs	r1, #0
 800068e:	4668      	mov	r0, sp
 8000690:	f002 fdeb 	bl	800326a <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	33fe      	adds	r3, #254	; 0xfe
 800069a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	015b      	lsls	r3, r3, #5
 80006a0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	a805      	add	r0, sp, #20
 80006a8:	f001 f8c2 	bl	8001830 <HAL_RCC_OscConfig>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d10e      	bne.n	80006ce <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	2307      	movs	r3, #7
 80006b2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ba:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006bc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4668      	mov	r0, sp
 80006c2:	f001 fa57 	bl	8001b74 <HAL_RCC_ClockConfig>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d103      	bne.n	80006d2 <SystemClock_Config+0x56>
}
 80006ca:	b00d      	add	sp, #52	; 0x34
 80006cc:	bd00      	pop	{pc}
    Error_Handler();
 80006ce:	f7ff ff4b 	bl	8000568 <Error_Handler>
    Error_Handler();
 80006d2:	f7ff ff49 	bl	8000568 <Error_Handler>
	...

080006d8 <main>:
{
 80006d8:	b510      	push	{r4, lr}
 80006da:	b082      	sub	sp, #8
  HAL_Init();
 80006dc:	f000 faa4 	bl	8000c28 <HAL_Init>
  SystemClock_Config();
 80006e0:	f7ff ffcc 	bl	800067c <SystemClock_Config>
  MX_GPIO_Init();
 80006e4:	f7ff fee2 	bl	80004ac <MX_GPIO_Init>
  MX_SPI1_Init();
 80006e8:	f7ff ff40 	bl	800056c <MX_SPI1_Init>
  MX_I2C1_Init();
 80006ec:	f7ff ff64 	bl	80005b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006f0:	f7ff ff90 	bl	8000614 <MX_USART1_UART_Init>
  RetargetInit(&huart1);
 80006f4:	4819      	ldr	r0, [pc, #100]	; (800075c <main+0x84>)
 80006f6:	f000 f83b 	bl	8000770 <RetargetInit>
  HAL_Delay(1000);
 80006fa:	24fa      	movs	r4, #250	; 0xfa
 80006fc:	00a4      	lsls	r4, r4, #2
 80006fe:	0020      	movs	r0, r4
 8000700:	f000 fab0 	bl	8000c64 <HAL_Delay>
  printf("Controller init complete\n");
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <main+0x88>)
 8000706:	f002 fe45 	bl	8003394 <puts>
  HAL_Delay(1000);
 800070a:	0020      	movs	r0, r4
 800070c:	f000 faaa 	bl	8000c64 <HAL_Delay>
  printf("Enabling DAC...\n");
 8000710:	4814      	ldr	r0, [pc, #80]	; (8000764 <main+0x8c>)
 8000712:	f002 fe3f 	bl	8003394 <puts>
  HAL_GPIO_WritePin(DAC_EN_GPIO_Port, DAC_EN_Pin, GPIO_PIN_SET);
 8000716:	20a0      	movs	r0, #160	; 0xa0
 8000718:	2201      	movs	r2, #1
 800071a:	2108      	movs	r1, #8
 800071c:	05c0      	lsls	r0, r0, #23
 800071e:	f000 fc71 	bl	8001004 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000722:	0020      	movs	r0, r4
 8000724:	f000 fa9e 	bl	8000c64 <HAL_Delay>
  uint8_t chip_id = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	466a      	mov	r2, sp
 800072c:	71d3      	strb	r3, [r2, #7]
  HAL_StatusTypeDef res = DAC_SPI_Read8(REG_CHIP_ID_READ, &chip_id);
 800072e:	1dd1      	adds	r1, r2, #7
 8000730:	20e1      	movs	r0, #225	; 0xe1
 8000732:	f7ff fea7 	bl	8000484 <DAC_SPI_Read8>
 8000736:	0004      	movs	r4, r0
  printf("Chip ID: 0x%x\n", chip_id);
 8000738:	466b      	mov	r3, sp
 800073a:	79d9      	ldrb	r1, [r3, #7]
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <main+0x90>)
 800073e:	f002 fd9d 	bl	800327c <iprintf>
  if (res != HAL_OK || chip_id != 0x63) {
 8000742:	2c00      	cmp	r4, #0
 8000744:	d104      	bne.n	8000750 <main+0x78>
 8000746:	466b      	mov	r3, sp
 8000748:	3307      	adds	r3, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b63      	cmp	r3, #99	; 0x63
 800074e:	d004      	beq.n	800075a <main+0x82>
      printf("ERROR: INCORRECT DAC CHIP ID\n");
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <main+0x94>)
 8000752:	f002 fe1f 	bl	8003394 <puts>
      Error_Handler();
 8000756:	f7ff ff07 	bl	8000568 <Error_Handler>
  while (1)
 800075a:	e7fe      	b.n	800075a <main+0x82>
 800075c:	2000013c 	.word	0x2000013c
 8000760:	080044e0 	.word	0x080044e0
 8000764:	080044fc 	.word	0x080044fc
 8000768:	0800450c 	.word	0x0800450c
 800076c:	0800451c 	.word	0x0800451c

08000770 <RetargetInit>:

static uint8_t sendBuf[1024] = { 0 };
static uint16_t buf_writePos = 0;
static uint16_t buf_lastReadPos = 0;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000770:	b510      	push	{r4, lr}
  gHuart = huart;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <RetargetInit+0x18>)
 8000774:	6018      	str	r0, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <RetargetInit+0x1c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6898      	ldr	r0, [r3, #8]
 800077c:	2300      	movs	r3, #0
 800077e:	2202      	movs	r2, #2
 8000780:	2100      	movs	r1, #0
 8000782:	f002 fe11 	bl	80033a8 <setvbuf>
}
 8000786:	bd10      	pop	{r4, pc}
 8000788:	200001d0 	.word	0x200001d0
 800078c:	2000000c 	.word	0x2000000c

08000790 <_isatty>:

int _isatty(int fd) {
 8000790:	b510      	push	{r4, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000792:	2802      	cmp	r0, #2
 8000794:	d801      	bhi.n	800079a <_isatty+0xa>
    return 1;
 8000796:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8000798:	bd10      	pop	{r4, pc}
  errno = EBADF;
 800079a:	f002 fd33 	bl	8003204 <__errno>
 800079e:	2309      	movs	r3, #9
 80007a0:	6003      	str	r3, [r0, #0]
  return 0;
 80007a2:	2000      	movs	r0, #0
 80007a4:	e7f8      	b.n	8000798 <_isatty+0x8>
	...

080007a8 <_write>:

int _write(int fd, char* ptr, int len) {
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	0014      	movs	r4, r2
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80007ac:	3801      	subs	r0, #1
 80007ae:	2801      	cmp	r0, #1
 80007b0:	d81e      	bhi.n	80007f0 <_write+0x48>
 80007b2:	b672      	cpsid	i
    __disable_irq();

    memcpy(sendBuf + buf_writePos, ptr, len);
 80007b4:	4e13      	ldr	r6, [pc, #76]	; (8000804 <_write+0x5c>)
 80007b6:	8835      	ldrh	r5, [r6, #0]
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <_write+0x60>)
 80007ba:	1828      	adds	r0, r5, r0
 80007bc:	f002 fd4c 	bl	8003258 <memcpy>
    buf_writePos += len;
 80007c0:	192d      	adds	r5, r5, r4
 80007c2:	b2aa      	uxth	r2, r5
 80007c4:	8032      	strh	r2, [r6, #0]

    if (buf_lastReadPos == 0) {
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <_write+0x64>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <_write+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 80007ce:	b662      	cpsie	i
	return len;
      else
	return EIO;
    } else {
      __enable_irq();
      return len;
 80007d0:	0020      	movs	r0, r4
    }
  }
  errno = EBADF;
  return -1;
}
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
      hstatus = HAL_UART_Transmit_IT(gHuart, sendBuf, buf_writePos);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <_write+0x68>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	490b      	ldr	r1, [pc, #44]	; (8000808 <_write+0x60>)
 80007da:	f001 ff71 	bl	80026c0 <HAL_UART_Transmit_IT>
      buf_lastReadPos = buf_writePos;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <_write+0x5c>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <_write+0x64>)
 80007e4:	801a      	strh	r2, [r3, #0]
 80007e6:	b662      	cpsie	i
      if (hstatus == HAL_OK)
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d108      	bne.n	80007fe <_write+0x56>
	return len;
 80007ec:	0020      	movs	r0, r4
 80007ee:	e7f0      	b.n	80007d2 <_write+0x2a>
  errno = EBADF;
 80007f0:	f002 fd08 	bl	8003204 <__errno>
 80007f4:	2309      	movs	r3, #9
 80007f6:	6003      	str	r3, [r0, #0]
  return -1;
 80007f8:	2001      	movs	r0, #1
 80007fa:	4240      	negs	r0, r0
 80007fc:	e7e9      	b.n	80007d2 <_write+0x2a>
	return EIO;
 80007fe:	2005      	movs	r0, #5
 8000800:	e7e7      	b.n	80007d2 <_write+0x2a>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200001ce 	.word	0x200001ce
 8000808:	200001d4 	.word	0x200001d4
 800080c:	200001cc 	.word	0x200001cc
 8000810:	200001d0 	.word	0x200001d0

08000814 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000814:	b510      	push	{r4, lr}
  if (huart == gHuart) {
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_UART_TxCpltCallback+0x3c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4283      	cmp	r3, r0
 800081c:	d000      	beq.n	8000820 <HAL_UART_TxCpltCallback+0xc>
    } else {
      HAL_UART_Transmit_IT(gHuart, sendBuf + buf_lastReadPos, buf_writePos - buf_lastReadPos);
      buf_lastReadPos = buf_writePos;
    }
  }
}
 800081e:	bd10      	pop	{r4, pc}
    if (buf_writePos <= buf_lastReadPos) {
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_UART_TxCpltCallback+0x40>)
 8000822:	8812      	ldrh	r2, [r2, #0]
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <HAL_UART_TxCpltCallback+0x44>)
 8000826:	8809      	ldrh	r1, [r1, #0]
 8000828:	428a      	cmp	r2, r1
 800082a:	d805      	bhi.n	8000838 <HAL_UART_TxCpltCallback+0x24>
      buf_writePos = buf_lastReadPos = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_UART_TxCpltCallback+0x44>)
 8000830:	8013      	strh	r3, [r2, #0]
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_UART_TxCpltCallback+0x40>)
 8000834:	8013      	strh	r3, [r2, #0]
 8000836:	e7f2      	b.n	800081e <HAL_UART_TxCpltCallback+0xa>
      HAL_UART_Transmit_IT(gHuart, sendBuf + buf_lastReadPos, buf_writePos - buf_lastReadPos);
 8000838:	1a52      	subs	r2, r2, r1
 800083a:	b292      	uxth	r2, r2
 800083c:	4807      	ldr	r0, [pc, #28]	; (800085c <HAL_UART_TxCpltCallback+0x48>)
 800083e:	1809      	adds	r1, r1, r0
 8000840:	0018      	movs	r0, r3
 8000842:	f001 ff3d 	bl	80026c0 <HAL_UART_Transmit_IT>
      buf_lastReadPos = buf_writePos;
 8000846:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_UART_TxCpltCallback+0x40>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_UART_TxCpltCallback+0x44>)
 800084c:	801a      	strh	r2, [r3, #0]
}
 800084e:	e7e6      	b.n	800081e <HAL_UART_TxCpltCallback+0xa>
 8000850:	200001d0 	.word	0x200001d0
 8000854:	200001ce 	.word	0x200001ce
 8000858:	200001cc 	.word	0x200001cc
 800085c:	200001d4 	.word	0x200001d4

08000860 <_close>:

int _close(int fd) {
 8000860:	b510      	push	{r4, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000862:	2802      	cmp	r0, #2
 8000864:	d801      	bhi.n	800086a <_close+0xa>
    return 0;
 8000866:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8000868:	bd10      	pop	{r4, pc}
  errno = EBADF;
 800086a:	f002 fccb 	bl	8003204 <__errno>
 800086e:	2309      	movs	r3, #9
 8000870:	6003      	str	r3, [r0, #0]
  return -1;
 8000872:	2001      	movs	r0, #1
 8000874:	4240      	negs	r0, r0
 8000876:	e7f7      	b.n	8000868 <_close+0x8>

08000878 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000878:	b510      	push	{r4, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800087a:	f002 fcc3 	bl	8003204 <__errno>
 800087e:	2309      	movs	r3, #9
 8000880:	6003      	str	r3, [r0, #0]
  return -1;
 8000882:	2001      	movs	r0, #1
}
 8000884:	4240      	negs	r0, r0
 8000886:	bd10      	pop	{r4, pc}

08000888 <_read>:

int _read(int fd, char* ptr, int len) {
 8000888:	b510      	push	{r4, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800088a:	2800      	cmp	r0, #0
 800088c:	d10a      	bne.n	80008a4 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800088e:	2301      	movs	r3, #1
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <_read+0x30>)
 8000892:	6810      	ldr	r0, [r2, #0]
 8000894:	425b      	negs	r3, r3
 8000896:	2201      	movs	r2, #1
 8000898:	f002 faf8 	bl	8002e8c <HAL_UART_Receive>
    if (hstatus == HAL_OK)
 800089c:	2800      	cmp	r0, #0
 800089e:	d108      	bne.n	80008b2 <_read+0x2a>
      return 1;
 80008a0:	3001      	adds	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80008a2:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80008a4:	f002 fcae 	bl	8003204 <__errno>
 80008a8:	2309      	movs	r3, #9
 80008aa:	6003      	str	r3, [r0, #0]
  return -1;
 80008ac:	2001      	movs	r0, #1
 80008ae:	4240      	negs	r0, r0
 80008b0:	e7f7      	b.n	80008a2 <_read+0x1a>
      return EIO;
 80008b2:	2005      	movs	r0, #5
 80008b4:	e7f5      	b.n	80008a2 <_read+0x1a>
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200001d0 	.word	0x200001d0

080008bc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80008bc:	b510      	push	{r4, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80008be:	2802      	cmp	r0, #2
 80008c0:	d804      	bhi.n	80008cc <_fstat+0x10>
    st->st_mode = S_IFCHR;
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80008cc:	f002 fc9a 	bl	8003204 <__errno>
 80008d0:	2309      	movs	r3, #9
 80008d2:	6003      	str	r3, [r0, #0]
  return 0;
 80008d4:	e7f8      	b.n	80008c8 <_fstat+0xc>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_MspInit+0x2c>)
 80008dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80008de:	2201      	movs	r2, #1
 80008e0:	4311      	orrs	r1, r2
 80008e2:	6419      	str	r1, [r3, #64]	; 0x40
 80008e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80008e6:	400a      	ands	r2, r1
 80008e8:	9200      	str	r2, [sp, #0]
 80008ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	0549      	lsls	r1, r1, #21
 80008f2:	430a      	orrs	r2, r1
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f8:	400b      	ands	r3, r1
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	b002      	add	sp, #8
 8000900:	4770      	bx	lr
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000908:	b510      	push	{r4, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	2214      	movs	r2, #20
 8000910:	2100      	movs	r1, #0
 8000912:	a809      	add	r0, sp, #36	; 0x24
 8000914:	f002 fca9 	bl	800326a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	221c      	movs	r2, #28
 800091a:	2100      	movs	r1, #0
 800091c:	a802      	add	r0, sp, #8
 800091e:	f002 fca4 	bl	800326a <memset>
  if(hi2c->Instance==I2C1)
 8000922:	6822      	ldr	r2, [r4, #0]
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_I2C_MspInit+0x8c>)
 8000926:	429a      	cmp	r2, r3
 8000928:	d001      	beq.n	800092e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800092a:	b00e      	add	sp, #56	; 0x38
 800092c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000932:	a802      	add	r0, sp, #8
 8000934:	f001 fa00 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	2800      	cmp	r0, #0
 800093a:	d127      	bne.n	800098c <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4c16      	ldr	r4, [pc, #88]	; (8000998 <HAL_I2C_MspInit+0x90>)
 800093e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	6362      	str	r2, [r4, #52]	; 0x34
 8000946:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000948:	4013      	ands	r3, r2
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800094e:	23c0      	movs	r3, #192	; 0xc0
 8000950:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000952:	3bae      	subs	r3, #174	; 0xae
 8000954:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800095c:	3306      	adds	r3, #6
 800095e:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	a909      	add	r1, sp, #36	; 0x24
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <HAL_I2C_MspInit+0x94>)
 8000964:	f000 fa70 	bl	8000e48 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000968:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	0389      	lsls	r1, r1, #14
 800096e:	430a      	orrs	r2, r1
 8000970:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000972:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000974:	400b      	ands	r3, r1
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2101      	movs	r1, #1
 800097e:	2017      	movs	r0, #23
 8000980:	f000 f982 	bl	8000c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000984:	2017      	movs	r0, #23
 8000986:	f000 f9af 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
}
 800098a:	e7ce      	b.n	800092a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800098c:	f7ff fdec 	bl	8000568 <Error_Handler>
 8000990:	e7d4      	b.n	800093c <HAL_I2C_MspInit+0x34>
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40005400 	.word	0x40005400
 8000998:	40021000 	.word	0x40021000
 800099c:	50000400 	.word	0x50000400

080009a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a0:	b510      	push	{r4, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	2214      	movs	r2, #20
 80009a8:	2100      	movs	r1, #0
 80009aa:	a809      	add	r0, sp, #36	; 0x24
 80009ac:	f002 fc5d 	bl	800326a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b0:	221c      	movs	r2, #28
 80009b2:	2100      	movs	r1, #0
 80009b4:	a802      	add	r0, sp, #8
 80009b6:	f002 fc58 	bl	800326a <memset>
  if(hspi->Instance==SPI1)
 80009ba:	6822      	ldr	r2, [r4, #0]
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_SPI_MspInit+0x7c>)
 80009be:	429a      	cmp	r2, r3
 80009c0:	d001      	beq.n	80009c6 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c2:	b00e      	add	sp, #56	; 0x38
 80009c4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	011b      	lsls	r3, r3, #4
 80009ca:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	a802      	add	r0, sp, #8
 80009ce:	f001 f9b3 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d11f      	bne.n	8000a16 <HAL_SPI_MspInit+0x76>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_SPI_MspInit+0x80>)
 80009d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80009da:	2080      	movs	r0, #128	; 0x80
 80009dc:	0140      	lsls	r0, r0, #5
 80009de:	4301      	orrs	r1, r0
 80009e0:	6419      	str	r1, [r3, #64]	; 0x40
 80009e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e4:	4002      	ands	r2, r0
 80009e6:	9200      	str	r2, [sp, #0]
 80009e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ec:	2201      	movs	r2, #1
 80009ee:	4311      	orrs	r1, r2
 80009f0:	6359      	str	r1, [r3, #52]	; 0x34
 80009f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f4:	401a      	ands	r2, r3
 80009f6:	9201      	str	r2, [sp, #4]
 80009f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 80009fa:	2356      	movs	r3, #86	; 0x56
 80009fc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	3b54      	subs	r3, #84	; 0x54
 8000a00:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a08:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	20a0      	movs	r0, #160	; 0xa0
 8000a0c:	a909      	add	r1, sp, #36	; 0x24
 8000a0e:	05c0      	lsls	r0, r0, #23
 8000a10:	f000 fa1a 	bl	8000e48 <HAL_GPIO_Init>
}
 8000a14:	e7d5      	b.n	80009c2 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8000a16:	f7ff fda7 	bl	8000568 <Error_Handler>
 8000a1a:	e7dc      	b.n	80009d6 <HAL_SPI_MspInit+0x36>
 8000a1c:	40013000 	.word	0x40013000
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	b090      	sub	sp, #64	; 0x40
 8000a28:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	2214      	movs	r2, #20
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	a80b      	add	r0, sp, #44	; 0x2c
 8000a30:	f002 fc1b 	bl	800326a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	221c      	movs	r2, #28
 8000a36:	2100      	movs	r1, #0
 8000a38:	a804      	add	r0, sp, #16
 8000a3a:	f002 fc16 	bl	800326a <memset>
  if(huart->Instance==USART1)
 8000a3e:	6822      	ldr	r2, [r4, #0]
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <HAL_UART_MspInit+0xb0>)
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d001      	beq.n	8000a4a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a46:	b010      	add	sp, #64	; 0x40
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	a804      	add	r0, sp, #16
 8000a50:	f001 f972 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d139      	bne.n	8000acc <HAL_UART_MspInit+0xa8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_UART_MspInit+0xb4>)
 8000a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	01c9      	lsls	r1, r1, #7
 8000a60:	430a      	orrs	r2, r1
 8000a62:	641a      	str	r2, [r3, #64]	; 0x40
 8000a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a66:	400a      	ands	r2, r1
 8000a68:	9201      	str	r2, [sp, #4]
 8000a6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a6e:	2204      	movs	r2, #4
 8000a70:	4310      	orrs	r0, r2
 8000a72:	6358      	str	r0, [r3, #52]	; 0x34
 8000a74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a76:	4002      	ands	r2, r0
 8000a78:	9202      	str	r2, [sp, #8]
 8000a7a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	2501      	movs	r5, #1
 8000a80:	432a      	orrs	r2, r5
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34
 8000a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a86:	402b      	ands	r3, r5
 8000a88:	9303      	str	r3, [sp, #12]
 8000a8a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a8c:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2602      	movs	r6, #2
 8000a90:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2400      	movs	r4, #0
 8000a94:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a98:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <HAL_UART_MspInit+0xb8>)
 8000a9e:	f000 f9d3 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000aae:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	20a0      	movs	r0, #160	; 0xa0
 8000ab2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ab4:	05c0      	lsls	r0, r0, #23
 8000ab6:	f000 f9c7 	bl	8000e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	201b      	movs	r0, #27
 8000ac0:	f000 f8e2 	bl	8000c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ac4:	201b      	movs	r0, #27
 8000ac6:	f000 f90f 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
}
 8000aca:	e7bc      	b.n	8000a46 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000acc:	f7ff fd4c 	bl	8000568 <Error_Handler>
 8000ad0:	e7c2      	b.n	8000a58 <HAL_UART_MspInit+0x34>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	50000800 	.word	0x50000800

08000ae0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler>

08000ae2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler>

08000ae4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f8a9 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bd10      	pop	{r4, pc}

08000af0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000af0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <I2C1_IRQHandler+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	699a      	ldr	r2, [r3, #24]
 8000af8:	23e0      	movs	r3, #224	; 0xe0
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	421a      	tst	r2, r3
 8000afe:	d003      	beq.n	8000b08 <I2C1_IRQHandler+0x18>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <I2C1_IRQHandler+0x20>)
 8000b02:	f000 fe01 	bl	8001708 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000b06:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b08:	4801      	ldr	r0, [pc, #4]	; (8000b10 <I2C1_IRQHandler+0x20>)
 8000b0a:	f000 fb2d 	bl	8001168 <HAL_I2C_EV_IRQHandler>
}
 8000b0e:	e7fa      	b.n	8000b06 <I2C1_IRQHandler+0x16>
 8000b10:	2000008c 	.word	0x2000008c

08000b14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b14:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b16:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART1_IRQHandler+0xc>)
 8000b18:	f001 fe6a 	bl	80027f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1c:	bd10      	pop	{r4, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	2000013c 	.word	0x2000013c

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b510      	push	{r4, lr}
 8000b26:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <_sbrk+0x38>)
 8000b2a:	490d      	ldr	r1, [pc, #52]	; (8000b60 <_sbrk+0x3c>)
 8000b2c:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <_sbrk+0x40>)
 8000b30:	6809      	ldr	r1, [r1, #0]
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d007      	beq.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	490b      	ldr	r1, [pc, #44]	; (8000b64 <_sbrk+0x40>)
 8000b38:	6808      	ldr	r0, [r1, #0]
 8000b3a:	18c3      	adds	r3, r0, r3
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d806      	bhi.n	8000b4e <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <_sbrk+0x40>)
 8000b42:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b44:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b46:	4907      	ldr	r1, [pc, #28]	; (8000b64 <_sbrk+0x40>)
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <_sbrk+0x44>)
 8000b4a:	6008      	str	r0, [r1, #0]
 8000b4c:	e7f3      	b.n	8000b36 <_sbrk+0x12>
    errno = ENOMEM;
 8000b4e:	f002 fb59 	bl	8003204 <__errno>
 8000b52:	230c      	movs	r3, #12
 8000b54:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b56:	2001      	movs	r0, #1
 8000b58:	4240      	negs	r0, r0
 8000b5a:	e7f3      	b.n	8000b44 <_sbrk+0x20>
 8000b5c:	20003000 	.word	0x20003000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	200005d4 	.word	0x200005d4
 8000b68:	200005f0 	.word	0x200005f0

08000b6c <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <SystemInit+0xc>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	0512      	lsls	r2, r2, #20
 8000b72:	609a      	str	r2, [r3, #8]
#endif
}
 8000b74:	4770      	bx	lr
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b82:	e003      	b.n	8000b8c <LoopCopyDataInit>

08000b84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b8a:	3104      	adds	r1, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <LoopForever+0xa>)
  ldr r3, =_edata
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b94:	d3f6      	bcc.n	8000b84 <CopyDataInit>
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b98:	e002      	b.n	8000ba0 <LoopFillZerobss>

08000b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b9c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9e:	3204      	adds	r2, #4

08000ba0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <LoopForever+0x16>)
  cmp r2, r3
 8000ba2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ba4:	d3f9      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba6:	f7ff ffe1 	bl	8000b6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000baa:	f002 fb31 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fd93 	bl	80006d8 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000bb8:	08004664 	.word	0x08004664
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bc0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000bc4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000bc8:	200005ec 	.word	0x200005ec

08000bcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_IRQHandler>
	...

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_InitTick+0x4c>)
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000bde:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000be0:	20fa      	movs	r0, #250	; 0xfa
 8000be2:	0080      	lsls	r0, r0, #2
 8000be4:	f7ff fa9a 	bl	800011c <__udivsi3>
 8000be8:	0001      	movs	r1, r0
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_InitTick+0x50>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	f7ff fa95 	bl	800011c <__udivsi3>
 8000bf2:	f000 f885 	bl	8000d00 <HAL_SYSTICK_Config>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d10d      	bne.n	8000c16 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	2c03      	cmp	r4, #3
 8000bfc:	d901      	bls.n	8000c02 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
 8000c00:	e7ed      	b.n	8000bde <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	3001      	adds	r0, #1
 8000c04:	2200      	movs	r2, #0
 8000c06:	0021      	movs	r1, r4
 8000c08:	4240      	negs	r0, r0
 8000c0a:	f000 f83d 	bl	8000c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_InitTick+0x54>)
 8000c10:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	2000      	movs	r0, #0
 8000c14:	e7e3      	b.n	8000bde <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000c16:	2001      	movs	r0, #1
 8000c18:	e7e1      	b.n	8000bde <HAL_InitTick+0xe>
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008

08000c28 <HAL_Init>:
{
 8000c28:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f7ff ffd0 	bl	8000bd0 <HAL_InitTick>
 8000c30:	1e04      	subs	r4, r0, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000c34:	2401      	movs	r4, #1
}
 8000c36:	0020      	movs	r0, r4
 8000c38:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000c3a:	f7ff fe4d 	bl	80008d8 <HAL_MspInit>
 8000c3e:	e7fa      	b.n	8000c36 <HAL_Init+0xe>

08000c40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <HAL_IncTick+0x10>)
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	4903      	ldr	r1, [pc, #12]	; (8000c54 <HAL_IncTick+0x14>)
 8000c46:	6809      	ldr	r1, [r1, #0]
 8000c48:	185b      	adds	r3, r3, r1
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	4770      	bx	lr
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	200005d8 	.word	0x200005d8
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <HAL_GetTick+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	200005d8 	.word	0x200005d8

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff fff6 	bl	8000c58 <HAL_GetTick>
 8000c6c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	1c63      	adds	r3, r4, #1
 8000c70:	d002      	beq.n	8000c78 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_Delay+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	1b40      	subs	r0, r0, r5
 8000c7e:	42a0      	cmp	r0, r4
 8000c80:	d3fa      	bcc.n	8000c78 <HAL_Delay+0x14>
  {
  }
}
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	db11      	blt.n	8000cb2 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	0883      	lsrs	r3, r0, #2
 8000c90:	4e13      	ldr	r6, [pc, #76]	; (8000ce0 <HAL_NVIC_SetPriority+0x58>)
 8000c92:	33c0      	adds	r3, #192	; 0xc0
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	599d      	ldr	r5, [r3, r6]
 8000c98:	2403      	movs	r4, #3
 8000c9a:	4020      	ands	r0, r4
 8000c9c:	00c0      	lsls	r0, r0, #3
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	0014      	movs	r4, r2
 8000ca2:	4084      	lsls	r4, r0
 8000ca4:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	0189      	lsls	r1, r1, #6
 8000ca8:	400a      	ands	r2, r1
 8000caa:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	432a      	orrs	r2, r5
 8000cae:	519a      	str	r2, [r3, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	4003      	ands	r3, r0
 8000cb6:	3b08      	subs	r3, #8
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3306      	adds	r3, #6
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_NVIC_SetPriority+0x5c>)
 8000cc0:	4694      	mov	ip, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	685c      	ldr	r4, [r3, #4]
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	4010      	ands	r0, r2
 8000cca:	00c0      	lsls	r0, r0, #3
 8000ccc:	32fc      	adds	r2, #252	; 0xfc
 8000cce:	0015      	movs	r5, r2
 8000cd0:	4085      	lsls	r5, r0
 8000cd2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd4:	0189      	lsls	r1, r1, #6
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cda:	4322      	orrs	r2, r4
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	e7e7      	b.n	8000cb0 <HAL_NVIC_SetPriority+0x28>
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	db05      	blt.n	8000cf8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cec:	231f      	movs	r3, #31
 8000cee:	4018      	ands	r0, r3
 8000cf0:	3b1e      	subs	r3, #30
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	4a01      	ldr	r2, [pc, #4]	; (8000cfc <HAL_NVIC_EnableIRQ+0x14>)
 8000cf6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000cf8:	4770      	bx	lr
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	3801      	subs	r0, #1
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	045b      	lsls	r3, r3, #17
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d20f      	bcs.n	8000d2a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <HAL_SYSTICK_Config+0x30>)
 8000d0c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <HAL_SYSTICK_Config+0x34>)
 8000d10:	6a03      	ldr	r3, [r0, #32]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	21c0      	movs	r1, #192	; 0xc0
 8000d18:	0609      	lsls	r1, r1, #24
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1e:	2300      	movs	r3, #0
 8000d20:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	3307      	adds	r3, #7
 8000d24:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d26:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000d28:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8000d2c:	e7fc      	b.n	8000d28 <HAL_SYSTICK_Config+0x28>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	e000e010 	.word	0xe000e010
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d38:	b530      	push	{r4, r5, lr}
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d036      	beq.n	8000dac <HAL_DMA_Abort+0x74>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d3e:	2325      	movs	r3, #37	; 0x25
 8000d40:	5cc3      	ldrb	r3, [r0, r3]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d006      	beq.n	8000d54 <HAL_DMA_Abort+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d46:	2304      	movs	r3, #4
 8000d48:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	3320      	adds	r3, #32
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8000d52:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d54:	6802      	ldr	r2, [r0, #0]
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	210e      	movs	r1, #14
 8000d5a:	438b      	bics	r3, r1
 8000d5c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	4913      	ldr	r1, [pc, #76]	; (8000db0 <HAL_DMA_Abort+0x78>)
 8000d64:	400b      	ands	r3, r1
 8000d66:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d68:	6801      	ldr	r1, [r0, #0]
 8000d6a:	680a      	ldr	r2, [r1, #0]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	439a      	bics	r2, r3
 8000d70:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000d72:	4c10      	ldr	r4, [pc, #64]	; (8000db4 <HAL_DMA_Abort+0x7c>)
 8000d74:	6862      	ldr	r2, [r4, #4]
 8000d76:	211c      	movs	r1, #28
 8000d78:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000d7a:	4029      	ands	r1, r5
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000d84:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000d86:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000d88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <HAL_DMA_Abort+0x78>)
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d96:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000d98:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8000d9a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	2325      	movs	r3, #37	; 0x25
 8000d9e:	2201      	movs	r2, #1
 8000da0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000da2:	3b01      	subs	r3, #1
 8000da4:	2200      	movs	r2, #0
 8000da6:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
 8000daa:	e7d2      	b.n	8000d52 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
 8000dae:	e7d0      	b.n	8000d52 <HAL_DMA_Abort+0x1a>
 8000db0:	fffffeff 	.word	0xfffffeff
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000dba:	2324      	movs	r3, #36	; 0x24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	54c2      	strb	r2, [r0, r3]
  __HAL_LOCK(hdma);
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	54c2      	strb	r2, [r0, r3]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	5cc3      	ldrb	r3, [r0, r3]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d003      	beq.n	8000dd4 <HAL_DMA_Abort_IT+0x1c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000dd0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd4:	6802      	ldr	r2, [r0, #0]
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	210e      	movs	r1, #14
 8000dda:	438b      	bics	r3, r1
 8000ddc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000dde:	6801      	ldr	r1, [r0, #0]
 8000de0:	680a      	ldr	r2, [r1, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	439a      	bics	r2, r3
 8000de6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000de8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000dea:	680a      	ldr	r2, [r1, #0]
 8000dec:	4c12      	ldr	r4, [pc, #72]	; (8000e38 <HAL_DMA_Abort_IT+0x80>)
 8000dee:	4022      	ands	r2, r4
 8000df0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000df2:	4c12      	ldr	r4, [pc, #72]	; (8000e3c <HAL_DMA_Abort_IT+0x84>)
 8000df4:	6862      	ldr	r2, [r4, #4]
 8000df6:	211c      	movs	r1, #28
 8000df8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000dfa:	4029      	ands	r1, r5
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e02:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e04:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000e06:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000e08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4909      	ldr	r1, [pc, #36]	; (8000e38 <HAL_DMA_Abort_IT+0x80>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000e18:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8000e1a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	2325      	movs	r3, #37	; 0x25
 8000e1e:	2201      	movs	r2, #1
 8000e20:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000e22:	3b01      	subs	r3, #1
 8000e24:	2200      	movs	r2, #0
 8000e26:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8000e28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <HAL_DMA_Abort_IT+0x7c>
      hdma->XferAbortCallback(hdma);
 8000e2e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000e30:	2000      	movs	r0, #0
 8000e32:	e7ce      	b.n	8000dd2 <HAL_DMA_Abort_IT+0x1a>
 8000e34:	2000      	movs	r0, #0
 8000e36:	e7cc      	b.n	8000dd2 <HAL_DMA_Abort_IT+0x1a>
 8000e38:	fffffeff 	.word	0xfffffeff
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8000e40:	2325      	movs	r3, #37	; 0x25
 8000e42:	5cc0      	ldrb	r0, [r0, r3]
 8000e44:	b2c0      	uxtb	r0, r0
}
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	46d6      	mov	lr, sl
 8000e4c:	464f      	mov	r7, r9
 8000e4e:	4646      	mov	r6, r8
 8000e50:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e52:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e54:	e03b      	b.n	8000ece <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e56:	2504      	movs	r5, #4
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x14>
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	40a5      	lsls	r5, r4
 8000e5e:	002c      	movs	r4, r5
 8000e60:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e62:	4d63      	ldr	r5, [pc, #396]	; (8000ff0 <HAL_GPIO_Init+0x1a8>)
 8000e64:	3218      	adds	r2, #24
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	58ac      	ldr	r4, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8000e6e:	464a      	mov	r2, r9
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	0025      	movs	r5, r4
 8000e74:	464e      	mov	r6, r9
 8000e76:	43b5      	bics	r5, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e78:	684e      	ldr	r6, [r1, #4]
 8000e7a:	03f6      	lsls	r6, r6, #15
 8000e7c:	d502      	bpl.n	8000e84 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8000e7e:	464d      	mov	r5, r9
 8000e80:	432c      	orrs	r4, r5
 8000e82:	0025      	movs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8000e84:	4c5a      	ldr	r4, [pc, #360]	; (8000ff0 <HAL_GPIO_Init+0x1a8>)
 8000e86:	2780      	movs	r7, #128	; 0x80
 8000e88:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8000e8a:	2584      	movs	r5, #132	; 0x84
 8000e8c:	5964      	ldr	r4, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8000e8e:	0025      	movs	r5, r4
 8000e90:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e92:	684e      	ldr	r6, [r1, #4]
 8000e94:	03b6      	lsls	r6, r6, #14
 8000e96:	d502      	bpl.n	8000e9e <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8000e98:	464d      	mov	r5, r9
 8000e9a:	432c      	orrs	r4, r5
 8000e9c:	0025      	movs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8000e9e:	4c54      	ldr	r4, [pc, #336]	; (8000ff0 <HAL_GPIO_Init+0x1a8>)
 8000ea0:	2784      	movs	r7, #132	; 0x84
 8000ea2:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ea4:	6824      	ldr	r4, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8000ea6:	0025      	movs	r5, r4
 8000ea8:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eaa:	684e      	ldr	r6, [r1, #4]
 8000eac:	02f6      	lsls	r6, r6, #11
 8000eae:	d502      	bpl.n	8000eb6 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8000eb0:	464d      	mov	r5, r9
 8000eb2:	432c      	orrs	r4, r5
 8000eb4:	0025      	movs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8000eb6:	4c4e      	ldr	r4, [pc, #312]	; (8000ff0 <HAL_GPIO_Init+0x1a8>)
 8000eb8:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8000eba:	6864      	ldr	r4, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8000ebc:	4022      	ands	r2, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebe:	684d      	ldr	r5, [r1, #4]
 8000ec0:	02ad      	lsls	r5, r5, #10
 8000ec2:	d501      	bpl.n	8000ec8 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = tmp;
 8000ec8:	4c49      	ldr	r4, [pc, #292]	; (8000ff0 <HAL_GPIO_Init+0x1a8>)
 8000eca:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8000ecc:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ece:	680c      	ldr	r4, [r1, #0]
 8000ed0:	0022      	movs	r2, r4
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x90>
 8000ed6:	e086      	b.n	8000fe6 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0026      	movs	r6, r4
 8000ede:	4016      	ands	r6, r2
 8000ee0:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8000ee2:	4214      	tst	r4, r2
 8000ee4:	d0f2      	beq.n	8000ecc <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee6:	684c      	ldr	r4, [r1, #4]
 8000ee8:	2c02      	cmp	r4, #2
 8000eea:	d001      	beq.n	8000ef0 <HAL_GPIO_Init+0xa8>
 8000eec:	2c12      	cmp	r4, #18
 8000eee:	d118      	bne.n	8000f22 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8000ef0:	08dd      	lsrs	r5, r3, #3
 8000ef2:	3508      	adds	r5, #8
 8000ef4:	00ad      	lsls	r5, r5, #2
 8000ef6:	582c      	ldr	r4, [r5, r0]
 8000ef8:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000efa:	2707      	movs	r7, #7
 8000efc:	401f      	ands	r7, r3
 8000efe:	00bf      	lsls	r7, r7, #2
 8000f00:	240f      	movs	r4, #15
 8000f02:	46a2      	mov	sl, r4
 8000f04:	0026      	movs	r6, r4
 8000f06:	40be      	lsls	r6, r7
 8000f08:	46b0      	mov	r8, r6
 8000f0a:	4666      	mov	r6, ip
 8000f0c:	4644      	mov	r4, r8
 8000f0e:	43a6      	bics	r6, r4
 8000f10:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f12:	690c      	ldr	r4, [r1, #16]
 8000f14:	4656      	mov	r6, sl
 8000f16:	4026      	ands	r6, r4
 8000f18:	0034      	movs	r4, r6
 8000f1a:	40bc      	lsls	r4, r7
 8000f1c:	4666      	mov	r6, ip
 8000f1e:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8000f20:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8000f22:	6804      	ldr	r4, [r0, #0]
 8000f24:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f26:	005d      	lsls	r5, r3, #1
 8000f28:	2403      	movs	r4, #3
 8000f2a:	46a2      	mov	sl, r4
 8000f2c:	0027      	movs	r7, r4
 8000f2e:	40af      	lsls	r7, r5
 8000f30:	46b8      	mov	r8, r7
 8000f32:	43ff      	mvns	r7, r7
 8000f34:	4666      	mov	r6, ip
 8000f36:	4644      	mov	r4, r8
 8000f38:	43a6      	bics	r6, r4
 8000f3a:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	684c      	ldr	r4, [r1, #4]
 8000f3e:	4656      	mov	r6, sl
 8000f40:	4026      	ands	r6, r4
 8000f42:	0034      	movs	r4, r6
 8000f44:	40ac      	lsls	r4, r5
 8000f46:	4666      	mov	r6, ip
 8000f48:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8000f4a:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4c:	684c      	ldr	r4, [r1, #4]
 8000f4e:	1e66      	subs	r6, r4, #1
 8000f50:	2e01      	cmp	r6, #1
 8000f52:	d903      	bls.n	8000f5c <HAL_GPIO_Init+0x114>
 8000f54:	2c11      	cmp	r4, #17
 8000f56:	d001      	beq.n	8000f5c <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	2c12      	cmp	r4, #18
 8000f5a:	d112      	bne.n	8000f82 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8000f5c:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f5e:	403c      	ands	r4, r7
 8000f60:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000f62:	68cc      	ldr	r4, [r1, #12]
 8000f64:	40ac      	lsls	r4, r5
 8000f66:	4666      	mov	r6, ip
 8000f68:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8000f6a:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8000f6c:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6e:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f70:	684a      	ldr	r2, [r1, #4]
 8000f72:	0912      	lsrs	r2, r2, #4
 8000f74:	4694      	mov	ip, r2
 8000f76:	2201      	movs	r2, #1
 8000f78:	4666      	mov	r6, ip
 8000f7a:	4032      	ands	r2, r6
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8000f80:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f82:	684a      	ldr	r2, [r1, #4]
 8000f84:	2a03      	cmp	r2, #3
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8000f88:	68c2      	ldr	r2, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8a:	403a      	ands	r2, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f8c:	688f      	ldr	r7, [r1, #8]
 8000f8e:	40af      	lsls	r7, r5
 8000f90:	4317      	orrs	r7, r2
        GPIOx->PUPDR = tmp;
 8000f92:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f94:	684a      	ldr	r2, [r1, #4]
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	d598      	bpl.n	8000ecc <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8000f9a:	089a      	lsrs	r2, r3, #2
 8000f9c:	0014      	movs	r4, r2
 8000f9e:	3418      	adds	r4, #24
 8000fa0:	00a4      	lsls	r4, r4, #2
 8000fa2:	4d13      	ldr	r5, [pc, #76]	; (8000ff0 <HAL_GPIO_Init+0x1a8>)
 8000fa4:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000fa6:	2503      	movs	r5, #3
 8000fa8:	401d      	ands	r5, r3
 8000faa:	00ec      	lsls	r4, r5, #3
 8000fac:	250f      	movs	r5, #15
 8000fae:	40a5      	lsls	r5, r4
 8000fb0:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000fb2:	25a0      	movs	r5, #160	; 0xa0
 8000fb4:	05ed      	lsls	r5, r5, #23
 8000fb6:	42a8      	cmp	r0, r5
 8000fb8:	d100      	bne.n	8000fbc <HAL_GPIO_Init+0x174>
 8000fba:	e74e      	b.n	8000e5a <HAL_GPIO_Init+0x12>
 8000fbc:	4d0d      	ldr	r5, [pc, #52]	; (8000ff4 <HAL_GPIO_Init+0x1ac>)
 8000fbe:	42a8      	cmp	r0, r5
 8000fc0:	d00b      	beq.n	8000fda <HAL_GPIO_Init+0x192>
 8000fc2:	4d0d      	ldr	r5, [pc, #52]	; (8000ff8 <HAL_GPIO_Init+0x1b0>)
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	d00a      	beq.n	8000fde <HAL_GPIO_Init+0x196>
 8000fc8:	4d0c      	ldr	r5, [pc, #48]	; (8000ffc <HAL_GPIO_Init+0x1b4>)
 8000fca:	42a8      	cmp	r0, r5
 8000fcc:	d009      	beq.n	8000fe2 <HAL_GPIO_Init+0x19a>
 8000fce:	4d0c      	ldr	r5, [pc, #48]	; (8001000 <HAL_GPIO_Init+0x1b8>)
 8000fd0:	42a8      	cmp	r0, r5
 8000fd2:	d100      	bne.n	8000fd6 <HAL_GPIO_Init+0x18e>
 8000fd4:	e73f      	b.n	8000e56 <HAL_GPIO_Init+0xe>
 8000fd6:	2505      	movs	r5, #5
 8000fd8:	e740      	b.n	8000e5c <HAL_GPIO_Init+0x14>
 8000fda:	2501      	movs	r5, #1
 8000fdc:	e73e      	b.n	8000e5c <HAL_GPIO_Init+0x14>
 8000fde:	2502      	movs	r5, #2
 8000fe0:	e73c      	b.n	8000e5c <HAL_GPIO_Init+0x14>
 8000fe2:	2503      	movs	r5, #3
 8000fe4:	e73a      	b.n	8000e5c <HAL_GPIO_Init+0x14>
  }
}
 8000fe6:	bce0      	pop	{r5, r6, r7}
 8000fe8:	46ba      	mov	sl, r7
 8000fea:	46b1      	mov	r9, r6
 8000fec:	46a8      	mov	r8, r5
 8000fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff0:	40021800 	.word	0x40021800
 8000ff4:	50000400 	.word	0x50000400
 8000ff8:	50000800 	.word	0x50000800
 8000ffc:	50000c00 	.word	0x50000c00
 8001000:	50001400 	.word	0x50001400

08001004 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001004:	2a00      	cmp	r2, #0
 8001006:	d001      	beq.n	800100c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001008:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800100a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800100e:	e7fc      	b.n	800100a <HAL_GPIO_WritePin+0x6>

08001010 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	0792      	lsls	r2, r2, #30
 8001016:	d501      	bpl.n	800101c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800101c:	6803      	ldr	r3, [r0, #0]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	07d2      	lsls	r2, r2, #31
 8001022:	d403      	bmi.n	800102c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	2101      	movs	r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	619a      	str	r2, [r3, #24]
  }
}
 800102c:	4770      	bx	lr

0800102e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800102e:	b530      	push	{r4, r5, lr}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001030:	07cb      	lsls	r3, r1, #31
 8001032:	d509      	bpl.n	8001048 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001034:	2341      	movs	r3, #65	; 0x41
 8001036:	5cc3      	ldrb	r3, [r0, r3]
 8001038:	2228      	movs	r2, #40	; 0x28
 800103a:	4013      	ands	r3, r2
 800103c:	2b28      	cmp	r3, #40	; 0x28
 800103e:	d001      	beq.n	8001044 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001040:	23f2      	movs	r3, #242	; 0xf2
 8001042:	e002      	b.n	800104a <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001044:	331a      	adds	r3, #26
 8001046:	e000      	b.n	800104a <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8001048:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800104a:	078a      	lsls	r2, r1, #30
 800104c:	d509      	bpl.n	8001062 <I2C_Disable_IRQ+0x34>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800104e:	2444      	movs	r4, #68	; 0x44
 8001050:	431c      	orrs	r4, r3

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001052:	2241      	movs	r2, #65	; 0x41
 8001054:	5c82      	ldrb	r2, [r0, r2]
 8001056:	2528      	movs	r5, #40	; 0x28
 8001058:	402a      	ands	r2, r5
 800105a:	2a28      	cmp	r2, #40	; 0x28
 800105c:	d00f      	beq.n	800107e <I2C_Disable_IRQ+0x50>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800105e:	22f4      	movs	r2, #244	; 0xf4
 8001060:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001062:	b20a      	sxth	r2, r1
 8001064:	2a00      	cmp	r2, #0
 8001066:	db0c      	blt.n	8001082 <I2C_Disable_IRQ+0x54>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001068:	2910      	cmp	r1, #16
 800106a:	d00d      	beq.n	8001088 <I2C_Disable_IRQ+0x5a>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800106c:	2920      	cmp	r1, #32
 800106e:	d00e      	beq.n	800108e <I2C_Disable_IRQ+0x60>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001070:	2940      	cmp	r1, #64	; 0x40
 8001072:	d00f      	beq.n	8001094 <I2C_Disable_IRQ+0x66>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001074:	6801      	ldr	r1, [r0, #0]
 8001076:	680a      	ldr	r2, [r1, #0]
 8001078:	439a      	bics	r2, r3
 800107a:	600a      	str	r2, [r1, #0]
}
 800107c:	bd30      	pop	{r4, r5, pc}
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800107e:	0023      	movs	r3, r4
 8001080:	e7ef      	b.n	8001062 <I2C_Disable_IRQ+0x34>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001082:	22b8      	movs	r2, #184	; 0xb8
 8001084:	4313      	orrs	r3, r2
 8001086:	e7ef      	b.n	8001068 <I2C_Disable_IRQ+0x3a>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001088:	2290      	movs	r2, #144	; 0x90
 800108a:	4313      	orrs	r3, r2
 800108c:	e7ee      	b.n	800106c <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_STOPI;
 800108e:	2220      	movs	r2, #32
 8001090:	4313      	orrs	r3, r2
 8001092:	e7ed      	b.n	8001070 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI;
 8001094:	2240      	movs	r2, #64	; 0x40
 8001096:	4313      	orrs	r3, r2
 8001098:	e7ec      	b.n	8001074 <I2C_Disable_IRQ+0x46>
	...

0800109c <HAL_I2C_Init>:
{
 800109c:	b510      	push	{r4, lr}
 800109e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80010a0:	d059      	beq.n	8001156 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	2341      	movs	r3, #65	; 0x41
 80010a4:	5cc3      	ldrb	r3, [r0, r3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d043      	beq.n	8001132 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010aa:	2341      	movs	r3, #65	; 0x41
 80010ac:	2224      	movs	r2, #36	; 0x24
 80010ae:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	6813      	ldr	r3, [r2, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	438b      	bics	r3, r1
 80010b8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010ba:	6822      	ldr	r2, [r4, #0]
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_I2C_Init+0xc0>)
 80010be:	6861      	ldr	r1, [r4, #4]
 80010c0:	400b      	ands	r3, r1
 80010c2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	6893      	ldr	r3, [r2, #8]
 80010c8:	4925      	ldr	r1, [pc, #148]	; (8001160 <HAL_I2C_Init+0xc4>)
 80010ca:	400b      	ands	r3, r1
 80010cc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ce:	68e3      	ldr	r3, [r4, #12]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d034      	beq.n	800113e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	2384      	movs	r3, #132	; 0x84
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	68a1      	ldr	r1, [r4, #8]
 80010dc:	430b      	orrs	r3, r1
 80010de:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e0:	68e3      	ldr	r3, [r4, #12]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d032      	beq.n	800114c <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	6851      	ldr	r1, [r2, #4]
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_I2C_Init+0xc8>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	68d3      	ldr	r3, [r2, #12]
 80010f4:	491a      	ldr	r1, [pc, #104]	; (8001160 <HAL_I2C_Init+0xc4>)
 80010f6:	400b      	ands	r3, r1
 80010f8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010fa:	6923      	ldr	r3, [r4, #16]
 80010fc:	6962      	ldr	r2, [r4, #20]
 80010fe:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001100:	69a2      	ldr	r2, [r4, #24]
 8001102:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001104:	6821      	ldr	r1, [r4, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	69e3      	ldr	r3, [r4, #28]
 800110e:	6a21      	ldr	r1, [r4, #32]
 8001110:	430b      	orrs	r3, r1
 8001112:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	430b      	orrs	r3, r1
 800111c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001122:	2241      	movs	r2, #65	; 0x41
 8001124:	311f      	adds	r1, #31
 8001126:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001128:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800112a:	3201      	adds	r2, #1
 800112c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800112e:	2000      	movs	r0, #0
}
 8001130:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001132:	3340      	adds	r3, #64	; 0x40
 8001134:	2200      	movs	r2, #0
 8001136:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001138:	f7ff fbe6 	bl	8000908 <HAL_I2C_MspInit>
 800113c:	e7b5      	b.n	80010aa <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800113e:	6822      	ldr	r2, [r4, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	68a1      	ldr	r1, [r4, #8]
 8001146:	430b      	orrs	r3, r1
 8001148:	6093      	str	r3, [r2, #8]
 800114a:	e7c9      	b.n	80010e0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	e7c7      	b.n	80010e6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001156:	2001      	movs	r0, #1
 8001158:	e7ea      	b.n	8001130 <HAL_I2C_Init+0x94>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	f0ffffff 	.word	0xf0ffffff
 8001160:	ffff7fff 	.word	0xffff7fff
 8001164:	02008000 	.word	0x02008000

08001168 <HAL_I2C_EV_IRQHandler>:
{
 8001168:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800116a:	6803      	ldr	r3, [r0, #0]
 800116c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800116e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001170:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001172:	2b00      	cmp	r3, #0
 8001174:	d000      	beq.n	8001178 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001176:	4798      	blx	r3
}
 8001178:	bd10      	pop	{r4, pc}

0800117a <HAL_I2C_SlaveTxCpltCallback>:
}
 800117a:	4770      	bx	lr

0800117c <HAL_I2C_SlaveRxCpltCallback>:
}
 800117c:	4770      	bx	lr
	...

08001180 <I2C_ITSlaveSeqCplt>:
{
 8001180:	b510      	push	{r4, lr}
 8001182:	0004      	movs	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001184:	6803      	ldr	r3, [r0, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001188:	2142      	movs	r1, #66	; 0x42
 800118a:	2000      	movs	r0, #0
 800118c:	5460      	strb	r0, [r4, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800118e:	0451      	lsls	r1, r2, #17
 8001190:	d50c      	bpl.n	80011ac <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4919      	ldr	r1, [pc, #100]	; (80011fc <I2C_ITSlaveSeqCplt+0x7c>)
 8001196:	400a      	ands	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800119a:	2341      	movs	r3, #65	; 0x41
 800119c:	5ce3      	ldrb	r3, [r4, r3]
 800119e:	2b29      	cmp	r3, #41	; 0x29
 80011a0:	d00b      	beq.n	80011ba <I2C_ITSlaveSeqCplt+0x3a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80011a2:	2341      	movs	r3, #65	; 0x41
 80011a4:	5ce3      	ldrb	r3, [r4, r3]
 80011a6:	2b2a      	cmp	r3, #42	; 0x2a
 80011a8:	d017      	beq.n	80011da <I2C_ITSlaveSeqCplt+0x5a>
}
 80011aa:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80011ac:	0412      	lsls	r2, r2, #16
 80011ae:	d5f4      	bpl.n	800119a <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4913      	ldr	r1, [pc, #76]	; (8001200 <I2C_ITSlaveSeqCplt+0x80>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e7ef      	b.n	800119a <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80011ba:	3318      	adds	r3, #24
 80011bc:	2228      	movs	r2, #40	; 0x28
 80011be:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80011c0:	3b20      	subs	r3, #32
 80011c2:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80011c4:	2101      	movs	r1, #1
 80011c6:	0020      	movs	r0, r4
 80011c8:	f7ff ff31 	bl	800102e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80011cc:	2340      	movs	r3, #64	; 0x40
 80011ce:	2200      	movs	r2, #0
 80011d0:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80011d2:	0020      	movs	r0, r4
 80011d4:	f7ff ffd1 	bl	800117a <HAL_I2C_SlaveTxCpltCallback>
 80011d8:	e7e7      	b.n	80011aa <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80011da:	3317      	adds	r3, #23
 80011dc:	2228      	movs	r2, #40	; 0x28
 80011de:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80011e0:	3b1f      	subs	r3, #31
 80011e2:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80011e4:	2102      	movs	r1, #2
 80011e6:	0020      	movs	r0, r4
 80011e8:	f7ff ff21 	bl	800102e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	2200      	movs	r2, #0
 80011f0:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80011f2:	0020      	movs	r0, r4
 80011f4:	f7ff ffc2 	bl	800117c <HAL_I2C_SlaveRxCpltCallback>
}
 80011f8:	e7d7      	b.n	80011aa <I2C_ITSlaveSeqCplt+0x2a>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	ffffbfff 	.word	0xffffbfff
 8001200:	ffff7fff 	.word	0xffff7fff

08001204 <HAL_I2C_AddrCallback>:
}
 8001204:	4770      	bx	lr

08001206 <I2C_ITAddrCplt>:
{
 8001206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001208:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800120a:	2341      	movs	r3, #65	; 0x41
 800120c:	5cc3      	ldrb	r3, [r0, r3]
 800120e:	2228      	movs	r2, #40	; 0x28
 8001210:	4013      	ands	r3, r2
 8001212:	2b28      	cmp	r3, #40	; 0x28
 8001214:	d006      	beq.n	8001224 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001216:	6803      	ldr	r3, [r0, #0]
 8001218:	2208      	movs	r2, #8
 800121a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	2200      	movs	r2, #0
 8001220:	54c2      	strb	r2, [r0, r3]
}
 8001222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8001224:	6801      	ldr	r1, [r0, #0]
 8001226:	698e      	ldr	r6, [r1, #24]
 8001228:	0c36      	lsrs	r6, r6, #16
 800122a:	3b27      	subs	r3, #39	; 0x27
 800122c:	401e      	ands	r6, r3
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800122e:	698d      	ldr	r5, [r1, #24]
 8001230:	0c2d      	lsrs	r5, r5, #16
 8001232:	27fe      	movs	r7, #254	; 0xfe
 8001234:	403d      	ands	r5, r7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001236:	688b      	ldr	r3, [r1, #8]
 8001238:	059b      	lsls	r3, r3, #22
 800123a:	0d9b      	lsrs	r3, r3, #22
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800123c:	68ca      	ldr	r2, [r1, #12]
 800123e:	4017      	ands	r7, r2
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001240:	68c2      	ldr	r2, [r0, #12]
 8001242:	2a02      	cmp	r2, #2
 8001244:	d124      	bne.n	8001290 <I2C_ITAddrCplt+0x8a>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001246:	09da      	lsrs	r2, r3, #7
 8001248:	406a      	eors	r2, r5
 800124a:	2006      	movs	r0, #6
 800124c:	4210      	tst	r0, r2
 800124e:	d111      	bne.n	8001274 <I2C_ITAddrCplt+0x6e>
        hi2c->AddrEventCount++;
 8001250:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001252:	3201      	adds	r2, #1
 8001254:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001256:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001258:	2a02      	cmp	r2, #2
 800125a:	d1e2      	bne.n	8001222 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800125c:	2200      	movs	r2, #0
 800125e:	64a2      	str	r2, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001260:	3002      	adds	r0, #2
 8001262:	61c8      	str	r0, [r1, #28]
          __HAL_UNLOCK(hi2c);
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	5462      	strb	r2, [r4, r1]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001268:	001a      	movs	r2, r3
 800126a:	0031      	movs	r1, r6
 800126c:	0020      	movs	r0, r4
 800126e:	f7ff ffc9 	bl	8001204 <HAL_I2C_AddrCallback>
 8001272:	e7d6      	b.n	8001222 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0209      	lsls	r1, r1, #8
 8001278:	0020      	movs	r0, r4
 800127a:	f7ff fed8 	bl	800102e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	2200      	movs	r2, #0
 8001282:	54e2      	strb	r2, [r4, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001284:	003a      	movs	r2, r7
 8001286:	0031      	movs	r1, r6
 8001288:	0020      	movs	r0, r4
 800128a:	f7ff ffbb 	bl	8001204 <HAL_I2C_AddrCallback>
 800128e:	e7c8      	b.n	8001222 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0209      	lsls	r1, r1, #8
 8001294:	f7ff fecb 	bl	800102e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	2200      	movs	r2, #0
 800129c:	54e2      	strb	r2, [r4, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800129e:	002a      	movs	r2, r5
 80012a0:	0031      	movs	r1, r6
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7ff ffae 	bl	8001204 <HAL_I2C_AddrCallback>
 80012a8:	e7bb      	b.n	8001222 <I2C_ITAddrCplt+0x1c>

080012aa <HAL_I2C_ListenCpltCallback>:
}
 80012aa:	4770      	bx	lr

080012ac <I2C_ITListenCplt>:
{
 80012ac:	b510      	push	{r4, lr}
 80012ae:	0004      	movs	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <I2C_ITListenCplt+0x60>)
 80012b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80012b8:	2241      	movs	r2, #65	; 0x41
 80012ba:	2020      	movs	r0, #32
 80012bc:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012be:	3201      	adds	r2, #1
 80012c0:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 80012c2:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80012c4:	074b      	lsls	r3, r1, #29
 80012c6:	d513      	bpl.n	80012f0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ce:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80012d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012d2:	3301      	adds	r3, #1
 80012d4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80012d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80012dc:	3b01      	subs	r3, #1
 80012de:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80012e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012ea:	2204      	movs	r2, #4
 80012ec:	4313      	orrs	r3, r2
 80012ee:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <I2C_ITListenCplt+0x64>)
 80012f2:	0020      	movs	r0, r4
 80012f4:	f7ff fe9b 	bl	800102e <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	2210      	movs	r2, #16
 80012fc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	2200      	movs	r2, #0
 8001302:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8001304:	0020      	movs	r0, r4
 8001306:	f7ff ffd0 	bl	80012aa <HAL_I2C_ListenCpltCallback>
}
 800130a:	bd10      	pop	{r4, pc}
 800130c:	ffff0000 	.word	0xffff0000
 8001310:	00008003 	.word	0x00008003

08001314 <HAL_I2C_ErrorCallback>:
}
 8001314:	4770      	bx	lr

08001316 <HAL_I2C_AbortCpltCallback>:
}
 8001316:	4770      	bx	lr

08001318 <I2C_TreatErrorCallback>:
{
 8001318:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800131a:	2341      	movs	r3, #65	; 0x41
 800131c:	5cc3      	ldrb	r3, [r0, r3]
 800131e:	2b60      	cmp	r3, #96	; 0x60
 8001320:	d006      	beq.n	8001330 <I2C_TreatErrorCallback+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800132a:	f7ff fff3 	bl	8001314 <HAL_I2C_ErrorCallback>
}
 800132e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001330:	3b1f      	subs	r3, #31
 8001332:	2220      	movs	r2, #32
 8001334:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800133a:	3220      	adds	r2, #32
 800133c:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 800133e:	f7ff ffea 	bl	8001316 <HAL_I2C_AbortCpltCallback>
 8001342:	e7f4      	b.n	800132e <I2C_TreatErrorCallback+0x16>

08001344 <I2C_ITError>:
{
 8001344:	b510      	push	{r4, lr}
 8001346:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001348:	2341      	movs	r3, #65	; 0x41
 800134a:	5cc3      	ldrb	r3, [r0, r3]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800134c:	2000      	movs	r0, #0
 800134e:	2242      	movs	r2, #66	; 0x42
 8001350:	54a0      	strb	r0, [r4, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001352:	4a3a      	ldr	r2, [pc, #232]	; (800143c <I2C_ITError+0xf8>)
 8001354:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001356:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001358:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800135a:	430a      	orrs	r2, r1
 800135c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800135e:	3b28      	subs	r3, #40	; 0x28
 8001360:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001362:	2b02      	cmp	r3, #2
 8001364:	d81b      	bhi.n	800139e <I2C_ITError+0x5a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001366:	2103      	movs	r1, #3
 8001368:	0020      	movs	r0, r4
 800136a:	f7ff fe60 	bl	800102e <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800136e:	2341      	movs	r3, #65	; 0x41
 8001370:	2228      	movs	r2, #40	; 0x28
 8001372:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <I2C_ITError+0xfc>)
 8001376:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8001378:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800137a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800137c:	2a00      	cmp	r2, #0
 800137e:	d003      	beq.n	8001388 <I2C_ITError+0x44>
 8001380:	2b11      	cmp	r3, #17
 8001382:	d01a      	beq.n	80013ba <I2C_ITError+0x76>
 8001384:	2b21      	cmp	r3, #33	; 0x21
 8001386:	d018      	beq.n	80013ba <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001388:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800138a:	2a00      	cmp	r2, #0
 800138c:	d003      	beq.n	8001396 <I2C_ITError+0x52>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d033      	beq.n	80013fa <I2C_ITError+0xb6>
 8001392:	2b22      	cmp	r3, #34	; 0x22
 8001394:	d031      	beq.n	80013fa <I2C_ITError+0xb6>
    I2C_TreatErrorCallback(hi2c);
 8001396:	0020      	movs	r0, r4
 8001398:	f7ff ffbe 	bl	8001318 <I2C_TreatErrorCallback>
}
 800139c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800139e:	4929      	ldr	r1, [pc, #164]	; (8001444 <I2C_ITError+0x100>)
 80013a0:	0020      	movs	r0, r4
 80013a2:	f7ff fe44 	bl	800102e <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80013a6:	2341      	movs	r3, #65	; 0x41
 80013a8:	5ce3      	ldrb	r3, [r4, r3]
 80013aa:	2b60      	cmp	r3, #96	; 0x60
 80013ac:	d002      	beq.n	80013b4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80013ae:	2341      	movs	r3, #65	; 0x41
 80013b0:	2220      	movs	r2, #32
 80013b2:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = NULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	6363      	str	r3, [r4, #52]	; 0x34
 80013b8:	e7de      	b.n	8001378 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	0452      	lsls	r2, r2, #17
 80013c0:	d503      	bpl.n	80013ca <I2C_ITError+0x86>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4920      	ldr	r1, [pc, #128]	; (8001448 <I2C_ITError+0x104>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80013ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013cc:	f7ff fd38 	bl	8000e40 <HAL_DMA_GetState>
 80013d0:	2801      	cmp	r0, #1
 80013d2:	d00e      	beq.n	80013f2 <I2C_ITError+0xae>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80013d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <I2C_ITError+0x108>)
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	2200      	movs	r2, #0
 80013de:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80013e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013e2:	f7ff fce9 	bl	8000db8 <HAL_DMA_Abort_IT>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0d8      	beq.n	800139c <I2C_ITError+0x58>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80013ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80013ee:	4798      	blx	r3
 80013f0:	e7d4      	b.n	800139c <I2C_ITError+0x58>
      I2C_TreatErrorCallback(hi2c);
 80013f2:	0020      	movs	r0, r4
 80013f4:	f7ff ff90 	bl	8001318 <I2C_TreatErrorCallback>
 80013f8:	e7d0      	b.n	800139c <I2C_ITError+0x58>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	d503      	bpl.n	800140a <I2C_ITError+0xc6>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4912      	ldr	r1, [pc, #72]	; (8001450 <I2C_ITError+0x10c>)
 8001406:	400a      	ands	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800140a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800140c:	f7ff fd18 	bl	8000e40 <HAL_DMA_GetState>
 8001410:	2801      	cmp	r0, #1
 8001412:	d00e      	beq.n	8001432 <I2C_ITError+0xee>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001416:	4a0d      	ldr	r2, [pc, #52]	; (800144c <I2C_ITError+0x108>)
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	2200      	movs	r2, #0
 800141e:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001420:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001422:	f7ff fcc9 	bl	8000db8 <HAL_DMA_Abort_IT>
 8001426:	2800      	cmp	r0, #0
 8001428:	d0b8      	beq.n	800139c <I2C_ITError+0x58>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800142a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800142c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800142e:	4798      	blx	r3
 8001430:	e7b4      	b.n	800139c <I2C_ITError+0x58>
      I2C_TreatErrorCallback(hi2c);
 8001432:	0020      	movs	r0, r4
 8001434:	f7ff ff70 	bl	8001318 <I2C_TreatErrorCallback>
 8001438:	e7b0      	b.n	800139c <I2C_ITError+0x58>
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	ffff0000 	.word	0xffff0000
 8001440:	080015bd 	.word	0x080015bd
 8001444:	00008003 	.word	0x00008003
 8001448:	ffffbfff 	.word	0xffffbfff
 800144c:	08001767 	.word	0x08001767
 8001450:	ffff7fff 	.word	0xffff7fff

08001454 <I2C_ITSlaveCplt>:
{
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	0004      	movs	r4, r0
 8001458:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800145a:	6802      	ldr	r2, [r0, #0]
 800145c:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800145e:	2341      	movs	r3, #65	; 0x41
 8001460:	5cc3      	ldrb	r3, [r0, r3]
 8001462:	b2d9      	uxtb	r1, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001464:	2020      	movs	r0, #32
 8001466:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001468:	2b21      	cmp	r3, #33	; 0x21
 800146a:	d00c      	beq.n	8001486 <I2C_ITSlaveCplt+0x32>
 800146c:	2929      	cmp	r1, #41	; 0x29
 800146e:	d00a      	beq.n	8001486 <I2C_ITSlaveCplt+0x32>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001470:	2922      	cmp	r1, #34	; 0x22
 8001472:	d001      	beq.n	8001478 <I2C_ITSlaveCplt+0x24>
 8001474:	292a      	cmp	r1, #42	; 0x2a
 8001476:	d10c      	bne.n	8001492 <I2C_ITSlaveCplt+0x3e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001478:	494a      	ldr	r1, [pc, #296]	; (80015a4 <I2C_ITSlaveCplt+0x150>)
 800147a:	0020      	movs	r0, r4
 800147c:	f7ff fdd7 	bl	800102e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001480:	2322      	movs	r3, #34	; 0x22
 8001482:	6323      	str	r3, [r4, #48]	; 0x30
 8001484:	e005      	b.n	8001492 <I2C_ITSlaveCplt+0x3e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001486:	4948      	ldr	r1, [pc, #288]	; (80015a8 <I2C_ITSlaveCplt+0x154>)
 8001488:	0020      	movs	r0, r4
 800148a:	f7ff fdd0 	bl	800102e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800148e:	2321      	movs	r3, #33	; 0x21
 8001490:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	6851      	ldr	r1, [r2, #4]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	430b      	orrs	r3, r1
 800149c:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800149e:	6822      	ldr	r2, [r4, #0]
 80014a0:	6853      	ldr	r3, [r2, #4]
 80014a2:	4942      	ldr	r1, [pc, #264]	; (80015ac <I2C_ITSlaveCplt+0x158>)
 80014a4:	400b      	ands	r3, r1
 80014a6:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80014a8:	0020      	movs	r0, r4
 80014aa:	f7ff fdb1 	bl	8001010 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80014ae:	0473      	lsls	r3, r6, #17
 80014b0:	d541      	bpl.n	8001536 <I2C_ITSlaveCplt+0xe2>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	493e      	ldr	r1, [pc, #248]	; (80015b0 <I2C_ITSlaveCplt+0x15c>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80014bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80014ca:	076b      	lsls	r3, r5, #29
 80014cc:	d511      	bpl.n	80014f2 <I2C_ITSlaveCplt+0x9e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80014ce:	2304      	movs	r3, #4
 80014d0:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014d8:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80014da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014dc:	3301      	adds	r3, #1
 80014de:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80014e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <I2C_ITSlaveCplt+0x9e>
      hi2c->XferSize--;
 80014e6:	3b01      	subs	r3, #1
 80014e8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80014ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80014f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <I2C_ITSlaveCplt+0xae>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014fc:	2204      	movs	r2, #4
 80014fe:	4313      	orrs	r3, r2
 8001500:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001502:	2300      	movs	r3, #0
 8001504:	2242      	movs	r2, #66	; 0x42
 8001506:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 8001508:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800150a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800150c:	2b00      	cmp	r3, #0
 800150e:	d121      	bne.n	8001554 <I2C_ITSlaveCplt+0x100>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001510:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <I2C_ITSlaveCplt+0x160>)
 8001514:	429a      	cmp	r2, r3
 8001516:	d12a      	bne.n	800156e <I2C_ITSlaveCplt+0x11a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001518:	2341      	movs	r3, #65	; 0x41
 800151a:	5ce3      	ldrb	r3, [r4, r3]
 800151c:	2b22      	cmp	r3, #34	; 0x22
 800151e:	d036      	beq.n	800158e <I2C_ITSlaveCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001520:	2341      	movs	r3, #65	; 0x41
 8001522:	2220      	movs	r2, #32
 8001524:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800152a:	3220      	adds	r2, #32
 800152c:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800152e:	0020      	movs	r0, r4
 8001530:	f7ff fe23 	bl	800117a <HAL_I2C_SlaveTxCpltCallback>
}
 8001534:	e02a      	b.n	800158c <I2C_ITSlaveCplt+0x138>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001536:	0433      	lsls	r3, r6, #16
 8001538:	d5c7      	bpl.n	80014ca <I2C_ITSlaveCplt+0x76>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800153a:	6822      	ldr	r2, [r4, #0]
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	491e      	ldr	r1, [pc, #120]	; (80015b8 <I2C_ITSlaveCplt+0x164>)
 8001540:	400b      	ands	r3, r1
 8001542:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8001544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0bf      	beq.n	80014ca <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	b29b      	uxth	r3, r3
 8001550:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001552:	e7ba      	b.n	80014ca <I2C_ITSlaveCplt+0x76>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001554:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001556:	0020      	movs	r0, r4
 8001558:	f7ff fef4 	bl	8001344 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800155c:	2341      	movs	r3, #65	; 0x41
 800155e:	5ce3      	ldrb	r3, [r4, r3]
 8001560:	2b28      	cmp	r3, #40	; 0x28
 8001562:	d113      	bne.n	800158c <I2C_ITSlaveCplt+0x138>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001564:	0029      	movs	r1, r5
 8001566:	0020      	movs	r0, r4
 8001568:	f7ff fea0 	bl	80012ac <I2C_ITListenCplt>
 800156c:	e00e      	b.n	800158c <I2C_ITSlaveCplt+0x138>
    I2C_ITSlaveSeqCplt(hi2c);
 800156e:	0020      	movs	r0, r4
 8001570:	f7ff fe06 	bl	8001180 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <I2C_ITSlaveCplt+0x160>)
 8001576:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001578:	2341      	movs	r3, #65	; 0x41
 800157a:	2220      	movs	r2, #32
 800157c:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800157e:	2300      	movs	r3, #0
 8001580:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001582:	3220      	adds	r2, #32
 8001584:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001586:	0020      	movs	r0, r4
 8001588:	f7ff fe8f 	bl	80012aa <HAL_I2C_ListenCpltCallback>
}
 800158c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800158e:	331f      	adds	r3, #31
 8001590:	2220      	movs	r2, #32
 8001592:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001598:	3220      	adds	r2, #32
 800159a:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800159c:	0020      	movs	r0, r4
 800159e:	f7ff fded 	bl	800117c <HAL_I2C_SlaveRxCpltCallback>
 80015a2:	e7f3      	b.n	800158c <I2C_ITSlaveCplt+0x138>
 80015a4:	00008002 	.word	0x00008002
 80015a8:	00008001 	.word	0x00008001
 80015ac:	fe00e800 	.word	0xfe00e800
 80015b0:	ffffbfff 	.word	0xffffbfff
 80015b4:	ffff0000 	.word	0xffff0000
 80015b8:	ffff7fff 	.word	0xffff7fff

080015bc <I2C_Slave_ISR_IT>:
{
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	0004      	movs	r4, r0
 80015c0:	000d      	movs	r5, r1
 80015c2:	0016      	movs	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 80015c4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80015c6:	2340      	movs	r3, #64	; 0x40
 80015c8:	5cc3      	ldrb	r3, [r0, r3]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d100      	bne.n	80015d0 <I2C_Slave_ISR_IT+0x14>
 80015ce:	e096      	b.n	80016fe <I2C_Slave_ISR_IT+0x142>
 80015d0:	2301      	movs	r3, #1
 80015d2:	2240      	movs	r2, #64	; 0x40
 80015d4:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015d6:	094a      	lsrs	r2, r1, #5
 80015d8:	4213      	tst	r3, r2
 80015da:	d001      	beq.n	80015e0 <I2C_Slave_ISR_IT+0x24>
 80015dc:	06b3      	lsls	r3, r6, #26
 80015de:	d417      	bmi.n	8001610 <I2C_Slave_ISR_IT+0x54>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015e0:	06eb      	lsls	r3, r5, #27
 80015e2:	d540      	bpl.n	8001666 <I2C_Slave_ISR_IT+0xaa>
 80015e4:	06f3      	lsls	r3, r6, #27
 80015e6:	d53e      	bpl.n	8001666 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80015e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d128      	bne.n	8001642 <I2C_Slave_ISR_IT+0x86>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80015f0:	3341      	adds	r3, #65	; 0x41
 80015f2:	5ce3      	ldrb	r3, [r4, r3]
 80015f4:	2b28      	cmp	r3, #40	; 0x28
 80015f6:	d00e      	beq.n	8001616 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80015f8:	2341      	movs	r3, #65	; 0x41
 80015fa:	5ce3      	ldrb	r3, [r4, r3]
 80015fc:	2b29      	cmp	r3, #41	; 0x29
 80015fe:	d013      	beq.n	8001628 <I2C_Slave_ISR_IT+0x6c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	2210      	movs	r2, #16
 8001604:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	2200      	movs	r2, #0
 800160a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
}
 800160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001610:	f7ff ff20 	bl	8001454 <I2C_ITSlaveCplt>
 8001614:	e7e4      	b.n	80015e0 <I2C_Slave_ISR_IT+0x24>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	049b      	lsls	r3, r3, #18
 800161a:	429f      	cmp	r7, r3
 800161c:	d1ec      	bne.n	80015f8 <I2C_Slave_ISR_IT+0x3c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800161e:	0029      	movs	r1, r5
 8001620:	0020      	movs	r0, r4
 8001622:	f7ff fe43 	bl	80012ac <I2C_ITListenCplt>
 8001626:	e7ee      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <I2C_Slave_ISR_IT+0x148>)
 800162a:	429f      	cmp	r7, r3
 800162c:	d0e8      	beq.n	8001600 <I2C_Slave_ISR_IT+0x44>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001634:	0020      	movs	r0, r4
 8001636:	f7ff fceb 	bl	8001010 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800163a:	0020      	movs	r0, r4
 800163c:	f7ff fda0 	bl	8001180 <I2C_ITSlaveSeqCplt>
 8001640:	e7e1      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001648:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800164a:	3a0c      	subs	r2, #12
 800164c:	4313      	orrs	r3, r2
 800164e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001650:	2f00      	cmp	r7, #0
 8001652:	d003      	beq.n	800165c <I2C_Slave_ISR_IT+0xa0>
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	045b      	lsls	r3, r3, #17
 8001658:	429f      	cmp	r7, r3
 800165a:	d1d4      	bne.n	8001606 <I2C_Slave_ISR_IT+0x4a>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800165c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800165e:	0020      	movs	r0, r4
 8001660:	f7ff fe70 	bl	8001344 <I2C_ITError>
 8001664:	e7cf      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d51e      	bpl.n	80016a8 <I2C_Slave_ISR_IT+0xec>
 800166a:	0773      	lsls	r3, r6, #29
 800166c:	d51c      	bpl.n	80016a8 <I2C_Slave_ISR_IT+0xec>
    if (hi2c->XferCount > 0U)
 800166e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <I2C_Slave_ISR_IT+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800167c:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800167e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001680:	3301      	adds	r3, #1
 8001682:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001684:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800168a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800168c:	3b01      	subs	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001692:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1b5      	bne.n	8001606 <I2C_Slave_ISR_IT+0x4a>
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <I2C_Slave_ISR_IT+0x148>)
 800169c:	429f      	cmp	r7, r3
 800169e:	d0b2      	beq.n	8001606 <I2C_Slave_ISR_IT+0x4a>
      I2C_ITSlaveSeqCplt(hi2c);
 80016a0:	0020      	movs	r0, r4
 80016a2:	f7ff fd6d 	bl	8001180 <I2C_ITSlaveSeqCplt>
 80016a6:	e7ae      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016a8:	072b      	lsls	r3, r5, #28
 80016aa:	d501      	bpl.n	80016b0 <I2C_Slave_ISR_IT+0xf4>
 80016ac:	0733      	lsls	r3, r6, #28
 80016ae:	d416      	bmi.n	80016de <I2C_Slave_ISR_IT+0x122>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016b0:	07ab      	lsls	r3, r5, #30
 80016b2:	d5a8      	bpl.n	8001606 <I2C_Slave_ISR_IT+0x4a>
 80016b4:	07b3      	lsls	r3, r6, #30
 80016b6:	d5a6      	bpl.n	8001606 <I2C_Slave_ISR_IT+0x4a>
    if (hi2c->XferCount > 0U)
 80016b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <I2C_Slave_ISR_IT+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80016c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	8523      	strh	r3, [r4, #40]	; 0x28
 80016dc:	e793      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80016de:	0029      	movs	r1, r5
 80016e0:	0020      	movs	r0, r4
 80016e2:	f7ff fd90 	bl	8001206 <I2C_ITAddrCplt>
 80016e6:	e78e      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	045b      	lsls	r3, r3, #17
 80016ec:	429f      	cmp	r7, r3
 80016ee:	d002      	beq.n	80016f6 <I2C_Slave_ISR_IT+0x13a>
 80016f0:	2f00      	cmp	r7, #0
 80016f2:	d000      	beq.n	80016f6 <I2C_Slave_ISR_IT+0x13a>
 80016f4:	e787      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
        I2C_ITSlaveSeqCplt(hi2c);
 80016f6:	0020      	movs	r0, r4
 80016f8:	f7ff fd42 	bl	8001180 <I2C_ITSlaveSeqCplt>
 80016fc:	e783      	b.n	8001606 <I2C_Slave_ISR_IT+0x4a>
  __HAL_LOCK(hi2c);
 80016fe:	2002      	movs	r0, #2
 8001700:	e785      	b.n	800160e <I2C_Slave_ISR_IT+0x52>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	ffff0000 	.word	0xffff0000

08001708 <HAL_I2C_ER_IRQHandler>:
{
 8001708:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800170a:	6802      	ldr	r2, [r0, #0]
 800170c:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800170e:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001710:	05dc      	lsls	r4, r3, #23
 8001712:	d508      	bpl.n	8001726 <HAL_I2C_ER_IRQHandler+0x1e>
 8001714:	060c      	lsls	r4, r1, #24
 8001716:	d506      	bpl.n	8001726 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001718:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800171a:	2501      	movs	r5, #1
 800171c:	432c      	orrs	r4, r5
 800171e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001720:	2480      	movs	r4, #128	; 0x80
 8001722:	0064      	lsls	r4, r4, #1
 8001724:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001726:	055a      	lsls	r2, r3, #21
 8001728:	d509      	bpl.n	800173e <HAL_I2C_ER_IRQHandler+0x36>
 800172a:	060a      	lsls	r2, r1, #24
 800172c:	d507      	bpl.n	800173e <HAL_I2C_ER_IRQHandler+0x36>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800172e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001730:	2408      	movs	r4, #8
 8001732:	4322      	orrs	r2, r4
 8001734:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001736:	6802      	ldr	r2, [r0, #0]
 8001738:	2480      	movs	r4, #128	; 0x80
 800173a:	00e4      	lsls	r4, r4, #3
 800173c:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800173e:	059b      	lsls	r3, r3, #22
 8001740:	d509      	bpl.n	8001756 <HAL_I2C_ER_IRQHandler+0x4e>
 8001742:	060b      	lsls	r3, r1, #24
 8001744:	d507      	bpl.n	8001756 <HAL_I2C_ER_IRQHandler+0x4e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001746:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001748:	2202      	movs	r2, #2
 800174a:	4313      	orrs	r3, r2
 800174c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800174e:	6803      	ldr	r3, [r0, #0]
 8001750:	32ff      	adds	r2, #255	; 0xff
 8001752:	32ff      	adds	r2, #255	; 0xff
 8001754:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001756:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001758:	230b      	movs	r3, #11
 800175a:	420b      	tst	r3, r1
 800175c:	d100      	bne.n	8001760 <HAL_I2C_ER_IRQHandler+0x58>
}
 800175e:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, tmperror);
 8001760:	f7ff fdf0 	bl	8001344 <I2C_ITError>
}
 8001764:	e7fb      	b.n	800175e <HAL_I2C_ER_IRQHandler+0x56>

08001766 <I2C_DMAAbort>:
{
 8001766:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001768:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 800176a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001770:	2200      	movs	r2, #0
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8001774:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800177a:	2200      	movs	r2, #0
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800177e:	f7ff fdcb 	bl	8001318 <I2C_TreatErrorCallback>
}
 8001782:	bd10      	pop	{r4, pc}

08001784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001786:	2341      	movs	r3, #65	; 0x41
 8001788:	5cc3      	ldrb	r3, [r0, r3]
 800178a:	2b20      	cmp	r3, #32
 800178c:	d120      	bne.n	80017d0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178e:	3320      	adds	r3, #32
 8001790:	5cc3      	ldrb	r3, [r0, r3]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d01e      	beq.n	80017d4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8001796:	2440      	movs	r4, #64	; 0x40
 8001798:	2201      	movs	r2, #1
 800179a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	2541      	movs	r5, #65	; 0x41
 800179e:	2324      	movs	r3, #36	; 0x24
 80017a0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017a2:	6806      	ldr	r6, [r0, #0]
 80017a4:	6833      	ldr	r3, [r6, #0]
 80017a6:	4393      	bics	r3, r2
 80017a8:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017aa:	6806      	ldr	r6, [r0, #0]
 80017ac:	6833      	ldr	r3, [r6, #0]
 80017ae:	4f0a      	ldr	r7, [pc, #40]	; (80017d8 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80017b0:	403b      	ands	r3, r7
 80017b2:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017b4:	6806      	ldr	r6, [r0, #0]
 80017b6:	6833      	ldr	r3, [r6, #0]
 80017b8:	4319      	orrs	r1, r3
 80017ba:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017bc:	6801      	ldr	r1, [r0, #0]
 80017be:	680b      	ldr	r3, [r1, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c4:	2320      	movs	r3, #32
 80017c6:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c8:	2300      	movs	r3, #0
 80017ca:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80017cc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80017d0:	2002      	movs	r0, #2
 80017d2:	e7fc      	b.n	80017ce <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80017d4:	2002      	movs	r0, #2
 80017d6:	e7fa      	b.n	80017ce <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80017d8:	ffffefff 	.word	0xffffefff

080017dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017dc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017de:	2341      	movs	r3, #65	; 0x41
 80017e0:	5cc3      	ldrb	r3, [r0, r3]
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d11e      	bne.n	8001824 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e6:	3320      	adds	r3, #32
 80017e8:	5cc3      	ldrb	r3, [r0, r3]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d01c      	beq.n	8001828 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80017ee:	2440      	movs	r4, #64	; 0x40
 80017f0:	2201      	movs	r2, #1
 80017f2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	2541      	movs	r5, #65	; 0x41
 80017f6:	2324      	movs	r3, #36	; 0x24
 80017f8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017fa:	6806      	ldr	r6, [r0, #0]
 80017fc:	6833      	ldr	r3, [r6, #0]
 80017fe:	4393      	bics	r3, r2
 8001800:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001802:	6806      	ldr	r6, [r0, #0]
 8001804:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001806:	4f09      	ldr	r7, [pc, #36]	; (800182c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001808:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800180a:	0209      	lsls	r1, r1, #8
 800180c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800180e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001810:	6801      	ldr	r1, [r0, #0]
 8001812:	680b      	ldr	r3, [r1, #0]
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001818:	2320      	movs	r3, #32
 800181a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181c:	2300      	movs	r3, #0
 800181e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001820:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001824:	2002      	movs	r0, #2
 8001826:	e7fc      	b.n	8001822 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001828:	2002      	movs	r0, #2
 800182a:	e7fa      	b.n	8001822 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800182c:	fffff0ff 	.word	0xfffff0ff

08001830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	d100      	bne.n	8001838 <HAL_RCC_OscConfig+0x8>
 8001836:	e149      	b.n	8001acc <HAL_RCC_OscConfig+0x29c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	07db      	lsls	r3, r3, #31
 800183c:	d530      	bpl.n	80018a0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183e:	4bab      	ldr	r3, [pc, #684]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	2338      	movs	r3, #56	; 0x38
 8001844:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001846:	2b08      	cmp	r3, #8
 8001848:	d022      	beq.n	8001890 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	6843      	ldr	r3, [r0, #4]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	0252      	lsls	r2, r2, #9
 8001850:	4293      	cmp	r3, r2
 8001852:	d072      	beq.n	800193a <HAL_RCC_OscConfig+0x10a>
 8001854:	22a0      	movs	r2, #160	; 0xa0
 8001856:	02d2      	lsls	r2, r2, #11
 8001858:	4293      	cmp	r3, r2
 800185a:	d075      	beq.n	8001948 <HAL_RCC_OscConfig+0x118>
 800185c:	4ba3      	ldr	r3, [pc, #652]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	49a3      	ldr	r1, [pc, #652]	; (8001af0 <HAL_RCC_OscConfig+0x2c0>)
 8001862:	400a      	ands	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	49a2      	ldr	r1, [pc, #648]	; (8001af4 <HAL_RCC_OscConfig+0x2c4>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186e:	6863      	ldr	r3, [r4, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d075      	beq.n	8001960 <HAL_RCC_OscConfig+0x130>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f9f0 	bl	8000c58 <HAL_GetTick>
 8001878:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	4b9c      	ldr	r3, [pc, #624]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	039b      	lsls	r3, r3, #14
 8001880:	d40e      	bmi.n	80018a0 <HAL_RCC_OscConfig+0x70>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff f9e9 	bl	8000c58 <HAL_GetTick>
 8001886:	1b40      	subs	r0, r0, r5
 8001888:	2864      	cmp	r0, #100	; 0x64
 800188a:	d9f6      	bls.n	800187a <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 800188c:	2003      	movs	r0, #3
 800188e:	e128      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b96      	ldr	r3, [pc, #600]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	039b      	lsls	r3, r3, #14
 8001896:	d503      	bpl.n	80018a0 <HAL_RCC_OscConfig+0x70>
 8001898:	6843      	ldr	r3, [r0, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x70>
 800189e:	e117      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	079b      	lsls	r3, r3, #30
 80018a4:	d529      	bpl.n	80018fa <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a6:	4b91      	ldr	r3, [pc, #580]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2238      	movs	r2, #56	; 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018ac:	421a      	tst	r2, r3
 80018ae:	d165      	bne.n	800197c <HAL_RCC_OscConfig+0x14c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	055b      	lsls	r3, r3, #21
 80018b6:	d503      	bpl.n	80018c0 <HAL_RCC_OscConfig+0x90>
 80018b8:	68e3      	ldr	r3, [r4, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d100      	bne.n	80018c0 <HAL_RCC_OscConfig+0x90>
 80018be:	e109      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b8a      	ldr	r3, [pc, #552]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	498c      	ldr	r1, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x2c8>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	6961      	ldr	r1, [r4, #20]
 80018ca:	0209      	lsls	r1, r1, #8
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	498a      	ldr	r1, [pc, #552]	; (8001afc <HAL_RCC_OscConfig+0x2cc>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	6921      	ldr	r1, [r4, #16]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0adb      	lsrs	r3, r3, #11
 80018e0:	2207      	movs	r2, #7
 80018e2:	401a      	ands	r2, r3
 80018e4:	4b86      	ldr	r3, [pc, #536]	; (8001b00 <HAL_RCC_OscConfig+0x2d0>)
 80018e6:	40d3      	lsrs	r3, r2
 80018e8:	4a86      	ldr	r2, [pc, #536]	; (8001b04 <HAL_RCC_OscConfig+0x2d4>)
 80018ea:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <HAL_RCC_OscConfig+0x2d8>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	f7ff f96e 	bl	8000bd0 <HAL_InitTick>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d000      	beq.n	80018fa <HAL_RCC_OscConfig+0xca>
 80018f8:	e0ee      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	071b      	lsls	r3, r3, #28
 80018fe:	d57d      	bpl.n	80019fc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001900:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	2338      	movs	r3, #56	; 0x38
 8001906:	4013      	ands	r3, r2
 8001908:	2b18      	cmp	r3, #24
 800190a:	d070      	beq.n	80019ee <HAL_RCC_OscConfig+0x1be>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190c:	69a3      	ldr	r3, [r4, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0xe4>
 8001912:	e09c      	b.n	8001a4e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001914:	4a75      	ldr	r2, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001916:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001918:	2101      	movs	r1, #1
 800191a:	430b      	orrs	r3, r1
 800191c:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f99b 	bl	8000c58 <HAL_GetTick>
 8001922:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001924:	4b71      	ldr	r3, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001928:	079b      	lsls	r3, r3, #30
 800192a:	d467      	bmi.n	80019fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff f994 	bl	8000c58 <HAL_GetTick>
 8001930:	1b40      	subs	r0, r0, r5
 8001932:	2802      	cmp	r0, #2
 8001934:	d9f6      	bls.n	8001924 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
 8001938:	e0d3      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	4a6c      	ldr	r2, [pc, #432]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 800193c:	6811      	ldr	r1, [r2, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	430b      	orrs	r3, r1
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e792      	b.n	800186e <HAL_RCC_OscConfig+0x3e>
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	02d2      	lsls	r2, r2, #11
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	0252      	lsls	r2, r2, #9
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e786      	b.n	800186e <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8001960:	f7ff f97a 	bl	8000c58 <HAL_GetTick>
 8001964:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	039b      	lsls	r3, r3, #14
 800196c:	d598      	bpl.n	80018a0 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196e:	f7ff f973 	bl	8000c58 <HAL_GetTick>
 8001972:	1b40      	subs	r0, r0, r5
 8001974:	2864      	cmp	r0, #100	; 0x64
 8001976:	d9f6      	bls.n	8001966 <HAL_RCC_OscConfig+0x136>
            return HAL_TIMEOUT;
 8001978:	2003      	movs	r0, #3
 800197a:	e0b2      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	68e3      	ldr	r3, [r4, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d022      	beq.n	80019c8 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	495d      	ldr	r1, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x2cc>)
 8001988:	400b      	ands	r3, r1
 800198a:	6921      	ldr	r1, [r4, #16]
 800198c:	430b      	orrs	r3, r1
 800198e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8001990:	6811      	ldr	r1, [r2, #0]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	430b      	orrs	r3, r1
 8001998:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800199a:	f7ff f95d 	bl	8000c58 <HAL_GetTick>
 800199e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	055b      	lsls	r3, r3, #21
 80019a6:	d406      	bmi.n	80019b6 <HAL_RCC_OscConfig+0x186>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff f956 	bl	8000c58 <HAL_GetTick>
 80019ac:	1b40      	subs	r0, r0, r5
 80019ae:	2802      	cmp	r0, #2
 80019b0:	d9f6      	bls.n	80019a0 <HAL_RCC_OscConfig+0x170>
            return HAL_TIMEOUT;
 80019b2:	2003      	movs	r0, #3
 80019b4:	e095      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	494d      	ldr	r1, [pc, #308]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80019b8:	684b      	ldr	r3, [r1, #4]
 80019ba:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_RCC_OscConfig+0x2c8>)
 80019bc:	4013      	ands	r3, r2
 80019be:	6962      	ldr	r2, [r4, #20]
 80019c0:	0212      	lsls	r2, r2, #8
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
 80019c6:	e798      	b.n	80018fa <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_DISABLE();
 80019c8:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	494f      	ldr	r1, [pc, #316]	; (8001b0c <HAL_RCC_OscConfig+0x2dc>)
 80019ce:	400b      	ands	r3, r1
 80019d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019d2:	f7ff f941 	bl	8000c58 <HAL_GetTick>
 80019d6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d8:	4b44      	ldr	r3, [pc, #272]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	055b      	lsls	r3, r3, #21
 80019de:	d58c      	bpl.n	80018fa <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff f93a 	bl	8000c58 <HAL_GetTick>
 80019e4:	1b40      	subs	r0, r0, r5
 80019e6:	2802      	cmp	r0, #2
 80019e8:	d9f6      	bls.n	80019d8 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
 80019ec:	e079      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	079b      	lsls	r3, r3, #30
 80019f4:	d502      	bpl.n	80019fc <HAL_RCC_OscConfig+0x1cc>
 80019f6:	69a3      	ldr	r3, [r4, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d06f      	beq.n	8001adc <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	075b      	lsls	r3, r3, #29
 8001a00:	d56e      	bpl.n	8001ae0 <HAL_RCC_OscConfig+0x2b0>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a02:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	2338      	movs	r3, #56	; 0x38
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d032      	beq.n	8001a74 <HAL_RCC_OscConfig+0x244>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	68a3      	ldr	r3, [r4, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d038      	beq.n	8001a86 <HAL_RCC_OscConfig+0x256>
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d03c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x262>
 8001a18:	4b34      	ldr	r3, [pc, #208]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a24:	3103      	adds	r1, #3
 8001a26:	438a      	bics	r2, r1
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2a:	68a3      	ldr	r3, [r4, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f912 	bl	8000c58 <HAL_GetTick>
 8001a34:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3a:	079b      	lsls	r3, r3, #30
 8001a3c:	d433      	bmi.n	8001aa6 <HAL_RCC_OscConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f90b 	bl	8000c58 <HAL_GetTick>
 8001a42:	1b00      	subs	r0, r0, r4
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_RCC_OscConfig+0x2e0>)
 8001a46:	4298      	cmp	r0, r3
 8001a48:	d9f5      	bls.n	8001a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	e049      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        __HAL_RCC_LSI_DISABLE();
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a50:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001a52:	2101      	movs	r1, #1
 8001a54:	438b      	bics	r3, r1
 8001a56:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001a58:	f7ff f8fe 	bl	8000c58 <HAL_GetTick>
 8001a5c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	079b      	lsls	r3, r3, #30
 8001a64:	d5ca      	bpl.n	80019fc <HAL_RCC_OscConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f8f7 	bl	8000c58 <HAL_GetTick>
 8001a6a:	1b40      	subs	r0, r0, r5
 8001a6c:	2802      	cmp	r0, #2
 8001a6e:	d9f6      	bls.n	8001a5e <HAL_RCC_OscConfig+0x22e>
            return HAL_TIMEOUT;
 8001a70:	2003      	movs	r0, #3
 8001a72:	e036      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	079b      	lsls	r3, r3, #30
 8001a7a:	d533      	bpl.n	8001ae4 <HAL_RCC_OscConfig+0x2b4>
 8001a7c:	68a3      	ldr	r3, [r4, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2b8>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
      }
    }
  }
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a86:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a88:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a90:	e7cb      	b.n	8001a2a <HAL_RCC_OscConfig+0x1fa>
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a96:	2104      	movs	r1, #4
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9e:	3903      	subs	r1, #3
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa4:	e7c1      	b.n	8001a2a <HAL_RCC_OscConfig+0x1fa>
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e01b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f8d5 	bl	8000c58 <HAL_GetTick>
 8001aae:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_RCC_OscConfig+0x2bc>)
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	079b      	lsls	r3, r3, #30
 8001ab6:	d507      	bpl.n	8001ac8 <HAL_RCC_OscConfig+0x298>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f8ce 	bl	8000c58 <HAL_GetTick>
 8001abc:	1b00      	subs	r0, r0, r4
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_RCC_OscConfig+0x2e0>)
 8001ac0:	4298      	cmp	r0, r3
 8001ac2:	d9f5      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x280>
            return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	e00c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
  return HAL_OK;
 8001ac8:	2000      	movs	r0, #0
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
    return HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	e006      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	e004      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
          return HAL_ERROR;
 8001ad8:	2001      	movs	r0, #1
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
  return HAL_OK;
 8001ae0:	2000      	movs	r0, #0
}
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e7fc      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
        return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
 8001aea:	e7fa      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2b2>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	fffeffff 	.word	0xfffeffff
 8001af4:	fffbffff 	.word	0xfffbffff
 8001af8:	ffff80ff 	.word	0xffff80ff
 8001afc:	ffffc7ff 	.word	0xffffc7ff
 8001b00:	02dc6c00 	.word	0x02dc6c00
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	fffffeff 	.word	0xfffffeff
 8001b10:	00001388 	.word	0x00001388

08001b14 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	421a      	tst	r2, r3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	0ad2      	lsrs	r2, r2, #11
 8001b24:	2307      	movs	r3, #7
 8001b26:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b28:	4810      	ldr	r0, [pc, #64]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x58>)
 8001b2a:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001b2c:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	2338      	movs	r3, #56	; 0x38
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d010      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	2338      	movs	r3, #56	; 0x38
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d00c      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	2338      	movs	r3, #56	; 0x38
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b18      	cmp	r3, #24
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8001b52:	2000      	movs	r0, #0
  return sysclockfreq;
 8001b54:	e7ea      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001b56:	20fa      	movs	r0, #250	; 0xfa
 8001b58:	01c0      	lsls	r0, r0, #7
 8001b5a:	e7e7      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b5e:	e7e5      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001b60:	2080      	movs	r0, #128	; 0x80
 8001b62:	0200      	lsls	r0, r0, #8
 8001b64:	e7e2      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x18>
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	02dc6c00 	.word	0x02dc6c00
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_ClockConfig>:
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	0004      	movs	r4, r0
 8001b78:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d100      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xc>
 8001b7e:	e0aa      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_ClockConfig+0x16c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2307      	movs	r3, #7
 8001b86:	4013      	ands	r3, r2
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d328      	bcc.n	8001bde <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	079a      	lsls	r2, r3, #30
 8001b90:	d510      	bpl.n	8001bb4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b92:	075b      	lsls	r3, r3, #29
 8001b94:	d507      	bpl.n	8001ba6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b96:	4953      	ldr	r1, [pc, #332]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001b98:	688b      	ldr	r3, [r1, #8]
 8001b9a:	4a53      	ldr	r2, [pc, #332]	; (8001ce8 <HAL_RCC_ClockConfig+0x174>)
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	23b0      	movs	r3, #176	; 0xb0
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba6:	4a4f      	ldr	r2, [pc, #316]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001ba8:	6893      	ldr	r3, [r2, #8]
 8001baa:	4950      	ldr	r1, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x178>)
 8001bac:	400b      	ands	r3, r1
 8001bae:	68e1      	ldr	r1, [r4, #12]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	07db      	lsls	r3, r3, #31
 8001bb8:	d552      	bpl.n	8001c60 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	211c      	movs	r1, #28
 8001bc0:	438b      	bics	r3, r1
 8001bc2:	68a1      	ldr	r1, [r4, #8]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6013      	str	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d01e      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x98>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d138      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd2:	4a44      	ldr	r2, [pc, #272]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	0552      	lsls	r2, r2, #21
 8001bd8:	d41b      	bmi.n	8001c12 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e063      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <HAL_RCC_ClockConfig+0x16c>)
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	2107      	movs	r1, #7
 8001be4:	438b      	bics	r3, r1
 8001be6:	432b      	orrs	r3, r5
 8001be8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bea:	f7ff f835 	bl	8000c58 <HAL_GetTick>
 8001bee:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_ClockConfig+0x16c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	42ab      	cmp	r3, r5
 8001bfa:	d0c7      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f82c 	bl	8000c58 <HAL_GetTick>
 8001c00:	1b80      	subs	r0, r0, r6
 8001c02:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <HAL_RCC_ClockConfig+0x17c>)
 8001c04:	4290      	cmp	r0, r2
 8001c06:	d9f3      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e04c      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	0392      	lsls	r2, r2, #14
 8001c10:	d563      	bpl.n	8001cda <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4934      	ldr	r1, [pc, #208]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001c14:	688a      	ldr	r2, [r1, #8]
 8001c16:	2007      	movs	r0, #7
 8001c18:	4382      	bics	r2, r0
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001c1e:	f7ff f81b 	bl	8000c58 <HAL_GetTick>
 8001c22:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2238      	movs	r2, #56	; 0x38
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff f810 	bl	8000c58 <HAL_GetTick>
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_ClockConfig+0x17c>)
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	d9f1      	bls.n	8001c24 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8001c40:	2003      	movs	r0, #3
 8001c42:	e030      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001c4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c4c:	0792      	lsls	r2, r2, #30
 8001c4e:	d4e0      	bmi.n	8001c12 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8001c50:	2001      	movs	r0, #1
 8001c52:	e028      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c54:	4a23      	ldr	r2, [pc, #140]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001c56:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001c58:	0792      	lsls	r2, r2, #30
 8001c5a:	d4da      	bmi.n	8001c12 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	e022      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_RCC_ClockConfig+0x16c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2307      	movs	r3, #7
 8001c66:	4013      	ands	r3, r2
 8001c68:	42ab      	cmp	r3, r5
 8001c6a:	d81d      	bhi.n	8001ca8 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	075b      	lsls	r3, r3, #29
 8001c70:	d506      	bpl.n	8001c80 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001c74:	6893      	ldr	r3, [r2, #8]
 8001c76:	491f      	ldr	r1, [pc, #124]	; (8001cf4 <HAL_RCC_ClockConfig+0x180>)
 8001c78:	400b      	ands	r3, r1
 8001c7a:	6921      	ldr	r1, [r4, #16]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c80:	f7ff ff48 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_RCC_ClockConfig+0x170>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	0a12      	lsrs	r2, r2, #8
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_RCC_ClockConfig+0x184>)
 8001c92:	589a      	ldr	r2, [r3, r2]
 8001c94:	231f      	movs	r3, #31
 8001c96:	4013      	ands	r3, r2
 8001c98:	40d8      	lsrs	r0, r3
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_RCC_ClockConfig+0x188>)
 8001c9c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_RCC_ClockConfig+0x18c>)
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	f7fe ff95 	bl	8000bd0 <HAL_InitTick>
}
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_RCC_ClockConfig+0x16c>)
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	2107      	movs	r1, #7
 8001cae:	438b      	bics	r3, r1
 8001cb0:	432b      	orrs	r3, r5
 8001cb2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ffd0 	bl	8000c58 <HAL_GetTick>
 8001cb8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x16c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	42ab      	cmp	r3, r5
 8001cc4:	d0d2      	beq.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7fe ffc7 	bl	8000c58 <HAL_GetTick>
 8001cca:	1b80      	subs	r0, r0, r6
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_RCC_ClockConfig+0x17c>)
 8001cce:	4298      	cmp	r0, r3
 8001cd0:	d9f3      	bls.n	8001cba <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	e7e7      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e7e5      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e7e3      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x132>
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	ffff84ff 	.word	0xffff84ff
 8001cec:	fffff0ff 	.word	0xfffff0ff
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	ffff8fff 	.word	0xffff8fff
 8001cf8:	0800453c 	.word	0x0800453c
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008

08001d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001d06:	6818      	ldr	r0, [r3, #0]
}
 8001d08:	4770      	bx	lr
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001d12:	f7ff fff7 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	0b12      	lsrs	r2, r2, #12
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	4013      	ands	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d24:	589a      	ldr	r2, [r3, r2]
 8001d26:	231f      	movs	r3, #31
 8001d28:	4013      	ands	r3, r2
 8001d2a:	40d8      	lsrs	r0, r3
}
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	0800457c 	.word	0x0800457c

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d3e:	6803      	ldr	r3, [r0, #0]
 8001d40:	039b      	lsls	r3, r3, #14
 8001d42:	d54e      	bpl.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xaa>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	d435      	bmi.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d4e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d50:	2080      	movs	r0, #128	; 0x80
 8001d52:	0540      	lsls	r0, r0, #21
 8001d54:	4301      	orrs	r1, r0
 8001d56:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001d58:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001d5a:	4003      	ands	r3, r0
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d60:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d64:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001d66:	22c0      	movs	r2, #192	; 0xc0
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d6e:	4211      	tst	r1, r2
 8001d70:	d010      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d72:	69a2      	ldr	r2, [r4, #24]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001d78:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d7a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001d7e:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d80:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0249      	lsls	r1, r1, #9
 8001d86:	4301      	orrs	r1, r0
 8001d88:	65d1      	str	r1, [r2, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d8a:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8001d8c:	4832      	ldr	r0, [pc, #200]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001d8e:	4001      	ands	r1, r0
 8001d90:	65d1      	str	r1, [r2, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001d92:	65d3      	str	r3, [r2, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001d94:	07db      	lsls	r3, r3, #31
 8001d96:	d411      	bmi.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d98:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d9a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001d9c:	492d      	ldr	r1, [pc, #180]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001d9e:	400b      	ands	r3, r1
 8001da0:	69a1      	ldr	r1, [r4, #24]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da6:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001da8:	2d01      	cmp	r5, #1
 8001daa:	d11b      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dac:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001dae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001db0:	492a      	ldr	r1, [pc, #168]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001db2:	400b      	ands	r3, r1
 8001db4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001db6:	e015      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8001db8:	2500      	movs	r5, #0
 8001dba:	e7d2      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8001dbc:	f7fe ff4c 	bl	8000c58 <HAL_GetTick>
 8001dc0:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	079b      	lsls	r3, r3, #30
 8001dc8:	d407      	bmi.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe ff45 	bl	8000c58 <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001dd2:	4298      	cmp	r0, r3
 8001dd4:	d9f5      	bls.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	e000      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xa4>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dda:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d1e3      	bne.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001de0:	e7da      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001de2:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	07db      	lsls	r3, r3, #31
 8001de8:	d506      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001dec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001dee:	2103      	movs	r1, #3
 8001df0:	438b      	bics	r3, r1
 8001df2:	68a1      	ldr	r1, [r4, #8]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	065b      	lsls	r3, r3, #25
 8001dfc:	d506      	bpl.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e00:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001e02:	4918      	ldr	r1, [pc, #96]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001e04:	400b      	ands	r3, r1
 8001e06:	68e1      	ldr	r1, [r4, #12]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	045b      	lsls	r3, r3, #17
 8001e10:	d506      	bpl.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e14:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	6961      	ldr	r1, [r4, #20]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	6553      	str	r3, [r2, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	051b      	lsls	r3, r3, #20
 8001e24:	d506      	bpl.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e28:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001e2a:	490f      	ldr	r1, [pc, #60]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	6921      	ldr	r1, [r4, #16]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6553      	str	r3, [r2, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db01      	blt.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
  }
  return status;
}
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	21e0      	movs	r1, #224	; 0xe0
 8001e44:	438b      	bics	r3, r1
 8001e46:	6861      	ldr	r1, [r4, #4]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e7f5      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x102>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40021000 	.word	0x40021000
 8001e54:	fffffcff 	.word	0xfffffcff
 8001e58:	fffeffff 	.word	0xfffeffff
 8001e5c:	efffffff 	.word	0xefffffff
 8001e60:	00001388 	.word	0x00001388
 8001e64:	ffffcfff 	.word	0xffffcfff
 8001e68:	ffff3fff 	.word	0xffff3fff

08001e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6e:	46d6      	mov	lr, sl
 8001e70:	464f      	mov	r7, r9
 8001e72:	4646      	mov	r6, r8
 8001e74:	b5c0      	push	{r6, r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	0006      	movs	r6, r0
 8001e7a:	000d      	movs	r5, r1
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e80:	f7fe feea 	bl	8000c58 <HAL_GetTick>
 8001e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e86:	1a18      	subs	r0, r3, r0
 8001e88:	4681      	mov	r9, r0
 8001e8a:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 8001e8c:	f7fe fee4 	bl	8000c58 <HAL_GetTick>
 8001e90:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <SPI_WaitFlagStateUntilTimeout+0xe0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	0d1b      	lsrs	r3, r3, #20
 8001e9a:	464a      	mov	r2, r9
 8001e9c:	4353      	muls	r3, r2
 8001e9e:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ea0:	6833      	ldr	r3, [r6, #0]
 8001ea2:	689c      	ldr	r4, [r3, #8]
 8001ea4:	402c      	ands	r4, r5
 8001ea6:	1b64      	subs	r4, r4, r5
 8001ea8:	4263      	negs	r3, r4
 8001eaa:	415c      	adcs	r4, r3
 8001eac:	4544      	cmp	r4, r8
 8001eae:	d045      	beq.n	8001f3c <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001eb0:	1c7b      	adds	r3, r7, #1
 8001eb2:	d0f5      	beq.n	8001ea0 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eb4:	f7fe fed0 	bl	8000c58 <HAL_GetTick>
 8001eb8:	4653      	mov	r3, sl
 8001eba:	1ac0      	subs	r0, r0, r3
 8001ebc:	4548      	cmp	r0, r9
 8001ebe:	d20b      	bcs.n	8001ed8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ec6:	9a01      	ldr	r2, [sp, #4]
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d000      	beq.n	8001ece <SPI_WaitFlagStateUntilTimeout+0x62>
 8001ecc:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	4691      	mov	r9, r2
 8001ed6:	e7e3      	b.n	8001ea0 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ed8:	6832      	ldr	r2, [r6, #0]
 8001eda:	6853      	ldr	r3, [r2, #4]
 8001edc:	21e0      	movs	r1, #224	; 0xe0
 8001ede:	438b      	bics	r3, r1
 8001ee0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee2:	2382      	movs	r3, #130	; 0x82
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	6872      	ldr	r2, [r6, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d00c      	beq.n	8001f06 <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	019b      	lsls	r3, r3, #6
 8001ef0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d016      	beq.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8001ef6:	235d      	movs	r3, #93	; 0x5d
 8001ef8:	2201      	movs	r2, #1
 8001efa:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8001efc:	3b01      	subs	r3, #1
 8001efe:	2200      	movs	r2, #0
 8001f00:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
 8001f04:	e01b      	b.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f06:	68b3      	ldr	r3, [r6, #8]
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0212      	lsls	r2, r2, #8
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d003      	beq.n	8001f18 <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	00d2      	lsls	r2, r2, #3
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d1e9      	bne.n	8001eec <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 8001f18:	6832      	ldr	r2, [r6, #0]
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	438b      	bics	r3, r1
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e7e3      	b.n	8001eec <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8001f24:	6832      	ldr	r2, [r6, #0]
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	4909      	ldr	r1, [pc, #36]	; (8001f50 <SPI_WaitFlagStateUntilTimeout+0xe4>)
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	6832      	ldr	r2, [r6, #0]
 8001f30:	6811      	ldr	r1, [r2, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	430b      	orrs	r3, r1
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e7dc      	b.n	8001ef6 <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8001f3c:	2000      	movs	r0, #0
}
 8001f3e:	b002      	add	sp, #8
 8001f40:	bce0      	pop	{r5, r6, r7}
 8001f42:	46ba      	mov	sl, r7
 8001f44:	46b1      	mov	r9, r6
 8001f46:	46a8      	mov	r8, r5
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	ffffdfff 	.word	0xffffdfff

08001f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f56:	46de      	mov	lr, fp
 8001f58:	4657      	mov	r7, sl
 8001f5a:	464e      	mov	r6, r9
 8001f5c:	4645      	mov	r5, r8
 8001f5e:	b5e0      	push	{r5, r6, r7, lr}
 8001f60:	b083      	sub	sp, #12
 8001f62:	0007      	movs	r7, r0
 8001f64:	000d      	movs	r5, r1
 8001f66:	0016      	movs	r6, r2
 8001f68:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f6a:	466b      	mov	r3, sp
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f70:	f7fe fe72 	bl	8000c58 <HAL_GetTick>
 8001f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f76:	1a18      	subs	r0, r3, r0
 8001f78:	4440      	add	r0, r8
 8001f7a:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 8001f7c:	f7fe fe6c 	bl	8000c58 <HAL_GetTick>
 8001f80:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <SPI_WaitFifoStateUntilTimeout+0x10c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	0093      	lsls	r3, r2, #2
 8001f8c:	189a      	adds	r2, r3, r2
 8001f8e:	00d3      	lsls	r3, r2, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	0d1b      	lsrs	r3, r3, #20
 8001f94:	464a      	mov	r2, r9
 8001f96:	4353      	muls	r3, r2
 8001f98:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f9a:	e002      	b.n	8001fa2 <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	d111      	bne.n	8001fc6 <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689c      	ldr	r4, [r3, #8]
 8001fa6:	402c      	ands	r4, r5
 8001fa8:	42b4      	cmp	r4, r6
 8001faa:	d050      	beq.n	800204e <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	429d      	cmp	r5, r3
 8001fb2:	d1f3      	bne.n	8001f9c <SPI_WaitFifoStateUntilTimeout+0x48>
 8001fb4:	2e00      	cmp	r6, #0
 8001fb6:	d1f1      	bne.n	8001f9c <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 8001fb8:	465b      	mov	r3, fp
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	466a      	mov	r2, sp
 8001fc0:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 8001fc2:	78d3      	ldrb	r3, [r2, #3]
 8001fc4:	e7ea      	b.n	8001f9c <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fc6:	f7fe fe47 	bl	8000c58 <HAL_GetTick>
 8001fca:	4653      	mov	r3, sl
 8001fcc:	1ac0      	subs	r0, r0, r3
 8001fce:	4548      	cmp	r0, r9
 8001fd0:	d20b      	bcs.n	8001fea <SPI_WaitFifoStateUntilTimeout+0x96>
 8001fd2:	464b      	mov	r3, r9
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fd8:	9a01      	ldr	r2, [sp, #4]
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d000      	beq.n	8001fe0 <SPI_WaitFifoStateUntilTimeout+0x8c>
 8001fde:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001fe0:	9b01      	ldr	r3, [sp, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	4691      	mov	r9, r2
 8001fe8:	e7db      	b.n	8001fa2 <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	6853      	ldr	r3, [r2, #4]
 8001fee:	21e0      	movs	r1, #224	; 0xe0
 8001ff0:	438b      	bics	r3, r1
 8001ff2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff4:	2382      	movs	r3, #130	; 0x82
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d00c      	beq.n	8002018 <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002004:	429a      	cmp	r2, r3
 8002006:	d016      	beq.n	8002036 <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 8002008:	235d      	movs	r3, #93	; 0x5d
 800200a:	2201      	movs	r2, #1
 800200c:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800200e:	3b01      	subs	r3, #1
 8002010:	2200      	movs	r2, #0
 8002012:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002014:	2003      	movs	r0, #3
 8002016:	e01b      	b.n	8002050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0212      	lsls	r2, r2, #8
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	00d2      	lsls	r2, r2, #3
 8002026:	4293      	cmp	r3, r2
 8002028:	d1e9      	bne.n	8001ffe <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	438b      	bics	r3, r1
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e7e3      	b.n	8001ffe <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <SPI_WaitFifoStateUntilTimeout+0x110>)
 800203c:	400b      	ands	r3, r1
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	6811      	ldr	r1, [r2, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	430b      	orrs	r3, r1
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e7dc      	b.n	8002008 <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 800204e:	2000      	movs	r0, #0
}
 8002050:	b003      	add	sp, #12
 8002052:	bcf0      	pop	{r4, r5, r6, r7}
 8002054:	46bb      	mov	fp, r7
 8002056:	46b2      	mov	sl, r6
 8002058:	46a9      	mov	r9, r5
 800205a:	46a0      	mov	r8, r4
 800205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	20000000 	.word	0x20000000
 8002064:	ffffdfff 	.word	0xffffdfff

08002068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	0004      	movs	r4, r0
 800206e:	000d      	movs	r5, r1
 8002070:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002072:	21c0      	movs	r1, #192	; 0xc0
 8002074:	9200      	str	r2, [sp, #0]
 8002076:	002b      	movs	r3, r5
 8002078:	2200      	movs	r2, #0
 800207a:	0149      	lsls	r1, r1, #5
 800207c:	f7ff ff6a 	bl	8001f54 <SPI_WaitFifoStateUntilTimeout>
 8002080:	2800      	cmp	r0, #0
 8002082:	d118      	bne.n	80020b6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002084:	9600      	str	r6, [sp, #0]
 8002086:	002b      	movs	r3, r5
 8002088:	2200      	movs	r2, #0
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0020      	movs	r0, r4
 800208e:	f7ff feed 	bl	8001e6c <SPI_WaitFlagStateUntilTimeout>
 8002092:	2800      	cmp	r0, #0
 8002094:	d116      	bne.n	80020c4 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002096:	21c0      	movs	r1, #192	; 0xc0
 8002098:	9600      	str	r6, [sp, #0]
 800209a:	002b      	movs	r3, r5
 800209c:	2200      	movs	r2, #0
 800209e:	00c9      	lsls	r1, r1, #3
 80020a0:	0020      	movs	r0, r4
 80020a2:	f7ff ff57 	bl	8001f54 <SPI_WaitFifoStateUntilTimeout>
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d00a      	beq.n	80020c0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020ac:	2220      	movs	r2, #32
 80020ae:	4313      	orrs	r3, r2
 80020b0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e004      	b.n	80020c0 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020b8:	2220      	movs	r2, #32
 80020ba:	4313      	orrs	r3, r2
 80020bc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80020c0:	b002      	add	sp, #8
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020c6:	2220      	movs	r2, #32
 80020c8:	4313      	orrs	r3, r2
 80020ca:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80020cc:	2003      	movs	r0, #3
 80020ce:	e7f7      	b.n	80020c0 <SPI_EndRxTxTransaction+0x58>

080020d0 <HAL_SPI_Init>:
{
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80020d4:	d100      	bne.n	80020d8 <HAL_SPI_Init+0x8>
 80020d6:	e078      	b.n	80021ca <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d107      	bne.n	80020ee <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020de:	3305      	adds	r3, #5
 80020e0:	33ff      	adds	r3, #255	; 0xff
 80020e2:	6842      	ldr	r2, [r0, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d005      	beq.n	80020f4 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61c3      	str	r3, [r0, #28]
 80020ec:	e002      	b.n	80020f4 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020f2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f8:	335d      	adds	r3, #93	; 0x5d
 80020fa:	5ce3      	ldrb	r3, [r4, r3]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d05a      	beq.n	80021b6 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002100:	235d      	movs	r3, #93	; 0x5d
 8002102:	2202      	movs	r2, #2
 8002104:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8002106:	6822      	ldr	r2, [r4, #0]
 8002108:	6813      	ldr	r3, [r2, #0]
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	438b      	bics	r3, r1
 800210e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002110:	68e3      	ldr	r3, [r4, #12]
 8002112:	22e0      	movs	r2, #224	; 0xe0
 8002114:	00d2      	lsls	r2, r2, #3
 8002116:	4293      	cmp	r3, r2
 8002118:	d954      	bls.n	80021c4 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800211a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800211c:	21f0      	movs	r1, #240	; 0xf0
 800211e:	0109      	lsls	r1, r1, #4
 8002120:	428b      	cmp	r3, r1
 8002122:	d005      	beq.n	8002130 <HAL_SPI_Init+0x60>
 8002124:	21e0      	movs	r1, #224	; 0xe0
 8002126:	00c9      	lsls	r1, r1, #3
 8002128:	428b      	cmp	r3, r1
 800212a:	d001      	beq.n	8002130 <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002130:	2382      	movs	r3, #130	; 0x82
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	6861      	ldr	r1, [r4, #4]
 8002136:	400b      	ands	r3, r1
 8002138:	2184      	movs	r1, #132	; 0x84
 800213a:	0209      	lsls	r1, r1, #8
 800213c:	68a0      	ldr	r0, [r4, #8]
 800213e:	4001      	ands	r1, r0
 8002140:	430b      	orrs	r3, r1
 8002142:	2102      	movs	r1, #2
 8002144:	6920      	ldr	r0, [r4, #16]
 8002146:	4001      	ands	r1, r0
 8002148:	430b      	orrs	r3, r1
 800214a:	2101      	movs	r1, #1
 800214c:	6960      	ldr	r0, [r4, #20]
 800214e:	4008      	ands	r0, r1
 8002150:	4303      	orrs	r3, r0
 8002152:	2080      	movs	r0, #128	; 0x80
 8002154:	0080      	lsls	r0, r0, #2
 8002156:	69a5      	ldr	r5, [r4, #24]
 8002158:	4028      	ands	r0, r5
 800215a:	4303      	orrs	r3, r0
 800215c:	2038      	movs	r0, #56	; 0x38
 800215e:	69e5      	ldr	r5, [r4, #28]
 8002160:	4028      	ands	r0, r5
 8002162:	4303      	orrs	r3, r0
 8002164:	2080      	movs	r0, #128	; 0x80
 8002166:	6a25      	ldr	r5, [r4, #32]
 8002168:	4028      	ands	r0, r5
 800216a:	4303      	orrs	r3, r0
 800216c:	2080      	movs	r0, #128	; 0x80
 800216e:	0180      	lsls	r0, r0, #6
 8002170:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002172:	4028      	ands	r0, r5
 8002174:	4303      	orrs	r3, r0
 8002176:	6820      	ldr	r0, [r4, #0]
 8002178:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800217a:	8b60      	ldrh	r0, [r4, #26]
 800217c:	2304      	movs	r3, #4
 800217e:	4003      	ands	r3, r0
 8002180:	2010      	movs	r0, #16
 8002182:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002184:	4028      	ands	r0, r5
 8002186:	4303      	orrs	r3, r0
 8002188:	2008      	movs	r0, #8
 800218a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800218c:	4028      	ands	r0, r5
 800218e:	4303      	orrs	r3, r0
 8002190:	20f0      	movs	r0, #240	; 0xf0
 8002192:	0100      	lsls	r0, r0, #4
 8002194:	68e5      	ldr	r5, [r4, #12]
 8002196:	4028      	ands	r0, r5
 8002198:	4303      	orrs	r3, r0
 800219a:	6820      	ldr	r0, [r4, #0]
 800219c:	4313      	orrs	r3, r2
 800219e:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021a0:	6822      	ldr	r2, [r4, #0]
 80021a2:	69d3      	ldr	r3, [r2, #28]
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <HAL_SPI_Init+0x100>)
 80021a6:	4003      	ands	r3, r0
 80021a8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021ae:	335d      	adds	r3, #93	; 0x5d
 80021b0:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 80021b2:	2000      	movs	r0, #0
}
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	2200      	movs	r2, #0
 80021ba:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80021bc:	0020      	movs	r0, r4
 80021be:	f7fe fbef 	bl	80009a0 <HAL_SPI_MspInit>
 80021c2:	e79d      	b.n	8002100 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0152      	lsls	r2, r2, #5
 80021c8:	e7a8      	b.n	800211c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80021ca:	2001      	movs	r0, #1
 80021cc:	e7f2      	b.n	80021b4 <HAL_SPI_Init+0xe4>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	fffff7ff 	.word	0xfffff7ff

080021d4 <HAL_SPI_TransmitReceive>:
{
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	0004      	movs	r4, r0
 80021da:	9100      	str	r1, [sp, #0]
 80021dc:	9201      	str	r2, [sp, #4]
 80021de:	001e      	movs	r6, r3
 80021e0:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80021e2:	235c      	movs	r3, #92	; 0x5c
 80021e4:	5cc3      	ldrb	r3, [r0, r3]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d100      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x18>
 80021ea:	e157      	b.n	800249c <HAL_SPI_TransmitReceive+0x2c8>
 80021ec:	235c      	movs	r3, #92	; 0x5c
 80021ee:	2201      	movs	r2, #1
 80021f0:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80021f2:	f7fe fd31 	bl	8000c58 <HAL_GetTick>
 80021f6:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 80021f8:	235d      	movs	r3, #93	; 0x5d
 80021fa:	5ce3      	ldrb	r3, [r4, r3]
 80021fc:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 80021fe:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002200:	2b01      	cmp	r3, #1
 8002202:	d00b      	beq.n	800221c <HAL_SPI_TransmitReceive+0x48>
 8002204:	2382      	movs	r3, #130	; 0x82
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	429a      	cmp	r2, r3
 800220a:	d000      	beq.n	800220e <HAL_SPI_TransmitReceive+0x3a>
 800220c:	e12d      	b.n	800246a <HAL_SPI_TransmitReceive+0x296>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800220e:	68a3      	ldr	r3, [r4, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d000      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x42>
 8002214:	e132      	b.n	800247c <HAL_SPI_TransmitReceive+0x2a8>
 8002216:	2904      	cmp	r1, #4
 8002218:	d000      	beq.n	800221c <HAL_SPI_TransmitReceive+0x48>
 800221a:	e131      	b.n	8002480 <HAL_SPI_TransmitReceive+0x2ac>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800221c:	9b00      	ldr	r3, [sp, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d100      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x50>
 8002222:	e12f      	b.n	8002484 <HAL_SPI_TransmitReceive+0x2b0>
 8002224:	9b01      	ldr	r3, [sp, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d100      	bne.n	800222c <HAL_SPI_TransmitReceive+0x58>
 800222a:	e12d      	b.n	8002488 <HAL_SPI_TransmitReceive+0x2b4>
 800222c:	2e00      	cmp	r6, #0
 800222e:	d100      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x5e>
 8002230:	e12c      	b.n	800248c <HAL_SPI_TransmitReceive+0x2b8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002232:	235d      	movs	r3, #93	; 0x5d
 8002234:	5ce3      	ldrb	r3, [r4, r3]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d002      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800223a:	235d      	movs	r3, #93	; 0x5d
 800223c:	2205      	movs	r2, #5
 800223e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002244:	9a01      	ldr	r2, [sp, #4]
 8002246:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002248:	2246      	movs	r2, #70	; 0x46
 800224a:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferSize  = Size;
 800224c:	3a02      	subs	r2, #2
 800224e:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002250:	9a00      	ldr	r2, [sp, #0]
 8002252:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002254:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002256:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002258:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800225a:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800225c:	23e0      	movs	r3, #224	; 0xe0
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	68e2      	ldr	r2, [r4, #12]
 8002262:	429a      	cmp	r2, r3
 8002264:	d801      	bhi.n	800226a <HAL_SPI_TransmitReceive+0x96>
 8002266:	2e01      	cmp	r6, #1
 8002268:	d923      	bls.n	80022b2 <HAL_SPI_TransmitReceive+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800226a:	6822      	ldr	r2, [r4, #0]
 800226c:	6853      	ldr	r3, [r2, #4]
 800226e:	498c      	ldr	r1, [pc, #560]	; (80024a0 <HAL_SPI_TransmitReceive+0x2cc>)
 8002270:	400b      	ands	r3, r1
 8002272:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	0652      	lsls	r2, r2, #25
 800227a:	d403      	bmi.n	8002284 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002284:	23e0      	movs	r3, #224	; 0xe0
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	68e2      	ldr	r2, [r4, #12]
 800228a:	429a      	cmp	r2, r3
 800228c:	d955      	bls.n	800233a <HAL_SPI_TransmitReceive+0x166>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228e:	6863      	ldr	r3, [r4, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_SPI_TransmitReceive+0xc4>
 8002294:	2e01      	cmp	r6, #1
 8002296:	d10a      	bne.n	80022ae <HAL_SPI_TransmitReceive+0xda>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800229c:	8812      	ldrh	r2, [r2, #0]
 800229e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022a2:	3302      	adds	r3, #2
 80022a4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80022a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80022ae:	2601      	movs	r6, #1
 80022b0:	e02e      	b.n	8002310 <HAL_SPI_TransmitReceive+0x13c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	6851      	ldr	r1, [r2, #4]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	015b      	lsls	r3, r3, #5
 80022ba:	430b      	orrs	r3, r1
 80022bc:	6053      	str	r3, [r2, #4]
 80022be:	e7d9      	b.n	8002274 <HAL_SPI_TransmitReceive+0xa0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022c8:	3302      	adds	r3, #2
 80022ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80022cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80022d4:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	07d2      	lsls	r2, r2, #31
 80022dc:	d510      	bpl.n	8002300 <HAL_SPI_TransmitReceive+0x12c>
 80022de:	2246      	movs	r2, #70	; 0x46
 80022e0:	5aa2      	ldrh	r2, [r4, r2]
 80022e2:	b292      	uxth	r2, r2
 80022e4:	2a00      	cmp	r2, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022ec:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f0:	3302      	adds	r3, #2
 80022f2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80022f4:	2246      	movs	r2, #70	; 0x46
 80022f6:	5aa3      	ldrh	r3, [r4, r2]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80022fe:	2601      	movs	r6, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002300:	f7fe fcaa 	bl	8000c58 <HAL_GetTick>
 8002304:	1bc0      	subs	r0, r0, r7
 8002306:	42a8      	cmp	r0, r5
 8002308:	d302      	bcc.n	8002310 <HAL_SPI_TransmitReceive+0x13c>
 800230a:	1c6b      	adds	r3, r5, #1
 800230c:	d000      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x13c>
 800230e:	e0bf      	b.n	8002490 <HAL_SPI_TransmitReceive+0x2bc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002310:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_SPI_TransmitReceive+0x150>
 8002318:	3346      	adds	r3, #70	; 0x46
 800231a:	5ae3      	ldrh	r3, [r4, r3]
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d100      	bne.n	8002324 <HAL_SPI_TransmitReceive+0x150>
 8002322:	e097      	b.n	8002454 <HAL_SPI_TransmitReceive+0x280>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	0792      	lsls	r2, r2, #30
 800232a:	d5d4      	bpl.n	80022d6 <HAL_SPI_TransmitReceive+0x102>
 800232c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800232e:	b292      	uxth	r2, r2
 8002330:	2a00      	cmp	r2, #0
 8002332:	d0d0      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x102>
 8002334:	2e01      	cmp	r6, #1
 8002336:	d1ce      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x102>
 8002338:	e7c2      	b.n	80022c0 <HAL_SPI_TransmitReceive+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800233a:	6863      	ldr	r3, [r4, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_SPI_TransmitReceive+0x170>
 8002340:	2e01      	cmp	r6, #1
 8002342:	d10e      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x18e>
      if (hspi->TxXferCount > 1U)
 8002344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d90c      	bls.n	8002366 <HAL_SPI_TransmitReceive+0x192>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002356:	3302      	adds	r3, #2
 8002358:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800235a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800235c:	3b02      	subs	r3, #2
 800235e:	b29b      	uxth	r3, r3
 8002360:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002362:	2601      	movs	r6, #1
 8002364:	e044      	b.n	80023f0 <HAL_SPI_TransmitReceive+0x21c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800236e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002370:	3301      	adds	r3, #1
 8002372:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002374:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002376:	3b01      	subs	r3, #1
 8002378:	b29b      	uxth	r3, r3
 800237a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800237c:	e7f1      	b.n	8002362 <HAL_SPI_TransmitReceive+0x18e>
        if (hspi->TxXferCount > 1U)
 800237e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002380:	b292      	uxth	r2, r2
 8002382:	2a01      	cmp	r2, #1
 8002384:	d90b      	bls.n	800239e <HAL_SPI_TransmitReceive+0x1ca>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002386:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002388:	8812      	ldrh	r2, [r2, #0]
 800238a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800238c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800238e:	3302      	adds	r3, #2
 8002390:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002392:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002394:	3b02      	subs	r3, #2
 8002396:	b29b      	uxth	r3, r3
 8002398:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800239a:	2600      	movs	r6, #0
 800239c:	e03b      	b.n	8002416 <HAL_SPI_TransmitReceive+0x242>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800239e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80023a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023a6:	3301      	adds	r3, #1
 80023a8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80023aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80023b2:	2600      	movs	r6, #0
 80023b4:	e02f      	b.n	8002416 <HAL_SPI_TransmitReceive+0x242>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	6851      	ldr	r1, [r2, #4]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	015b      	lsls	r3, r3, #5
 80023be:	430b      	orrs	r3, r1
 80023c0:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80023c2:	2601      	movs	r6, #1
 80023c4:	e00b      	b.n	80023de <HAL_SPI_TransmitReceive+0x20a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023c6:	7b1b      	ldrb	r3, [r3, #12]
 80023c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023ca:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80023cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ce:	3301      	adds	r3, #1
 80023d0:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80023d2:	2246      	movs	r2, #70	; 0x46
 80023d4:	5aa3      	ldrh	r3, [r4, r2]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80023dc:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023de:	f7fe fc3b 	bl	8000c58 <HAL_GetTick>
 80023e2:	1bc0      	subs	r0, r0, r7
 80023e4:	42a8      	cmp	r0, r5
 80023e6:	d301      	bcc.n	80023ec <HAL_SPI_TransmitReceive+0x218>
 80023e8:	1c6b      	adds	r3, r5, #1
 80023ea:	d153      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x2c0>
 80023ec:	2d00      	cmp	r5, #0
 80023ee:	d053      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x2c4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x22e>
 80023f8:	3346      	adds	r3, #70	; 0x46
 80023fa:	5ae3      	ldrh	r3, [r4, r3]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_SPI_TransmitReceive+0x280>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	0792      	lsls	r2, r2, #30
 8002408:	d505      	bpl.n	8002416 <HAL_SPI_TransmitReceive+0x242>
 800240a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800240c:	b292      	uxth	r2, r2
 800240e:	2a00      	cmp	r2, #0
 8002410:	d001      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x242>
 8002412:	2e01      	cmp	r6, #1
 8002414:	d0b3      	beq.n	800237e <HAL_SPI_TransmitReceive+0x1aa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	07d2      	lsls	r2, r2, #31
 800241c:	d5df      	bpl.n	80023de <HAL_SPI_TransmitReceive+0x20a>
 800241e:	2246      	movs	r2, #70	; 0x46
 8002420:	5aa2      	ldrh	r2, [r4, r2]
 8002422:	b292      	uxth	r2, r2
 8002424:	2a00      	cmp	r2, #0
 8002426:	d0da      	beq.n	80023de <HAL_SPI_TransmitReceive+0x20a>
        if (hspi->RxXferCount > 1U)
 8002428:	2246      	movs	r2, #70	; 0x46
 800242a:	5aa2      	ldrh	r2, [r4, r2]
 800242c:	b292      	uxth	r2, r2
 800242e:	2a01      	cmp	r2, #1
 8002430:	d9c9      	bls.n	80023c6 <HAL_SPI_TransmitReceive+0x1f2>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002436:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800243a:	3302      	adds	r3, #2
 800243c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800243e:	2246      	movs	r2, #70	; 0x46
 8002440:	5aa3      	ldrh	r3, [r4, r2]
 8002442:	3b02      	subs	r3, #2
 8002444:	b29b      	uxth	r3, r3
 8002446:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 8002448:	5aa3      	ldrh	r3, [r4, r2]
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d9b2      	bls.n	80023b6 <HAL_SPI_TransmitReceive+0x1e2>
        txallowed = 1U;
 8002450:	2601      	movs	r6, #1
 8002452:	e7c4      	b.n	80023de <HAL_SPI_TransmitReceive+0x20a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002454:	003a      	movs	r2, r7
 8002456:	0029      	movs	r1, r5
 8002458:	0020      	movs	r0, r4
 800245a:	f7ff fe05 	bl	8002068 <SPI_EndRxTxTransaction>
 800245e:	2800      	cmp	r0, #0
 8002460:	d004      	beq.n	800246c <HAL_SPI_TransmitReceive+0x298>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002462:	2320      	movs	r3, #32
 8002464:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002466:	2001      	movs	r0, #1
 8002468:	e000      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_BUSY;
 800246a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800246c:	235d      	movs	r3, #93	; 0x5d
 800246e:	2201      	movs	r2, #1
 8002470:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002472:	3b01      	subs	r3, #1
 8002474:	2200      	movs	r2, #0
 8002476:	54e2      	strb	r2, [r4, r3]
}
 8002478:	b003      	add	sp, #12
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 800247c:	2002      	movs	r0, #2
 800247e:	e7f5      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
 8002480:	2002      	movs	r0, #2
 8002482:	e7f3      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
 8002484:	2001      	movs	r0, #1
 8002486:	e7f1      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
 8002488:	2001      	movs	r0, #1
 800248a:	e7ef      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
 800248c:	2001      	movs	r0, #1
 800248e:	e7ed      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
        errorcode = HAL_TIMEOUT;
 8002490:	2003      	movs	r0, #3
 8002492:	e7eb      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
        errorcode = HAL_TIMEOUT;
 8002494:	2003      	movs	r0, #3
 8002496:	e7e9      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
 8002498:	2003      	movs	r0, #3
 800249a:	e7e7      	b.n	800246c <HAL_SPI_TransmitReceive+0x298>
  __HAL_LOCK(hspi);
 800249c:	2002      	movs	r0, #2
 800249e:	e7eb      	b.n	8002478 <HAL_SPI_TransmitReceive+0x2a4>
 80024a0:	ffffefff 	.word	0xffffefff

080024a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a4:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a6:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024aa:	2201      	movs	r2, #1
 80024ac:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80024b0:	6801      	ldr	r1, [r0, #0]
 80024b2:	680b      	ldr	r3, [r1, #0]
 80024b4:	4d12      	ldr	r5, [pc, #72]	; (8002500 <UART_EndRxTransfer+0x5c>)
 80024b6:	402b      	ands	r3, r5
 80024b8:	600b      	str	r3, [r1, #0]
 80024ba:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80024c6:	6802      	ldr	r2, [r0, #0]
 80024c8:	6893      	ldr	r3, [r2, #8]
 80024ca:	4c0e      	ldr	r4, [pc, #56]	; (8002504 <UART_EndRxTransfer+0x60>)
 80024cc:	4023      	ands	r3, r4
 80024ce:	6093      	str	r3, [r2, #8]
 80024d0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d006      	beq.n	80024e8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024da:	2388      	movs	r3, #136	; 0x88
 80024dc:	2220      	movs	r2, #32
 80024de:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e0:	2300      	movs	r3, #0
 80024e2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024e4:	6703      	str	r3, [r0, #112]	; 0x70
}
 80024e6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ec:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f0:	6802      	ldr	r2, [r0, #0]
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	2410      	movs	r4, #16
 80024f6:	43a3      	bics	r3, r4
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	f381 8810 	msr	PRIMASK, r1
}
 80024fe:	e7ec      	b.n	80024da <UART_EndRxTransfer+0x36>
 8002500:	fffffedf 	.word	0xfffffedf
 8002504:	effffffe 	.word	0xeffffffe

08002508 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002508:	b510      	push	{r4, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800250a:	2384      	movs	r3, #132	; 0x84
 800250c:	58c3      	ldr	r3, [r0, r3]
 800250e:	2b21      	cmp	r3, #33	; 0x21
 8002510:	d000      	beq.n	8002514 <UART_TxISR_8BIT+0xc>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002512:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002514:	3335      	adds	r3, #53	; 0x35
 8002516:	5ac3      	ldrh	r3, [r0, r3]
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d117      	bne.n	800254e <UART_TxISR_8BIT+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002522:	2201      	movs	r2, #1
 8002524:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002528:	6801      	ldr	r1, [r0, #0]
 800252a:	680b      	ldr	r3, [r1, #0]
 800252c:	2480      	movs	r4, #128	; 0x80
 800252e:	43a3      	bics	r3, r4
 8002530:	600b      	str	r3, [r1, #0]
 8002532:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002536:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800253e:	6802      	ldr	r2, [r0, #0]
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	2040      	movs	r0, #64	; 0x40
 8002544:	4303      	orrs	r3, r0
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	f381 8810 	msr	PRIMASK, r1
}
 800254c:	e7e1      	b.n	8002512 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800254e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002556:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002558:	3301      	adds	r3, #1
 800255a:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800255c:	2256      	movs	r2, #86	; 0x56
 800255e:	5a83      	ldrh	r3, [r0, r2]
 8002560:	3b01      	subs	r3, #1
 8002562:	b29b      	uxth	r3, r3
 8002564:	5283      	strh	r3, [r0, r2]
}
 8002566:	e7d4      	b.n	8002512 <UART_TxISR_8BIT+0xa>

08002568 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002568:	b510      	push	{r4, lr}
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800256a:	2384      	movs	r3, #132	; 0x84
 800256c:	58c3      	ldr	r3, [r0, r3]
 800256e:	2b21      	cmp	r3, #33	; 0x21
 8002570:	d000      	beq.n	8002574 <UART_TxISR_16BIT+0xc>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002572:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002574:	3335      	adds	r3, #53	; 0x35
 8002576:	5ac3      	ldrh	r3, [r0, r3]
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d117      	bne.n	80025ae <UART_TxISR_16BIT+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002582:	2201      	movs	r2, #1
 8002584:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002588:	6801      	ldr	r1, [r0, #0]
 800258a:	680b      	ldr	r3, [r1, #0]
 800258c:	2480      	movs	r4, #128	; 0x80
 800258e:	43a3      	bics	r3, r4
 8002590:	600b      	str	r3, [r1, #0]
 8002592:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002596:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800259e:	6802      	ldr	r2, [r0, #0]
 80025a0:	6813      	ldr	r3, [r2, #0]
 80025a2:	2040      	movs	r0, #64	; 0x40
 80025a4:	4303      	orrs	r3, r0
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	f381 8810 	msr	PRIMASK, r1
}
 80025ac:	e7e1      	b.n	8002572 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80025ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	6802      	ldr	r2, [r0, #0]
 80025b4:	05db      	lsls	r3, r3, #23
 80025b6:	0ddb      	lsrs	r3, r3, #23
 80025b8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80025ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80025bc:	3302      	adds	r3, #2
 80025be:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80025c0:	2256      	movs	r2, #86	; 0x56
 80025c2:	5a83      	ldrh	r3, [r0, r2]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	5283      	strh	r3, [r0, r2]
}
 80025ca:	e7d2      	b.n	8002572 <UART_TxISR_16BIT+0xa>

080025cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80025cc:	b510      	push	{r4, lr}
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ce:	2384      	movs	r3, #132	; 0x84
 80025d0:	58c3      	ldr	r3, [r0, r3]
 80025d2:	2b21      	cmp	r3, #33	; 0x21
 80025d4:	d000      	beq.n	80025d8 <UART_TxISR_8BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 80025d6:	bd10      	pop	{r4, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80025d8:	3349      	adds	r3, #73	; 0x49
 80025da:	5ac3      	ldrh	r3, [r0, r3]
 80025dc:	e019      	b.n	8002612 <UART_TxISR_8BIT_FIFOEN+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025de:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e2:	3201      	adds	r2, #1
 80025e4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80025e8:	6801      	ldr	r1, [r0, #0]
 80025ea:	688b      	ldr	r3, [r1, #8]
 80025ec:	4c14      	ldr	r4, [pc, #80]	; (8002640 <UART_TxISR_8BIT_FIFOEN+0x74>)
 80025ee:	4023      	ands	r3, r4
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025fe:	6802      	ldr	r2, [r0, #0]
 8002600:	6813      	ldr	r3, [r2, #0]
 8002602:	2040      	movs	r0, #64	; 0x40
 8002604:	4303      	orrs	r3, r0
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	f381 8810 	msr	PRIMASK, r1
}
 800260c:	e7e3      	b.n	80025d6 <UART_TxISR_8BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800260e:	3b01      	subs	r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0df      	beq.n	80025d6 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8002616:	2256      	movs	r2, #86	; 0x56
 8002618:	5a82      	ldrh	r2, [r0, r2]
 800261a:	b292      	uxth	r2, r2
 800261c:	2a00      	cmp	r2, #0
 800261e:	d0de      	beq.n	80025de <UART_TxISR_8BIT_FIFOEN+0x12>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	69d1      	ldr	r1, [r2, #28]
 8002624:	0609      	lsls	r1, r1, #24
 8002626:	d5f2      	bpl.n	800260e <UART_TxISR_8BIT_FIFOEN+0x42>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002628:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800262a:	7809      	ldrb	r1, [r1, #0]
 800262c:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 800262e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002630:	3201      	adds	r2, #1
 8002632:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002634:	2156      	movs	r1, #86	; 0x56
 8002636:	5a42      	ldrh	r2, [r0, r1]
 8002638:	3a01      	subs	r2, #1
 800263a:	b292      	uxth	r2, r2
 800263c:	5242      	strh	r2, [r0, r1]
 800263e:	e7e6      	b.n	800260e <UART_TxISR_8BIT_FIFOEN+0x42>
 8002640:	ff7fffff 	.word	0xff7fffff

08002644 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002644:	b510      	push	{r4, lr}
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002646:	2384      	movs	r3, #132	; 0x84
 8002648:	58c3      	ldr	r3, [r0, r3]
 800264a:	2b21      	cmp	r3, #33	; 0x21
 800264c:	d000      	beq.n	8002650 <UART_TxISR_16BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 800264e:	bd10      	pop	{r4, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002650:	3349      	adds	r3, #73	; 0x49
 8002652:	5ac3      	ldrh	r3, [r0, r3]
 8002654:	e019      	b.n	800268a <UART_TxISR_16BIT_FIFOEN+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002656:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	3201      	adds	r2, #1
 800265c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002660:	6801      	ldr	r1, [r0, #0]
 8002662:	688b      	ldr	r3, [r1, #8]
 8002664:	4c15      	ldr	r4, [pc, #84]	; (80026bc <UART_TxISR_16BIT_FIFOEN+0x78>)
 8002666:	4023      	ands	r3, r4
 8002668:	608b      	str	r3, [r1, #8]
 800266a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002672:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002676:	6802      	ldr	r2, [r0, #0]
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	2040      	movs	r0, #64	; 0x40
 800267c:	4303      	orrs	r3, r0
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	f381 8810 	msr	PRIMASK, r1
}
 8002684:	e7e3      	b.n	800264e <UART_TxISR_16BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002686:	3b01      	subs	r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0df      	beq.n	800264e <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 800268e:	2256      	movs	r2, #86	; 0x56
 8002690:	5a82      	ldrh	r2, [r0, r2]
 8002692:	b292      	uxth	r2, r2
 8002694:	2a00      	cmp	r2, #0
 8002696:	d0de      	beq.n	8002656 <UART_TxISR_16BIT_FIFOEN+0x12>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002698:	6801      	ldr	r1, [r0, #0]
 800269a:	69ca      	ldr	r2, [r1, #28]
 800269c:	0612      	lsls	r2, r2, #24
 800269e:	d5f2      	bpl.n	8002686 <UART_TxISR_16BIT_FIFOEN+0x42>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80026a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	05d2      	lsls	r2, r2, #23
 80026a6:	0dd2      	lsrs	r2, r2, #23
 80026a8:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80026aa:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80026ac:	3202      	adds	r2, #2
 80026ae:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80026b0:	2156      	movs	r1, #86	; 0x56
 80026b2:	5a42      	ldrh	r2, [r0, r1]
 80026b4:	3a01      	subs	r2, #1
 80026b6:	b292      	uxth	r2, r2
 80026b8:	5242      	strh	r2, [r0, r1]
 80026ba:	e7e4      	b.n	8002686 <UART_TxISR_16BIT_FIFOEN+0x42>
 80026bc:	ff7fffff 	.word	0xff7fffff

080026c0 <HAL_UART_Transmit_IT>:
{
 80026c0:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80026c2:	2384      	movs	r3, #132	; 0x84
 80026c4:	58c3      	ldr	r3, [r0, r3]
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d160      	bne.n	800278c <HAL_UART_Transmit_IT+0xcc>
    if ((pData == NULL) || (Size == 0U))
 80026ca:	2900      	cmp	r1, #0
 80026cc:	d060      	beq.n	8002790 <HAL_UART_Transmit_IT+0xd0>
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	d060      	beq.n	8002794 <HAL_UART_Transmit_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d2:	6883      	ldr	r3, [r0, #8]
 80026d4:	2480      	movs	r4, #128	; 0x80
 80026d6:	0164      	lsls	r4, r4, #5
 80026d8:	42a3      	cmp	r3, r4
 80026da:	d02d      	beq.n	8002738 <HAL_UART_Transmit_IT+0x78>
    __HAL_LOCK(huart);
 80026dc:	2480      	movs	r4, #128	; 0x80
 80026de:	5d04      	ldrb	r4, [r0, r4]
 80026e0:	2c01      	cmp	r4, #1
 80026e2:	d059      	beq.n	8002798 <HAL_UART_Transmit_IT+0xd8>
 80026e4:	2480      	movs	r4, #128	; 0x80
 80026e6:	2501      	movs	r5, #1
 80026e8:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 80026ea:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80026ec:	2154      	movs	r1, #84	; 0x54
 80026ee:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 80026f0:	3102      	adds	r1, #2
 80026f2:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 80026f4:	2200      	movs	r2, #0
 80026f6:	6742      	str	r2, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	3136      	adds	r1, #54	; 0x36
 80026fa:	5042      	str	r2, [r0, r1]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026fc:	3284      	adds	r2, #132	; 0x84
 80026fe:	396b      	subs	r1, #107	; 0x6b
 8002700:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	0592      	lsls	r2, r2, #22
 8002706:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002708:	4291      	cmp	r1, r2
 800270a:	d01c      	beq.n	8002746 <HAL_UART_Transmit_IT+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	0152      	lsls	r2, r2, #5
 8002710:	4293      	cmp	r3, r2
 8002712:	d035      	beq.n	8002780 <HAL_UART_Transmit_IT+0xc0>
        huart->TxISR = UART_TxISR_8BIT;
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_UART_Transmit_IT+0xdc>)
 8002716:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	2300      	movs	r3, #0
 800271c:	5443      	strb	r3, [r0, r1]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	3301      	adds	r3, #1
 8002724:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002728:	6802      	ldr	r2, [r0, #0]
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	f384 8810 	msr	PRIMASK, r4
    return HAL_OK;
 8002734:	2000      	movs	r0, #0
 8002736:	e02a      	b.n	800278e <HAL_UART_Transmit_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	6904      	ldr	r4, [r0, #16]
 800273a:	2c00      	cmp	r4, #0
 800273c:	d1ce      	bne.n	80026dc <HAL_UART_Transmit_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800273e:	07cc      	lsls	r4, r1, #31
 8002740:	d5cc      	bpl.n	80026dc <HAL_UART_Transmit_IT+0x1c>
        return  HAL_ERROR;
 8002742:	2001      	movs	r0, #1
 8002744:	e023      	b.n	800278e <HAL_UART_Transmit_IT+0xce>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	0152      	lsls	r2, r2, #5
 800274a:	4293      	cmp	r3, r2
 800274c:	d012      	beq.n	8002774 <HAL_UART_Transmit_IT+0xb4>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_UART_Transmit_IT+0xe0>)
 8002750:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	2200      	movs	r2, #0
 8002756:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002758:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275c:	3b7f      	subs	r3, #127	; 0x7f
 800275e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002762:	6802      	ldr	r2, [r0, #0]
 8002764:	6890      	ldr	r0, [r2, #8]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	4303      	orrs	r3, r0
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	f381 8810 	msr	PRIMASK, r1
}
 8002772:	e7df      	b.n	8002734 <HAL_UART_Transmit_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	6903      	ldr	r3, [r0, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e9      	bne.n	800274e <HAL_UART_Transmit_IT+0x8e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_UART_Transmit_IT+0xe4>)
 800277c:	6743      	str	r3, [r0, #116]	; 0x74
 800277e:	e7e8      	b.n	8002752 <HAL_UART_Transmit_IT+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	6903      	ldr	r3, [r0, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1c6      	bne.n	8002714 <HAL_UART_Transmit_IT+0x54>
        huart->TxISR = UART_TxISR_16BIT;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_UART_Transmit_IT+0xe8>)
 8002788:	6743      	str	r3, [r0, #116]	; 0x74
 800278a:	e7c5      	b.n	8002718 <HAL_UART_Transmit_IT+0x58>
    return HAL_BUSY;
 800278c:	2002      	movs	r0, #2
}
 800278e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002790:	2001      	movs	r0, #1
 8002792:	e7fc      	b.n	800278e <HAL_UART_Transmit_IT+0xce>
 8002794:	2001      	movs	r0, #1
 8002796:	e7fa      	b.n	800278e <HAL_UART_Transmit_IT+0xce>
    __HAL_LOCK(huart);
 8002798:	2002      	movs	r0, #2
 800279a:	e7f8      	b.n	800278e <HAL_UART_Transmit_IT+0xce>
 800279c:	08002509 	.word	0x08002509
 80027a0:	080025cd 	.word	0x080025cd
 80027a4:	08002645 	.word	0x08002645
 80027a8:	08002569 	.word	0x08002569

080027ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027ac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b2:	2301      	movs	r3, #1
 80027b4:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027b8:	6802      	ldr	r2, [r0, #0]
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	2440      	movs	r4, #64	; 0x40
 80027be:	43a3      	bics	r3, r4
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027c6:	2384      	movs	r3, #132	; 0x84
 80027c8:	2220      	movs	r2, #32
 80027ca:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027d0:	f7fe f820 	bl	8000814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d4:	bd10      	pop	{r4, pc}

080027d6 <HAL_UART_ErrorCallback>:
}
 80027d6:	4770      	bx	lr

080027d8 <UART_DMAAbortOnError>:
{
 80027d8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027da:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	225e      	movs	r2, #94	; 0x5e
 80027e0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80027e2:	3a08      	subs	r2, #8
 80027e4:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 80027e6:	f7ff fff6 	bl	80027d6 <HAL_UART_ErrorCallback>
}
 80027ea:	bd10      	pop	{r4, pc}

080027ec <HAL_UARTEx_RxEventCallback>:
}
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_UART_IRQHandler>:
{
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027f4:	6802      	ldr	r2, [r0, #0]
 80027f6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027f8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027fa:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027fc:	49b9      	ldr	r1, [pc, #740]	; (8002ae4 <HAL_UART_IRQHandler+0x2f4>)
 80027fe:	001e      	movs	r6, r3
 8002800:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8002802:	420b      	tst	r3, r1
 8002804:	d105      	bne.n	8002812 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002806:	0699      	lsls	r1, r3, #26
 8002808:	d503      	bpl.n	8002812 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800280a:	0681      	lsls	r1, r0, #26
 800280c:	d42c      	bmi.n	8002868 <HAL_UART_IRQHandler+0x78>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800280e:	00e9      	lsls	r1, r5, #3
 8002810:	d42a      	bmi.n	8002868 <HAL_UART_IRQHandler+0x78>
  if ((errorflags != 0U)
 8002812:	2e00      	cmp	r6, #0
 8002814:	d007      	beq.n	8002826 <HAL_UART_IRQHandler+0x36>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002816:	49b4      	ldr	r1, [pc, #720]	; (8002ae8 <HAL_UART_IRQHandler+0x2f8>)
 8002818:	002e      	movs	r6, r5
 800281a:	400e      	ands	r6, r1
 800281c:	420d      	tst	r5, r1
 800281e:	d129      	bne.n	8002874 <HAL_UART_IRQHandler+0x84>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002820:	49b2      	ldr	r1, [pc, #712]	; (8002aec <HAL_UART_IRQHandler+0x2fc>)
 8002822:	4208      	tst	r0, r1
 8002824:	d126      	bne.n	8002874 <HAL_UART_IRQHandler+0x84>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002826:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002828:	2901      	cmp	r1, #1
 800282a:	d100      	bne.n	800282e <HAL_UART_IRQHandler+0x3e>
 800282c:	e0a7      	b.n	800297e <HAL_UART_IRQHandler+0x18e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800282e:	02d9      	lsls	r1, r3, #11
 8002830:	d502      	bpl.n	8002838 <HAL_UART_IRQHandler+0x48>
 8002832:	0269      	lsls	r1, r5, #9
 8002834:	d500      	bpl.n	8002838 <HAL_UART_IRQHandler+0x48>
 8002836:	e13a      	b.n	8002aae <HAL_UART_IRQHandler+0x2be>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002838:	061a      	lsls	r2, r3, #24
 800283a:	d505      	bpl.n	8002848 <HAL_UART_IRQHandler+0x58>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800283c:	0602      	lsls	r2, r0, #24
 800283e:	d500      	bpl.n	8002842 <HAL_UART_IRQHandler+0x52>
 8002840:	e13c      	b.n	8002abc <HAL_UART_IRQHandler+0x2cc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002842:	022a      	lsls	r2, r5, #8
 8002844:	d500      	bpl.n	8002848 <HAL_UART_IRQHandler+0x58>
 8002846:	e139      	b.n	8002abc <HAL_UART_IRQHandler+0x2cc>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002848:	065a      	lsls	r2, r3, #25
 800284a:	d502      	bpl.n	8002852 <HAL_UART_IRQHandler+0x62>
 800284c:	0642      	lsls	r2, r0, #25
 800284e:	d500      	bpl.n	8002852 <HAL_UART_IRQHandler+0x62>
 8002850:	e13b      	b.n	8002aca <HAL_UART_IRQHandler+0x2da>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	d502      	bpl.n	800285c <HAL_UART_IRQHandler+0x6c>
 8002856:	0042      	lsls	r2, r0, #1
 8002858:	d500      	bpl.n	800285c <HAL_UART_IRQHandler+0x6c>
 800285a:	e13a      	b.n	8002ad2 <HAL_UART_IRQHandler+0x2e2>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800285c:	01db      	lsls	r3, r3, #7
 800285e:	d502      	bpl.n	8002866 <HAL_UART_IRQHandler+0x76>
 8002860:	2800      	cmp	r0, #0
 8002862:	da00      	bge.n	8002866 <HAL_UART_IRQHandler+0x76>
 8002864:	e139      	b.n	8002ada <HAL_UART_IRQHandler+0x2ea>
}
 8002866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (huart->RxISR != NULL)
 8002868:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0fb      	beq.n	8002866 <HAL_UART_IRQHandler+0x76>
        huart->RxISR(huart);
 800286e:	0020      	movs	r0, r4
 8002870:	4798      	blx	r3
      return;
 8002872:	e7f8      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002874:	07d9      	lsls	r1, r3, #31
 8002876:	d507      	bpl.n	8002888 <HAL_UART_IRQHandler+0x98>
 8002878:	05c1      	lsls	r1, r0, #23
 800287a:	d505      	bpl.n	8002888 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800287c:	2701      	movs	r7, #1
 800287e:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002880:	218c      	movs	r1, #140	; 0x8c
 8002882:	5862      	ldr	r2, [r4, r1]
 8002884:	433a      	orrs	r2, r7
 8002886:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002888:	079a      	lsls	r2, r3, #30
 800288a:	d509      	bpl.n	80028a0 <HAL_UART_IRQHandler+0xb0>
 800288c:	07ea      	lsls	r2, r5, #31
 800288e:	d507      	bpl.n	80028a0 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	2102      	movs	r1, #2
 8002894:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002896:	318a      	adds	r1, #138	; 0x8a
 8002898:	5862      	ldr	r2, [r4, r1]
 800289a:	2704      	movs	r7, #4
 800289c:	433a      	orrs	r2, r7
 800289e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028a0:	075a      	lsls	r2, r3, #29
 80028a2:	d509      	bpl.n	80028b8 <HAL_UART_IRQHandler+0xc8>
 80028a4:	07ea      	lsls	r2, r5, #31
 80028a6:	d507      	bpl.n	80028b8 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028a8:	6822      	ldr	r2, [r4, #0]
 80028aa:	2104      	movs	r1, #4
 80028ac:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ae:	3188      	adds	r1, #136	; 0x88
 80028b0:	5862      	ldr	r2, [r4, r1]
 80028b2:	2702      	movs	r7, #2
 80028b4:	433a      	orrs	r2, r7
 80028b6:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028b8:	071a      	lsls	r2, r3, #28
 80028ba:	d50a      	bpl.n	80028d2 <HAL_UART_IRQHandler+0xe2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028bc:	0682      	lsls	r2, r0, #26
 80028be:	d401      	bmi.n	80028c4 <HAL_UART_IRQHandler+0xd4>
 80028c0:	2e00      	cmp	r6, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028c4:	6822      	ldr	r2, [r4, #0]
 80028c6:	2608      	movs	r6, #8
 80028c8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ca:	218c      	movs	r1, #140	; 0x8c
 80028cc:	5862      	ldr	r2, [r4, r1]
 80028ce:	4332      	orrs	r2, r6
 80028d0:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028d2:	051a      	lsls	r2, r3, #20
 80028d4:	d50a      	bpl.n	80028ec <HAL_UART_IRQHandler+0xfc>
 80028d6:	0142      	lsls	r2, r0, #5
 80028d8:	d508      	bpl.n	80028ec <HAL_UART_IRQHandler+0xfc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	0109      	lsls	r1, r1, #4
 80028e0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028e2:	218c      	movs	r1, #140	; 0x8c
 80028e4:	5862      	ldr	r2, [r4, r1]
 80028e6:	2620      	movs	r6, #32
 80028e8:	4332      	orrs	r2, r6
 80028ea:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ec:	228c      	movs	r2, #140	; 0x8c
 80028ee:	58a2      	ldr	r2, [r4, r2]
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	d0b8      	beq.n	8002866 <HAL_UART_IRQHandler+0x76>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028f4:	069b      	lsls	r3, r3, #26
 80028f6:	d508      	bpl.n	800290a <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028f8:	0683      	lsls	r3, r0, #26
 80028fa:	d401      	bmi.n	8002900 <HAL_UART_IRQHandler+0x110>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028fc:	00eb      	lsls	r3, r5, #3
 80028fe:	d504      	bpl.n	800290a <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8002900:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 8002906:	0020      	movs	r0, r4
 8002908:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800290a:	238c      	movs	r3, #140	; 0x8c
 800290c:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	065b      	lsls	r3, r3, #25
 8002914:	d402      	bmi.n	800291c <HAL_UART_IRQHandler+0x12c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002916:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002918:	4213      	tst	r3, r2
 800291a:	d029      	beq.n	8002970 <HAL_UART_IRQHandler+0x180>
        UART_EndRxTransfer(huart);
 800291c:	0020      	movs	r0, r4
 800291e:	f7ff fdc1 	bl	80024a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	065b      	lsls	r3, r3, #25
 8002928:	d51e      	bpl.n	8002968 <HAL_UART_IRQHandler+0x178>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292e:	2301      	movs	r3, #1
 8002930:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	6893      	ldr	r3, [r2, #8]
 8002938:	2040      	movs	r0, #64	; 0x40
 800293a:	4383      	bics	r3, r0
 800293c:	6093      	str	r3, [r2, #8]
 800293e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002942:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_UART_IRQHandler+0x170>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002948:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <HAL_UART_IRQHandler+0x300>)
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800294c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800294e:	f7fe fa33 	bl	8000db8 <HAL_DMA_Abort_IT>
 8002952:	2800      	cmp	r0, #0
 8002954:	d100      	bne.n	8002958 <HAL_UART_IRQHandler+0x168>
 8002956:	e786      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002958:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800295a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800295c:	4798      	blx	r3
 800295e:	e782      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
            HAL_UART_ErrorCallback(huart);
 8002960:	0020      	movs	r0, r4
 8002962:	f7ff ff38 	bl	80027d6 <HAL_UART_ErrorCallback>
 8002966:	e77e      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
          HAL_UART_ErrorCallback(huart);
 8002968:	0020      	movs	r0, r4
 800296a:	f7ff ff34 	bl	80027d6 <HAL_UART_ErrorCallback>
 800296e:	e77a      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
        HAL_UART_ErrorCallback(huart);
 8002970:	0020      	movs	r0, r4
 8002972:	f7ff ff30 	bl	80027d6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	238c      	movs	r3, #140	; 0x8c
 8002978:	2200      	movs	r2, #0
 800297a:	50e2      	str	r2, [r4, r3]
    return;
 800297c:	e773      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800297e:	06d9      	lsls	r1, r3, #27
 8002980:	d400      	bmi.n	8002984 <HAL_UART_IRQHandler+0x194>
 8002982:	e754      	b.n	800282e <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002984:	06c1      	lsls	r1, r0, #27
 8002986:	d400      	bmi.n	800298a <HAL_UART_IRQHandler+0x19a>
 8002988:	e751      	b.n	800282e <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800298a:	2310      	movs	r3, #16
 800298c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	065b      	lsls	r3, r3, #25
 8002994:	d551      	bpl.n	8002a3a <HAL_UART_IRQHandler+0x24a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002996:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d100      	bne.n	80029a4 <HAL_UART_IRQHandler+0x1b4>
 80029a2:	e760      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a4:	215c      	movs	r1, #92	; 0x5c
 80029a6:	5a61      	ldrh	r1, [r4, r1]
 80029a8:	4299      	cmp	r1, r3
 80029aa:	d800      	bhi.n	80029ae <HAL_UART_IRQHandler+0x1be>
 80029ac:	e75b      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
        huart->RxXferCount = nb_remaining_rx_data;
 80029ae:	215e      	movs	r1, #94	; 0x5e
 80029b0:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029b2:	6813      	ldr	r3, [r2, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	d509      	bpl.n	80029ce <HAL_UART_IRQHandler+0x1de>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ba:	235c      	movs	r3, #92	; 0x5c
 80029bc:	5ae1      	ldrh	r1, [r4, r3]
 80029be:	3302      	adds	r3, #2
 80029c0:	5ae3      	ldrh	r3, [r4, r3]
 80029c2:	1ac9      	subs	r1, r1, r3
 80029c4:	b289      	uxth	r1, r1
 80029c6:	0020      	movs	r0, r4
 80029c8:	f7ff ff10 	bl	80027ec <HAL_UARTEx_RxEventCallback>
      return;
 80029cc:	e74b      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d2:	2301      	movs	r3, #1
 80029d4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029d8:	6821      	ldr	r1, [r4, #0]
 80029da:	680a      	ldr	r2, [r1, #0]
 80029dc:	4d45      	ldr	r5, [pc, #276]	; (8002af4 <HAL_UART_IRQHandler+0x304>)
 80029de:	402a      	ands	r2, r5
 80029e0:	600a      	str	r2, [r1, #0]
 80029e2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	6821      	ldr	r1, [r4, #0]
 80029f0:	688a      	ldr	r2, [r1, #8]
 80029f2:	439a      	bics	r2, r3
 80029f4:	608a      	str	r2, [r1, #8]
 80029f6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a02:	6821      	ldr	r1, [r4, #0]
 8002a04:	688a      	ldr	r2, [r1, #8]
 8002a06:	3542      	adds	r5, #66	; 0x42
 8002a08:	35ff      	adds	r5, #255	; 0xff
 8002a0a:	43aa      	bics	r2, r5
 8002a0c:	608a      	str	r2, [r1, #8]
 8002a0e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8002a12:	2288      	movs	r2, #136	; 0x88
 8002a14:	2120      	movs	r1, #32
 8002a16:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	2200      	movs	r2, #0
 8002a1a:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	2010      	movs	r0, #16
 8002a2a:	4383      	bics	r3, r0
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a32:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a34:	f7fe f980 	bl	8000d38 <HAL_DMA_Abort>
 8002a38:	e7bf      	b.n	80029ba <HAL_UART_IRQHandler+0x1ca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a3a:	235c      	movs	r3, #92	; 0x5c
 8002a3c:	5ae1      	ldrh	r1, [r4, r3]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	5ae2      	ldrh	r2, [r4, r3]
 8002a42:	1a89      	subs	r1, r1, r2
 8002a44:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002a46:	5ae3      	ldrh	r3, [r4, r3]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_UART_IRQHandler+0x260>
 8002a4e:	e70a      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
          && (nb_rx_data > 0U))
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d100      	bne.n	8002a56 <HAL_UART_IRQHandler+0x266>
 8002a54:	e707      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a56:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	6802      	ldr	r2, [r0, #0]
 8002a64:	4e24      	ldr	r6, [pc, #144]	; (8002af8 <HAL_UART_IRQHandler+0x308>)
 8002a66:	4032      	ands	r2, r6
 8002a68:	6002      	str	r2, [r0, #0]
 8002a6a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	6882      	ldr	r2, [r0, #8]
 8002a7a:	4e20      	ldr	r6, [pc, #128]	; (8002afc <HAL_UART_IRQHandler+0x30c>)
 8002a7c:	4032      	ands	r2, r6
 8002a7e:	6082      	str	r2, [r0, #8]
 8002a80:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8002a84:	2288      	movs	r2, #136	; 0x88
 8002a86:	2020      	movs	r0, #32
 8002a88:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002a8e:	6722      	str	r2, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a90:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a94:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	6813      	ldr	r3, [r2, #0]
 8002a9c:	2510      	movs	r5, #16
 8002a9e:	43ab      	bics	r3, r5
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aa6:	0020      	movs	r0, r4
 8002aa8:	f7ff fea0 	bl	80027ec <HAL_UARTEx_RxEventCallback>
      return;
 8002aac:	e6db      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	035b      	lsls	r3, r3, #13
 8002ab2:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002ab4:	0020      	movs	r0, r4
 8002ab6:	f000 fb33 	bl	8003120 <HAL_UARTEx_WakeupCallback>
    return;
 8002aba:	e6d4      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
    if (huart->TxISR != NULL)
 8002abc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d100      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x2d4>
 8002ac2:	e6d0      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
      huart->TxISR(huart);
 8002ac4:	0020      	movs	r0, r4
 8002ac6:	4798      	blx	r3
    return;
 8002ac8:	e6cd      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
    UART_EndTransmit_IT(huart);
 8002aca:	0020      	movs	r0, r4
 8002acc:	f7ff fe6e 	bl	80027ac <UART_EndTransmit_IT>
    return;
 8002ad0:	e6c9      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ad2:	0020      	movs	r0, r4
 8002ad4:	f000 fb26 	bl	8003124 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002ad8:	e6c5      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ada:	0020      	movs	r0, r4
 8002adc:	f000 fb21 	bl	8003122 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002ae0:	e6c1      	b.n	8002866 <HAL_UART_IRQHandler+0x76>
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	0000080f 	.word	0x0000080f
 8002ae8:	10000001 	.word	0x10000001
 8002aec:	04000120 	.word	0x04000120
 8002af0:	080027d9 	.word	0x080027d9
 8002af4:	fffffeff 	.word	0xfffffeff
 8002af8:	fffffedf 	.word	0xfffffedf
 8002afc:	effffffe 	.word	0xeffffffe

08002b00 <UART_SetConfig>:
{
 8002b00:	b510      	push	{r4, lr}
 8002b02:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b04:	6883      	ldr	r3, [r0, #8]
 8002b06:	6902      	ldr	r2, [r0, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	6942      	ldr	r2, [r0, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	69c2      	ldr	r2, [r0, #28]
 8002b10:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b12:	6801      	ldr	r1, [r0, #0]
 8002b14:	680a      	ldr	r2, [r1, #0]
 8002b16:	4863      	ldr	r0, [pc, #396]	; (8002ca4 <UART_SetConfig+0x1a4>)
 8002b18:	4002      	ands	r2, r0
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1e:	6822      	ldr	r2, [r4, #0]
 8002b20:	6853      	ldr	r3, [r2, #4]
 8002b22:	4961      	ldr	r1, [pc, #388]	; (8002ca8 <UART_SetConfig+0x1a8>)
 8002b24:	400b      	ands	r3, r1
 8002b26:	68e1      	ldr	r1, [r4, #12]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002b2c:	6a22      	ldr	r2, [r4, #32]
 8002b2e:	69a3      	ldr	r3, [r4, #24]
 8002b30:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b32:	6821      	ldr	r1, [r4, #0]
 8002b34:	688b      	ldr	r3, [r1, #8]
 8002b36:	485d      	ldr	r0, [pc, #372]	; (8002cac <UART_SetConfig+0x1ac>)
 8002b38:	4003      	ands	r3, r0
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b42:	210f      	movs	r1, #15
 8002b44:	438b      	bics	r3, r1
 8002b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <UART_SetConfig+0x1b0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d01b      	beq.n	8002b8c <UART_SetConfig+0x8c>
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <UART_SetConfig+0x1b4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d029      	beq.n	8002bae <UART_SetConfig+0xae>
 8002b5a:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5c:	69e0      	ldr	r0, [r4, #28]
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	0212      	lsls	r2, r2, #8
 8002b62:	4290      	cmp	r0, r2
 8002b64:	d02d      	beq.n	8002bc2 <UART_SetConfig+0xc2>
    switch (clocksource)
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d100      	bne.n	8002b6c <UART_SetConfig+0x6c>
 8002b6a:	e094      	b.n	8002c96 <UART_SetConfig+0x196>
 8002b6c:	d868      	bhi.n	8002c40 <UART_SetConfig+0x140>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d100      	bne.n	8002b74 <UART_SetConfig+0x74>
 8002b72:	e08a      	b.n	8002c8a <UART_SetConfig+0x18a>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d161      	bne.n	8002c3c <UART_SetConfig+0x13c>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002b78:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <UART_SetConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2107      	movs	r1, #7
 8002b80:	4019      	ands	r1, r3
 8002b82:	3101      	adds	r1, #1
 8002b84:	484d      	ldr	r0, [pc, #308]	; (8002cbc <UART_SetConfig+0x1bc>)
 8002b86:	f7fd fac9 	bl	800011c <__udivsi3>
        break;
 8002b8a:	e080      	b.n	8002c8e <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <UART_SetConfig+0x1b8>)
 8002b8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b90:	2303      	movs	r3, #3
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d00c      	beq.n	8002bb2 <UART_SetConfig+0xb2>
 8002b98:	d805      	bhi.n	8002ba6 <UART_SetConfig+0xa6>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <UART_SetConfig+0xb6>
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10b      	bne.n	8002bba <UART_SetConfig+0xba>
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	e7da      	b.n	8002b5c <UART_SetConfig+0x5c>
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d109      	bne.n	8002bbe <UART_SetConfig+0xbe>
 8002baa:	3305      	adds	r3, #5
 8002bac:	e7d6      	b.n	8002b5c <UART_SetConfig+0x5c>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e7d4      	b.n	8002b5c <UART_SetConfig+0x5c>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e7d2      	b.n	8002b5c <UART_SetConfig+0x5c>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e7d0      	b.n	8002b5c <UART_SetConfig+0x5c>
 8002bba:	2310      	movs	r3, #16
 8002bbc:	e7ce      	b.n	8002b5c <UART_SetConfig+0x5c>
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	e7cc      	b.n	8002b5c <UART_SetConfig+0x5c>
    switch (clocksource)
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d037      	beq.n	8002c36 <UART_SetConfig+0x136>
 8002bc6:	d80f      	bhi.n	8002be8 <UART_SetConfig+0xe8>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02e      	beq.n	8002c2a <UART_SetConfig+0x12a>
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d109      	bne.n	8002be4 <UART_SetConfig+0xe4>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <UART_SetConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	2107      	movs	r1, #7
 8002bd8:	4019      	ands	r1, r3
 8002bda:	3101      	adds	r1, #1
 8002bdc:	4837      	ldr	r0, [pc, #220]	; (8002cbc <UART_SetConfig+0x1bc>)
 8002bde:	f7fd fa9d 	bl	800011c <__udivsi3>
        break;
 8002be2:	e024      	b.n	8002c2e <UART_SetConfig+0x12e>
    switch (clocksource)
 8002be4:	2001      	movs	r0, #1
 8002be6:	e047      	b.n	8002c78 <UART_SetConfig+0x178>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d11c      	bne.n	8002c26 <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <UART_SetConfig+0x1c0>)
 8002bf2:	5a99      	ldrh	r1, [r3, r2]
 8002bf4:	f7fd fa92 	bl	800011c <__udivsi3>
 8002bf8:	0040      	lsls	r0, r0, #1
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	18c0      	adds	r0, r0, r3
 8002c00:	6861      	ldr	r1, [r4, #4]
 8002c02:	f7fd fa8b 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c06:	0002      	movs	r2, r0
 8002c08:	3a10      	subs	r2, #16
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <UART_SetConfig+0x1c4>)
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d845      	bhi.n	8002c9c <UART_SetConfig+0x19c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c10:	b282      	uxth	r2, r0
 8002c12:	230f      	movs	r3, #15
 8002c14:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c16:	0840      	lsrs	r0, r0, #1
 8002c18:	3b08      	subs	r3, #8
 8002c1a:	4018      	ands	r0, r3
 8002c1c:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	60d8      	str	r0, [r3, #12]
 8002c22:	2000      	movs	r0, #0
 8002c24:	e028      	b.n	8002c78 <UART_SetConfig+0x178>
    switch (clocksource)
 8002c26:	2001      	movs	r0, #1
 8002c28:	e026      	b.n	8002c78 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c2a:	f7ff f871 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d1dc      	bne.n	8002bec <UART_SetConfig+0xec>
 8002c32:	2000      	movs	r0, #0
 8002c34:	e020      	b.n	8002c78 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c36:	f7fe ff6d 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
        break;
 8002c3a:	e7f8      	b.n	8002c2e <UART_SetConfig+0x12e>
    switch (clocksource)
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e01b      	b.n	8002c78 <UART_SetConfig+0x178>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d118      	bne.n	8002c76 <UART_SetConfig+0x176>
 8002c44:	2080      	movs	r0, #128	; 0x80
 8002c46:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <UART_SetConfig+0x1c0>)
 8002c4e:	5a99      	ldrh	r1, [r3, r2]
 8002c50:	f7fd fa64 	bl	800011c <__udivsi3>
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	18c0      	adds	r0, r0, r3
 8002c5a:	6861      	ldr	r1, [r4, #4]
 8002c5c:	f7fd fa5e 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c60:	0002      	movs	r2, r0
 8002c62:	3a10      	subs	r2, #16
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <UART_SetConfig+0x1c4>)
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d81a      	bhi.n	8002ca0 <UART_SetConfig+0x1a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	0400      	lsls	r0, r0, #16
 8002c6e:	0c00      	lsrs	r0, r0, #16
 8002c70:	60d8      	str	r0, [r3, #12]
 8002c72:	2000      	movs	r0, #0
 8002c74:	e000      	b.n	8002c78 <UART_SetConfig+0x178>
    switch (clocksource)
 8002c76:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	226a      	movs	r2, #106	; 0x6a
 8002c7c:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8002c7e:	3a02      	subs	r2, #2
 8002c80:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8002c86:	6763      	str	r3, [r4, #116]	; 0x74
}
 8002c88:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c8a:	f7ff f841 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d1da      	bne.n	8002c48 <UART_SetConfig+0x148>
 8002c92:	2000      	movs	r0, #0
 8002c94:	e7f0      	b.n	8002c78 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c96:	f7fe ff3d 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
        break;
 8002c9a:	e7f8      	b.n	8002c8e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	e7eb      	b.n	8002c78 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e7e9      	b.n	8002c78 <UART_SetConfig+0x178>
 8002ca4:	cfff69f3 	.word	0xcfff69f3
 8002ca8:	ffffcfff 	.word	0xffffcfff
 8002cac:	11fff4ff 	.word	0x11fff4ff
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40004400 	.word	0x40004400
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	02dc6c00 	.word	0x02dc6c00
 8002cc0:	0800459c 	.word	0x0800459c
 8002cc4:	0000ffef 	.word	0x0000ffef

08002cc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cca:	07db      	lsls	r3, r3, #31
 8002ccc:	d506      	bpl.n	8002cdc <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cce:	6802      	ldr	r2, [r0, #0]
 8002cd0:	6853      	ldr	r3, [r2, #4]
 8002cd2:	492c      	ldr	r1, [pc, #176]	; (8002d84 <UART_AdvFeatureConfig+0xbc>)
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cde:	079b      	lsls	r3, r3, #30
 8002ce0:	d506      	bpl.n	8002cf0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce2:	6802      	ldr	r2, [r0, #0]
 8002ce4:	6853      	ldr	r3, [r2, #4]
 8002ce6:	4928      	ldr	r1, [pc, #160]	; (8002d88 <UART_AdvFeatureConfig+0xc0>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cf2:	075b      	lsls	r3, r3, #29
 8002cf4:	d506      	bpl.n	8002d04 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cf6:	6802      	ldr	r2, [r0, #0]
 8002cf8:	6853      	ldr	r3, [r2, #4]
 8002cfa:	4924      	ldr	r1, [pc, #144]	; (8002d8c <UART_AdvFeatureConfig+0xc4>)
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d06:	071b      	lsls	r3, r3, #28
 8002d08:	d506      	bpl.n	8002d18 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d0a:	6802      	ldr	r2, [r0, #0]
 8002d0c:	6853      	ldr	r3, [r2, #4]
 8002d0e:	4920      	ldr	r1, [pc, #128]	; (8002d90 <UART_AdvFeatureConfig+0xc8>)
 8002d10:	400b      	ands	r3, r1
 8002d12:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d1a:	06db      	lsls	r3, r3, #27
 8002d1c:	d506      	bpl.n	8002d2c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d1e:	6802      	ldr	r2, [r0, #0]
 8002d20:	6893      	ldr	r3, [r2, #8]
 8002d22:	491c      	ldr	r1, [pc, #112]	; (8002d94 <UART_AdvFeatureConfig+0xcc>)
 8002d24:	400b      	ands	r3, r1
 8002d26:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	d506      	bpl.n	8002d40 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d32:	6802      	ldr	r2, [r0, #0]
 8002d34:	6893      	ldr	r3, [r2, #8]
 8002d36:	4918      	ldr	r1, [pc, #96]	; (8002d98 <UART_AdvFeatureConfig+0xd0>)
 8002d38:	400b      	ands	r3, r1
 8002d3a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d42:	065b      	lsls	r3, r3, #25
 8002d44:	d50b      	bpl.n	8002d5e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d46:	6802      	ldr	r2, [r0, #0]
 8002d48:	6853      	ldr	r3, [r2, #4]
 8002d4a:	4914      	ldr	r1, [pc, #80]	; (8002d9c <UART_AdvFeatureConfig+0xd4>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	035b      	lsls	r3, r3, #13
 8002d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d00a      	beq.n	8002d74 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	d506      	bpl.n	8002d72 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	6853      	ldr	r3, [r2, #4]
 8002d68:	490d      	ldr	r1, [pc, #52]	; (8002da0 <UART_AdvFeatureConfig+0xd8>)
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	6053      	str	r3, [r2, #4]
}
 8002d72:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d74:	6802      	ldr	r2, [r0, #0]
 8002d76:	6853      	ldr	r3, [r2, #4]
 8002d78:	490a      	ldr	r1, [pc, #40]	; (8002da4 <UART_AdvFeatureConfig+0xdc>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6053      	str	r3, [r2, #4]
 8002d82:	e7ec      	b.n	8002d5e <UART_AdvFeatureConfig+0x96>
 8002d84:	fffdffff 	.word	0xfffdffff
 8002d88:	fffeffff 	.word	0xfffeffff
 8002d8c:	fffbffff 	.word	0xfffbffff
 8002d90:	ffff7fff 	.word	0xffff7fff
 8002d94:	ffffefff 	.word	0xffffefff
 8002d98:	ffffdfff 	.word	0xffffdfff
 8002d9c:	ffefffff 	.word	0xffefffff
 8002da0:	fff7ffff 	.word	0xfff7ffff
 8002da4:	ff9fffff 	.word	0xff9fffff

08002da8 <UART_WaitOnFlagUntilTimeout>:
{
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	46ce      	mov	lr, r9
 8002dac:	4647      	mov	r7, r8
 8002dae:	b580      	push	{r7, lr}
 8002db0:	0006      	movs	r6, r0
 8002db2:	000d      	movs	r5, r1
 8002db4:	0017      	movs	r7, r2
 8002db6:	4699      	mov	r9, r3
 8002db8:	9b08      	ldr	r3, [sp, #32]
 8002dba:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	6833      	ldr	r3, [r6, #0]
 8002dbe:	69dc      	ldr	r4, [r3, #28]
 8002dc0:	402c      	ands	r4, r5
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	4263      	negs	r3, r4
 8002dc6:	415c      	adcs	r4, r3
 8002dc8:	42bc      	cmp	r4, r7
 8002dca:	d157      	bne.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	4643      	mov	r3, r8
 8002dce:	3301      	adds	r3, #1
 8002dd0:	d0f4      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7fd ff41 	bl	8000c58 <HAL_GetTick>
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1ac0      	subs	r0, r0, r3
 8002dda:	4540      	cmp	r0, r8
 8002ddc:	d82e      	bhi.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x94>
 8002dde:	4643      	mov	r3, r8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02b      	beq.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de4:	6833      	ldr	r3, [r6, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	0752      	lsls	r2, r2, #29
 8002dea:	d5e7      	bpl.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	0512      	lsls	r2, r2, #20
 8002df0:	d5e4      	bpl.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e02:	6831      	ldr	r1, [r6, #0]
 8002e04:	680b      	ldr	r3, [r1, #0]
 8002e06:	4c20      	ldr	r4, [pc, #128]	; (8002e88 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8002e08:	4023      	ands	r3, r4
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e10:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e18:	6831      	ldr	r1, [r6, #0]
 8002e1a:	688b      	ldr	r3, [r1, #8]
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
 8002e20:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8002e24:	2320      	movs	r3, #32
 8002e26:	3283      	adds	r2, #131	; 0x83
 8002e28:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	3204      	adds	r2, #4
 8002e2c:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e2e:	3204      	adds	r2, #4
 8002e30:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 8002e32:	3360      	adds	r3, #96	; 0x60
 8002e34:	2200      	movs	r2, #0
 8002e36:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002e38:	2003      	movs	r0, #3
 8002e3a:	e020      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e40:	2201      	movs	r2, #1
 8002e42:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e46:	6831      	ldr	r1, [r6, #0]
 8002e48:	680b      	ldr	r3, [r1, #0]
 8002e4a:	4c0f      	ldr	r4, [pc, #60]	; (8002e88 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8002e4c:	4023      	ands	r3, r4
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5c:	6831      	ldr	r1, [r6, #0]
 8002e5e:	688b      	ldr	r3, [r1, #8]
 8002e60:	4393      	bics	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
 8002e64:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	3283      	adds	r2, #131	; 0x83
 8002e6c:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	3204      	adds	r2, #4
 8002e70:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	2200      	movs	r2, #0
 8002e76:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8002e78:	2003      	movs	r0, #3
 8002e7a:	e000      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8002e7c:	2000      	movs	r0, #0
}
 8002e7e:	bcc0      	pop	{r6, r7}
 8002e80:	46b9      	mov	r9, r7
 8002e82:	46b0      	mov	r8, r6
 8002e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	fffffe5f 	.word	0xfffffe5f

08002e8c <HAL_UART_Receive>:
{
 8002e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8e:	46c6      	mov	lr, r8
 8002e90:	b500      	push	{lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	0004      	movs	r4, r0
 8002e96:	000e      	movs	r6, r1
 8002e98:	0015      	movs	r5, r2
 8002e9a:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e9c:	2388      	movs	r3, #136	; 0x88
 8002e9e:	58c3      	ldr	r3, [r0, r3]
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d000      	beq.n	8002ea6 <HAL_UART_Receive+0x1a>
 8002ea4:	e092      	b.n	8002fcc <HAL_UART_Receive+0x140>
    if ((pData == NULL) || (Size == 0U))
 8002ea6:	2900      	cmp	r1, #0
 8002ea8:	d100      	bne.n	8002eac <HAL_UART_Receive+0x20>
 8002eaa:	e094      	b.n	8002fd6 <HAL_UART_Receive+0x14a>
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_UART_Receive+0x26>
 8002eb0:	e093      	b.n	8002fda <HAL_UART_Receive+0x14e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	015b      	lsls	r3, r3, #5
 8002eb6:	6882      	ldr	r2, [r0, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d023      	beq.n	8002f04 <HAL_UART_Receive+0x78>
    __HAL_LOCK(huart);
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	5ce3      	ldrb	r3, [r4, r3]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d100      	bne.n	8002ec6 <HAL_UART_Receive+0x3a>
 8002ec4:	e08b      	b.n	8002fde <HAL_UART_Receive+0x152>
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	2201      	movs	r2, #1
 8002eca:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	328b      	adds	r2, #139	; 0x8b
 8002ed0:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed2:	3a04      	subs	r2, #4
 8002ed4:	2122      	movs	r1, #34	; 0x22
 8002ed6:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed8:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8002eda:	f7fd febd 	bl	8000c58 <HAL_GetTick>
 8002ede:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 8002ee0:	235c      	movs	r3, #92	; 0x5c
 8002ee2:	52e5      	strh	r5, [r4, r3]
    huart->RxXferCount = Size;
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	52e5      	strh	r5, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 8002ee8:	68a3      	ldr	r3, [r4, #8]
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	0152      	lsls	r2, r2, #5
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00f      	beq.n	8002f12 <HAL_UART_Receive+0x86>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11c      	bne.n	8002f30 <HAL_UART_Receive+0xa4>
 8002ef6:	6922      	ldr	r2, [r4, #16]
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	d115      	bne.n	8002f28 <HAL_UART_Receive+0x9c>
 8002efc:	3260      	adds	r2, #96	; 0x60
 8002efe:	21ff      	movs	r1, #255	; 0xff
 8002f00:	52a1      	strh	r1, [r4, r2]
 8002f02:	e01c      	b.n	8002f3e <HAL_UART_Receive+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	6903      	ldr	r3, [r0, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d8      	bne.n	8002ebc <HAL_UART_Receive+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f0a:	07cb      	lsls	r3, r1, #31
 8002f0c:	d5d6      	bpl.n	8002ebc <HAL_UART_Receive+0x30>
        return  HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
 8002f10:	e05d      	b.n	8002fce <HAL_UART_Receive+0x142>
    UART_MASK_COMPUTATION(huart);
 8002f12:	6922      	ldr	r2, [r4, #16]
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d103      	bne.n	8002f20 <HAL_UART_Receive+0x94>
 8002f18:	3260      	adds	r2, #96	; 0x60
 8002f1a:	4933      	ldr	r1, [pc, #204]	; (8002fe8 <HAL_UART_Receive+0x15c>)
 8002f1c:	52a1      	strh	r1, [r4, r2]
 8002f1e:	e00e      	b.n	8002f3e <HAL_UART_Receive+0xb2>
 8002f20:	2260      	movs	r2, #96	; 0x60
 8002f22:	21ff      	movs	r1, #255	; 0xff
 8002f24:	52a1      	strh	r1, [r4, r2]
 8002f26:	e00a      	b.n	8002f3e <HAL_UART_Receive+0xb2>
 8002f28:	2260      	movs	r2, #96	; 0x60
 8002f2a:	217f      	movs	r1, #127	; 0x7f
 8002f2c:	52a1      	strh	r1, [r4, r2]
 8002f2e:	e006      	b.n	8002f3e <HAL_UART_Receive+0xb2>
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0552      	lsls	r2, r2, #21
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_UART_Receive+0xca>
 8002f38:	2260      	movs	r2, #96	; 0x60
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	52a1      	strh	r1, [r4, r2]
    uhMask = huart->Mask;
 8002f3e:	2260      	movs	r2, #96	; 0x60
 8002f40:	5aa2      	ldrh	r2, [r4, r2]
 8002f42:	9203      	str	r2, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	0152      	lsls	r2, r2, #5
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00f      	beq.n	8002f6c <HAL_UART_Receive+0xe0>
      pdata16bits = NULL;
 8002f4c:	2500      	movs	r5, #0
    __HAL_UNLOCK(huart);
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	2200      	movs	r2, #0
 8002f52:	54e2      	strb	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 8002f54:	e01d      	b.n	8002f92 <HAL_UART_Receive+0x106>
    UART_MASK_COMPUTATION(huart);
 8002f56:	6922      	ldr	r2, [r4, #16]
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d103      	bne.n	8002f64 <HAL_UART_Receive+0xd8>
 8002f5c:	3260      	adds	r2, #96	; 0x60
 8002f5e:	217f      	movs	r1, #127	; 0x7f
 8002f60:	52a1      	strh	r1, [r4, r2]
 8002f62:	e7ec      	b.n	8002f3e <HAL_UART_Receive+0xb2>
 8002f64:	2260      	movs	r2, #96	; 0x60
 8002f66:	213f      	movs	r1, #63	; 0x3f
 8002f68:	52a1      	strh	r1, [r4, r2]
 8002f6a:	e7e8      	b.n	8002f3e <HAL_UART_Receive+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_UART_Receive+0xea>
      pdata16bits = NULL;
 8002f72:	2500      	movs	r5, #0
 8002f74:	e7eb      	b.n	8002f4e <HAL_UART_Receive+0xc2>
      pdata16bits = (uint16_t *) pData;
 8002f76:	0035      	movs	r5, r6
      pdata8bits  = NULL;
 8002f78:	2600      	movs	r6, #0
 8002f7a:	e7e8      	b.n	8002f4e <HAL_UART_Receive+0xc2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	9a03      	ldr	r2, [sp, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 8002f86:	3502      	adds	r5, #2
      huart->RxXferCount--;
 8002f88:	235e      	movs	r3, #94	; 0x5e
 8002f8a:	5ae2      	ldrh	r2, [r4, r3]
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	52e2      	strh	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 8002f92:	235e      	movs	r3, #94	; 0x5e
 8002f94:	5ae3      	ldrh	r3, [r4, r3]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_UART_Receive+0x136>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9c:	9700      	str	r7, [sp, #0]
 8002f9e:	4643      	mov	r3, r8
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	0020      	movs	r0, r4
 8002fa6:	f7ff feff 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d119      	bne.n	8002fe2 <HAL_UART_Receive+0x156>
      if (pdata8bits == NULL)
 8002fae:	2e00      	cmp	r6, #0
 8002fb0:	d0e4      	beq.n	8002f7c <HAL_UART_Receive+0xf0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	466a      	mov	r2, sp
 8002fb8:	7b12      	ldrb	r2, [r2, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7e2      	b.n	8002f88 <HAL_UART_Receive+0xfc>
    huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	3388      	adds	r3, #136	; 0x88
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8002fc8:	2000      	movs	r0, #0
 8002fca:	e000      	b.n	8002fce <HAL_UART_Receive+0x142>
    return HAL_BUSY;
 8002fcc:	2002      	movs	r0, #2
}
 8002fce:	b004      	add	sp, #16
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	46b8      	mov	r8, r7
 8002fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	e7f9      	b.n	8002fce <HAL_UART_Receive+0x142>
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7f7      	b.n	8002fce <HAL_UART_Receive+0x142>
    __HAL_LOCK(huart);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	e7f5      	b.n	8002fce <HAL_UART_Receive+0x142>
        return HAL_TIMEOUT;
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	e7f3      	b.n	8002fce <HAL_UART_Receive+0x142>
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	000001ff 	.word	0x000001ff

08002fec <UART_CheckIdleState>:
{
 8002fec:	b530      	push	{r4, r5, lr}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	238c      	movs	r3, #140	; 0x8c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002ff8:	f7fd fe2e 	bl	8000c58 <HAL_GetTick>
 8002ffc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	0713      	lsls	r3, r2, #28
 8003004:	d40f      	bmi.n	8003026 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	075b      	lsls	r3, r3, #29
 800300c:	d418      	bmi.n	8003040 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 800300e:	2320      	movs	r3, #32
 8003010:	2284      	movs	r2, #132	; 0x84
 8003012:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	3204      	adds	r2, #4
 8003016:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	2300      	movs	r3, #0
 800301a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800301c:	3a08      	subs	r2, #8
 800301e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003020:	2000      	movs	r0, #0
}
 8003022:	b003      	add	sp, #12
 8003024:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <UART_CheckIdleState+0x70>)
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	0003      	movs	r3, r0
 800302e:	2200      	movs	r2, #0
 8003030:	0389      	lsls	r1, r1, #14
 8003032:	0020      	movs	r0, r4
 8003034:	f7ff feb8 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8003038:	2800      	cmp	r0, #0
 800303a:	d0e4      	beq.n	8003006 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800303c:	2003      	movs	r0, #3
 800303e:	e7f0      	b.n	8003022 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <UART_CheckIdleState+0x70>)
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	002b      	movs	r3, r5
 8003048:	2200      	movs	r2, #0
 800304a:	03c9      	lsls	r1, r1, #15
 800304c:	0020      	movs	r0, r4
 800304e:	f7ff feab 	bl	8002da8 <UART_WaitOnFlagUntilTimeout>
 8003052:	2800      	cmp	r0, #0
 8003054:	d0db      	beq.n	800300e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	e7e3      	b.n	8003022 <UART_CheckIdleState+0x36>
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	01ffffff 	.word	0x01ffffff

08003060 <HAL_UART_Init>:
{
 8003060:	b510      	push	{r4, lr}
 8003062:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003064:	d030      	beq.n	80030c8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003066:	2384      	movs	r3, #132	; 0x84
 8003068:	58c3      	ldr	r3, [r0, r3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d022      	beq.n	80030b4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800306e:	2384      	movs	r3, #132	; 0x84
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	438b      	bics	r3, r1
 800307c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800307e:	0020      	movs	r0, r4
 8003080:	f7ff fd3e 	bl	8002b00 <UART_SetConfig>
 8003084:	2801      	cmp	r0, #1
 8003086:	d014      	beq.n	80030b2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	6853      	ldr	r3, [r2, #4]
 8003092:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_UART_Init+0x6c>)
 8003094:	400b      	ands	r3, r1
 8003096:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	6893      	ldr	r3, [r2, #8]
 800309c:	212a      	movs	r1, #42	; 0x2a
 800309e:	438b      	bics	r3, r1
 80030a0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	3929      	subs	r1, #41	; 0x29
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80030ac:	0020      	movs	r0, r4
 80030ae:	f7ff ff9d 	bl	8002fec <UART_CheckIdleState>
}
 80030b2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80030b4:	3380      	adds	r3, #128	; 0x80
 80030b6:	2200      	movs	r2, #0
 80030b8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80030ba:	f7fd fcb3 	bl	8000a24 <HAL_UART_MspInit>
 80030be:	e7d6      	b.n	800306e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80030c0:	0020      	movs	r0, r4
 80030c2:	f7ff fe01 	bl	8002cc8 <UART_AdvFeatureConfig>
 80030c6:	e7e2      	b.n	800308e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80030c8:	2001      	movs	r0, #1
 80030ca:	e7f2      	b.n	80030b2 <HAL_UART_Init+0x52>
 80030cc:	ffffb7ff 	.word	0xffffb7ff

080030d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80030da:	3301      	adds	r3, #1
 80030dc:	226a      	movs	r2, #106	; 0x6a
 80030de:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80030e0:	3a02      	subs	r2, #2
 80030e2:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80030e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030e6:	6802      	ldr	r2, [r0, #0]
 80030e8:	6895      	ldr	r5, [r2, #8]
 80030ea:	0e6d      	lsrs	r5, r5, #25
 80030ec:	2307      	movs	r3, #7
 80030ee:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	0f52      	lsrs	r2, r2, #29
 80030f4:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030f6:	4f08      	ldr	r7, [pc, #32]	; (8003118 <UARTEx_SetNbDataToProcess+0x48>)
 80030f8:	5cf8      	ldrb	r0, [r7, r3]
 80030fa:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030fc:	4e07      	ldr	r6, [pc, #28]	; (800311c <UARTEx_SetNbDataToProcess+0x4c>)
 80030fe:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003100:	f7fd f896 	bl	8000230 <__divsi3>
 8003104:	236a      	movs	r3, #106	; 0x6a
 8003106:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003108:	5d78      	ldrb	r0, [r7, r5]
 800310a:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800310c:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800310e:	f7fd f88f 	bl	8000230 <__divsi3>
 8003112:	2368      	movs	r3, #104	; 0x68
 8003114:	52e0      	strh	r0, [r4, r3]
}
 8003116:	e7e5      	b.n	80030e4 <UARTEx_SetNbDataToProcess+0x14>
 8003118:	080045bc 	.word	0x080045bc
 800311c:	080045b4 	.word	0x080045b4

08003120 <HAL_UARTEx_WakeupCallback>:
}
 8003120:	4770      	bx	lr

08003122 <HAL_UARTEx_RxFifoFullCallback>:
}
 8003122:	4770      	bx	lr

08003124 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8003124:	4770      	bx	lr
	...

08003128 <HAL_UARTEx_DisableFifoMode>:
{
 8003128:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	5cc3      	ldrb	r3, [r0, r3]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d015      	beq.n	800315e <HAL_UARTEx_DisableFifoMode+0x36>
 8003132:	2480      	movs	r4, #128	; 0x80
 8003134:	2601      	movs	r6, #1
 8003136:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003138:	2584      	movs	r5, #132	; 0x84
 800313a:	2324      	movs	r3, #36	; 0x24
 800313c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800313e:	6802      	ldr	r2, [r0, #0]
 8003140:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003142:	6811      	ldr	r1, [r2, #0]
 8003144:	43b1      	bics	r1, r6
 8003146:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003148:	4a06      	ldr	r2, [pc, #24]	; (8003164 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800314a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800314c:	2200      	movs	r2, #0
 800314e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003150:	6801      	ldr	r1, [r0, #0]
 8003152:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003154:	2320      	movs	r3, #32
 8003156:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003158:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800315a:	2000      	movs	r0, #0
}
 800315c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800315e:	2002      	movs	r0, #2
 8003160:	e7fc      	b.n	800315c <HAL_UARTEx_DisableFifoMode+0x34>
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	dfffffff 	.word	0xdfffffff

08003168 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	0004      	movs	r4, r0
 800316c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	5cc3      	ldrb	r3, [r0, r3]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d01b      	beq.n	80031ae <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003176:	2580      	movs	r5, #128	; 0x80
 8003178:	2001      	movs	r0, #1
 800317a:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800317c:	2684      	movs	r6, #132	; 0x84
 800317e:	2324      	movs	r3, #36	; 0x24
 8003180:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	4381      	bics	r1, r0
 800318a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	6883      	ldr	r3, [r0, #8]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	08d9      	lsrs	r1, r3, #3
 8003194:	4311      	orrs	r1, r2
 8003196:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003198:	0020      	movs	r0, r4
 800319a:	f7ff ff99 	bl	80030d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031a2:	2320      	movs	r3, #32
 80031a4:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80031a6:	2300      	movs	r3, #0
 80031a8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80031aa:	2000      	movs	r0, #0
}
 80031ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80031ae:	2002      	movs	r0, #2
 80031b0:	e7fc      	b.n	80031ac <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080031b4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	0004      	movs	r4, r0
 80031b8:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	5c82      	ldrb	r2, [r0, r2]
 80031be:	2a01      	cmp	r2, #1
 80031c0:	d01b      	beq.n	80031fa <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80031c2:	2580      	movs	r5, #128	; 0x80
 80031c4:	2001      	movs	r0, #1
 80031c6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80031c8:	2684      	movs	r6, #132	; 0x84
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80031d2:	6811      	ldr	r1, [r2, #0]
 80031d4:	4381      	bics	r1, r0
 80031d6:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	6891      	ldr	r1, [r2, #8]
 80031dc:	4808      	ldr	r0, [pc, #32]	; (8003200 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80031de:	4001      	ands	r1, r0
 80031e0:	4319      	orrs	r1, r3
 80031e2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80031e4:	0020      	movs	r0, r4
 80031e6:	f7ff ff73 	bl	80030d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031ee:	2320      	movs	r3, #32
 80031f0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80031f2:	2300      	movs	r3, #0
 80031f4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80031f6:	2000      	movs	r0, #0
}
 80031f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80031fa:	2002      	movs	r0, #2
 80031fc:	e7fc      	b.n	80031f8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	f1ffffff 	.word	0xf1ffffff

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	2000000c 	.word	0x2000000c

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	; (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	2600      	movs	r6, #0
 8003222:	f001 f951 	bl	80044c8 <_init>
 8003226:	4d0a      	ldr	r5, [pc, #40]	; (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	; (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	00b3      	lsls	r3, r6, #2
 8003236:	58eb      	ldr	r3, [r5, r3]
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	00b3      	lsls	r3, r6, #2
 8003240:	58eb      	ldr	r3, [r5, r3]
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	0800465c 	.word	0x0800465c
 800324c:	0800465c 	.word	0x0800465c
 8003250:	0800465c 	.word	0x0800465c
 8003254:	08004660 	.word	0x08004660

08003258 <memcpy>:
 8003258:	2300      	movs	r3, #0
 800325a:	b510      	push	{r4, lr}
 800325c:	429a      	cmp	r2, r3
 800325e:	d100      	bne.n	8003262 <memcpy+0xa>
 8003260:	bd10      	pop	{r4, pc}
 8003262:	5ccc      	ldrb	r4, [r1, r3]
 8003264:	54c4      	strb	r4, [r0, r3]
 8003266:	3301      	adds	r3, #1
 8003268:	e7f8      	b.n	800325c <memcpy+0x4>

0800326a <memset>:
 800326a:	0003      	movs	r3, r0
 800326c:	1882      	adds	r2, r0, r2
 800326e:	4293      	cmp	r3, r2
 8003270:	d100      	bne.n	8003274 <memset+0xa>
 8003272:	4770      	bx	lr
 8003274:	7019      	strb	r1, [r3, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	e7f9      	b.n	800326e <memset+0x4>
	...

0800327c <iprintf>:
 800327c:	b40f      	push	{r0, r1, r2, r3}
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <iprintf+0x30>)
 8003280:	b513      	push	{r0, r1, r4, lr}
 8003282:	681c      	ldr	r4, [r3, #0]
 8003284:	2c00      	cmp	r4, #0
 8003286:	d005      	beq.n	8003294 <iprintf+0x18>
 8003288:	69a3      	ldr	r3, [r4, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <iprintf+0x18>
 800328e:	0020      	movs	r0, r4
 8003290:	f000 fb4e 	bl	8003930 <__sinit>
 8003294:	ab05      	add	r3, sp, #20
 8003296:	0020      	movs	r0, r4
 8003298:	9a04      	ldr	r2, [sp, #16]
 800329a:	68a1      	ldr	r1, [r4, #8]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	f000 fd6b 	bl	8003d78 <_vfiprintf_r>
 80032a2:	bc16      	pop	{r1, r2, r4}
 80032a4:	bc08      	pop	{r3}
 80032a6:	b004      	add	sp, #16
 80032a8:	4718      	bx	r3
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <_puts_r>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	0005      	movs	r5, r0
 80032b4:	000e      	movs	r6, r1
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d004      	beq.n	80032c4 <_puts_r+0x14>
 80032ba:	6983      	ldr	r3, [r0, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <_puts_r+0x14>
 80032c0:	f000 fb36 	bl	8003930 <__sinit>
 80032c4:	69ab      	ldr	r3, [r5, #24]
 80032c6:	68ac      	ldr	r4, [r5, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <_puts_r+0x22>
 80032cc:	0028      	movs	r0, r5
 80032ce:	f000 fb2f 	bl	8003930 <__sinit>
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <_puts_r+0xd8>)
 80032d4:	429c      	cmp	r4, r3
 80032d6:	d122      	bne.n	800331e <_puts_r+0x6e>
 80032d8:	686c      	ldr	r4, [r5, #4]
 80032da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032dc:	07db      	lsls	r3, r3, #31
 80032de:	d405      	bmi.n	80032ec <_puts_r+0x3c>
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	059b      	lsls	r3, r3, #22
 80032e4:	d402      	bmi.n	80032ec <_puts_r+0x3c>
 80032e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032e8:	f000 fbc3 	bl	8003a72 <__retarget_lock_acquire_recursive>
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	071b      	lsls	r3, r3, #28
 80032f0:	d502      	bpl.n	80032f8 <_puts_r+0x48>
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d129      	bne.n	800334c <_puts_r+0x9c>
 80032f8:	0021      	movs	r1, r4
 80032fa:	0028      	movs	r0, r5
 80032fc:	f000 f972 	bl	80035e4 <__swsetup_r>
 8003300:	2800      	cmp	r0, #0
 8003302:	d023      	beq.n	800334c <_puts_r+0x9c>
 8003304:	2501      	movs	r5, #1
 8003306:	426d      	negs	r5, r5
 8003308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800330a:	07db      	lsls	r3, r3, #31
 800330c:	d405      	bmi.n	800331a <_puts_r+0x6a>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	059b      	lsls	r3, r3, #22
 8003312:	d402      	bmi.n	800331a <_puts_r+0x6a>
 8003314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003316:	f000 fbad 	bl	8003a74 <__retarget_lock_release_recursive>
 800331a:	0028      	movs	r0, r5
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <_puts_r+0xdc>)
 8003320:	429c      	cmp	r4, r3
 8003322:	d101      	bne.n	8003328 <_puts_r+0x78>
 8003324:	68ac      	ldr	r4, [r5, #8]
 8003326:	e7d8      	b.n	80032da <_puts_r+0x2a>
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <_puts_r+0xe0>)
 800332a:	429c      	cmp	r4, r3
 800332c:	d1d5      	bne.n	80032da <_puts_r+0x2a>
 800332e:	68ec      	ldr	r4, [r5, #12]
 8003330:	e7d3      	b.n	80032da <_puts_r+0x2a>
 8003332:	3601      	adds	r6, #1
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	da04      	bge.n	8003344 <_puts_r+0x94>
 800333a:	69a2      	ldr	r2, [r4, #24]
 800333c:	429a      	cmp	r2, r3
 800333e:	dc16      	bgt.n	800336e <_puts_r+0xbe>
 8003340:	290a      	cmp	r1, #10
 8003342:	d014      	beq.n	800336e <_puts_r+0xbe>
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	6022      	str	r2, [r4, #0]
 800334a:	7019      	strb	r1, [r3, #0]
 800334c:	68a3      	ldr	r3, [r4, #8]
 800334e:	7831      	ldrb	r1, [r6, #0]
 8003350:	3b01      	subs	r3, #1
 8003352:	2900      	cmp	r1, #0
 8003354:	d1ed      	bne.n	8003332 <_puts_r+0x82>
 8003356:	60a3      	str	r3, [r4, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0f      	bge.n	800337c <_puts_r+0xcc>
 800335c:	0028      	movs	r0, r5
 800335e:	0022      	movs	r2, r4
 8003360:	310a      	adds	r1, #10
 8003362:	f000 f8e9 	bl	8003538 <__swbuf_r>
 8003366:	250a      	movs	r5, #10
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	d1cd      	bne.n	8003308 <_puts_r+0x58>
 800336c:	e7ca      	b.n	8003304 <_puts_r+0x54>
 800336e:	0022      	movs	r2, r4
 8003370:	0028      	movs	r0, r5
 8003372:	f000 f8e1 	bl	8003538 <__swbuf_r>
 8003376:	1c43      	adds	r3, r0, #1
 8003378:	d1e8      	bne.n	800334c <_puts_r+0x9c>
 800337a:	e7c3      	b.n	8003304 <_puts_r+0x54>
 800337c:	250a      	movs	r5, #10
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	6022      	str	r2, [r4, #0]
 8003384:	701d      	strb	r5, [r3, #0]
 8003386:	e7bf      	b.n	8003308 <_puts_r+0x58>
 8003388:	080045e8 	.word	0x080045e8
 800338c:	08004608 	.word	0x08004608
 8003390:	080045c8 	.word	0x080045c8

08003394 <puts>:
 8003394:	b510      	push	{r4, lr}
 8003396:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <puts+0x10>)
 8003398:	0001      	movs	r1, r0
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	f7ff ff88 	bl	80032b0 <_puts_r>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	2000000c 	.word	0x2000000c

080033a8 <setvbuf>:
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	001d      	movs	r5, r3
 80033ac:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <setvbuf+0x17c>)
 80033ae:	b085      	sub	sp, #20
 80033b0:	681e      	ldr	r6, [r3, #0]
 80033b2:	0004      	movs	r4, r0
 80033b4:	000f      	movs	r7, r1
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	2e00      	cmp	r6, #0
 80033ba:	d005      	beq.n	80033c8 <setvbuf+0x20>
 80033bc:	69b3      	ldr	r3, [r6, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <setvbuf+0x20>
 80033c2:	0030      	movs	r0, r6
 80033c4:	f000 fab4 	bl	8003930 <__sinit>
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <setvbuf+0x180>)
 80033ca:	429c      	cmp	r4, r3
 80033cc:	d161      	bne.n	8003492 <setvbuf+0xea>
 80033ce:	6874      	ldr	r4, [r6, #4]
 80033d0:	9b00      	ldr	r3, [sp, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d005      	beq.n	80033e2 <setvbuf+0x3a>
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d900      	bls.n	80033dc <setvbuf+0x34>
 80033da:	e09d      	b.n	8003518 <setvbuf+0x170>
 80033dc:	2d00      	cmp	r5, #0
 80033de:	da00      	bge.n	80033e2 <setvbuf+0x3a>
 80033e0:	e09a      	b.n	8003518 <setvbuf+0x170>
 80033e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033e4:	07db      	lsls	r3, r3, #31
 80033e6:	d405      	bmi.n	80033f4 <setvbuf+0x4c>
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	059b      	lsls	r3, r3, #22
 80033ec:	d402      	bmi.n	80033f4 <setvbuf+0x4c>
 80033ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033f0:	f000 fb3f 	bl	8003a72 <__retarget_lock_acquire_recursive>
 80033f4:	0021      	movs	r1, r4
 80033f6:	0030      	movs	r0, r6
 80033f8:	f000 f9f8 	bl	80037ec <_fflush_r>
 80033fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fe:	2900      	cmp	r1, #0
 8003400:	d008      	beq.n	8003414 <setvbuf+0x6c>
 8003402:	0023      	movs	r3, r4
 8003404:	3344      	adds	r3, #68	; 0x44
 8003406:	4299      	cmp	r1, r3
 8003408:	d002      	beq.n	8003410 <setvbuf+0x68>
 800340a:	0030      	movs	r0, r6
 800340c:	f000 fbaa 	bl	8003b64 <_free_r>
 8003410:	2300      	movs	r3, #0
 8003412:	6363      	str	r3, [r4, #52]	; 0x34
 8003414:	2300      	movs	r3, #0
 8003416:	61a3      	str	r3, [r4, #24]
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	d503      	bpl.n	8003428 <setvbuf+0x80>
 8003420:	0030      	movs	r0, r6
 8003422:	6921      	ldr	r1, [r4, #16]
 8003424:	f000 fb9e 	bl	8003b64 <_free_r>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	4a40      	ldr	r2, [pc, #256]	; (800352c <setvbuf+0x184>)
 800342c:	4013      	ands	r3, r2
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	9b00      	ldr	r3, [sp, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d100      	bne.n	8003438 <setvbuf+0x90>
 8003436:	e069      	b.n	800350c <setvbuf+0x164>
 8003438:	ab03      	add	r3, sp, #12
 800343a:	0021      	movs	r1, r4
 800343c:	0030      	movs	r0, r6
 800343e:	aa02      	add	r2, sp, #8
 8003440:	f000 fb1a 	bl	8003a78 <__swhatbuf_r>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	4303      	orrs	r3, r0
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	2d00      	cmp	r5, #0
 800344c:	d12b      	bne.n	80034a6 <setvbuf+0xfe>
 800344e:	9d02      	ldr	r5, [sp, #8]
 8003450:	0028      	movs	r0, r5
 8003452:	f000 fb7d 	bl	8003b50 <malloc>
 8003456:	1e07      	subs	r7, r0, #0
 8003458:	d153      	bne.n	8003502 <setvbuf+0x15a>
 800345a:	9b02      	ldr	r3, [sp, #8]
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	42ab      	cmp	r3, r5
 8003460:	d149      	bne.n	80034f6 <setvbuf+0x14e>
 8003462:	2501      	movs	r5, #1
 8003464:	426d      	negs	r5, r5
 8003466:	2302      	movs	r3, #2
 8003468:	89a2      	ldrh	r2, [r4, #12]
 800346a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800346c:	4313      	orrs	r3, r2
 800346e:	2200      	movs	r2, #0
 8003470:	60a2      	str	r2, [r4, #8]
 8003472:	0022      	movs	r2, r4
 8003474:	3247      	adds	r2, #71	; 0x47
 8003476:	6022      	str	r2, [r4, #0]
 8003478:	6122      	str	r2, [r4, #16]
 800347a:	2201      	movs	r2, #1
 800347c:	b21b      	sxth	r3, r3
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	6162      	str	r2, [r4, #20]
 8003482:	4211      	tst	r1, r2
 8003484:	d134      	bne.n	80034f0 <setvbuf+0x148>
 8003486:	059b      	lsls	r3, r3, #22
 8003488:	d432      	bmi.n	80034f0 <setvbuf+0x148>
 800348a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348c:	f000 faf2 	bl	8003a74 <__retarget_lock_release_recursive>
 8003490:	e02e      	b.n	80034f0 <setvbuf+0x148>
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <setvbuf+0x188>)
 8003494:	429c      	cmp	r4, r3
 8003496:	d101      	bne.n	800349c <setvbuf+0xf4>
 8003498:	68b4      	ldr	r4, [r6, #8]
 800349a:	e799      	b.n	80033d0 <setvbuf+0x28>
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <setvbuf+0x18c>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d196      	bne.n	80033d0 <setvbuf+0x28>
 80034a2:	68f4      	ldr	r4, [r6, #12]
 80034a4:	e794      	b.n	80033d0 <setvbuf+0x28>
 80034a6:	2f00      	cmp	r7, #0
 80034a8:	d0d2      	beq.n	8003450 <setvbuf+0xa8>
 80034aa:	69b3      	ldr	r3, [r6, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <setvbuf+0x10e>
 80034b0:	0030      	movs	r0, r6
 80034b2:	f000 fa3d 	bl	8003930 <__sinit>
 80034b6:	9b00      	ldr	r3, [sp, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d102      	bne.n	80034c2 <setvbuf+0x11a>
 80034bc:	89a2      	ldrh	r2, [r4, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	89a2      	ldrh	r2, [r4, #12]
 80034c4:	2308      	movs	r3, #8
 80034c6:	0011      	movs	r1, r2
 80034c8:	6027      	str	r7, [r4, #0]
 80034ca:	6127      	str	r7, [r4, #16]
 80034cc:	6165      	str	r5, [r4, #20]
 80034ce:	4019      	ands	r1, r3
 80034d0:	421a      	tst	r2, r3
 80034d2:	d01f      	beq.n	8003514 <setvbuf+0x16c>
 80034d4:	07d3      	lsls	r3, r2, #31
 80034d6:	d51b      	bpl.n	8003510 <setvbuf+0x168>
 80034d8:	2300      	movs	r3, #0
 80034da:	426d      	negs	r5, r5
 80034dc:	60a3      	str	r3, [r4, #8]
 80034de:	61a5      	str	r5, [r4, #24]
 80034e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80034e2:	2301      	movs	r3, #1
 80034e4:	000d      	movs	r5, r1
 80034e6:	401d      	ands	r5, r3
 80034e8:	4219      	tst	r1, r3
 80034ea:	d118      	bne.n	800351e <setvbuf+0x176>
 80034ec:	0593      	lsls	r3, r2, #22
 80034ee:	d5cc      	bpl.n	800348a <setvbuf+0xe2>
 80034f0:	0028      	movs	r0, r5
 80034f2:	b005      	add	sp, #20
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	9801      	ldr	r0, [sp, #4]
 80034f8:	f000 fb2a 	bl	8003b50 <malloc>
 80034fc:	9d01      	ldr	r5, [sp, #4]
 80034fe:	1e07      	subs	r7, r0, #0
 8003500:	d0af      	beq.n	8003462 <setvbuf+0xba>
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	89a2      	ldrh	r2, [r4, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	e7ce      	b.n	80034aa <setvbuf+0x102>
 800350c:	2500      	movs	r5, #0
 800350e:	e7aa      	b.n	8003466 <setvbuf+0xbe>
 8003510:	60a5      	str	r5, [r4, #8]
 8003512:	e7e5      	b.n	80034e0 <setvbuf+0x138>
 8003514:	60a1      	str	r1, [r4, #8]
 8003516:	e7e3      	b.n	80034e0 <setvbuf+0x138>
 8003518:	2501      	movs	r5, #1
 800351a:	426d      	negs	r5, r5
 800351c:	e7e8      	b.n	80034f0 <setvbuf+0x148>
 800351e:	2500      	movs	r5, #0
 8003520:	e7e6      	b.n	80034f0 <setvbuf+0x148>
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	2000000c 	.word	0x2000000c
 8003528:	080045e8 	.word	0x080045e8
 800352c:	fffff35c 	.word	0xfffff35c
 8003530:	08004608 	.word	0x08004608
 8003534:	080045c8 	.word	0x080045c8

08003538 <__swbuf_r>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	0005      	movs	r5, r0
 800353c:	000e      	movs	r6, r1
 800353e:	0014      	movs	r4, r2
 8003540:	2800      	cmp	r0, #0
 8003542:	d004      	beq.n	800354e <__swbuf_r+0x16>
 8003544:	6983      	ldr	r3, [r0, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <__swbuf_r+0x16>
 800354a:	f000 f9f1 	bl	8003930 <__sinit>
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <__swbuf_r+0xa0>)
 8003550:	429c      	cmp	r4, r3
 8003552:	d12e      	bne.n	80035b2 <__swbuf_r+0x7a>
 8003554:	686c      	ldr	r4, [r5, #4]
 8003556:	69a3      	ldr	r3, [r4, #24]
 8003558:	60a3      	str	r3, [r4, #8]
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	d532      	bpl.n	80035c6 <__swbuf_r+0x8e>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02f      	beq.n	80035c6 <__swbuf_r+0x8e>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	b2f7      	uxtb	r7, r6
 800356c:	1a98      	subs	r0, r3, r2
 800356e:	6963      	ldr	r3, [r4, #20]
 8003570:	b2f6      	uxtb	r6, r6
 8003572:	4283      	cmp	r3, r0
 8003574:	dc05      	bgt.n	8003582 <__swbuf_r+0x4a>
 8003576:	0021      	movs	r1, r4
 8003578:	0028      	movs	r0, r5
 800357a:	f000 f937 	bl	80037ec <_fflush_r>
 800357e:	2800      	cmp	r0, #0
 8003580:	d127      	bne.n	80035d2 <__swbuf_r+0x9a>
 8003582:	68a3      	ldr	r3, [r4, #8]
 8003584:	3001      	adds	r0, #1
 8003586:	3b01      	subs	r3, #1
 8003588:	60a3      	str	r3, [r4, #8]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	6022      	str	r2, [r4, #0]
 8003590:	701f      	strb	r7, [r3, #0]
 8003592:	6963      	ldr	r3, [r4, #20]
 8003594:	4283      	cmp	r3, r0
 8003596:	d004      	beq.n	80035a2 <__swbuf_r+0x6a>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	07db      	lsls	r3, r3, #31
 800359c:	d507      	bpl.n	80035ae <__swbuf_r+0x76>
 800359e:	2e0a      	cmp	r6, #10
 80035a0:	d105      	bne.n	80035ae <__swbuf_r+0x76>
 80035a2:	0021      	movs	r1, r4
 80035a4:	0028      	movs	r0, r5
 80035a6:	f000 f921 	bl	80037ec <_fflush_r>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d111      	bne.n	80035d2 <__swbuf_r+0x9a>
 80035ae:	0030      	movs	r0, r6
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <__swbuf_r+0xa4>)
 80035b4:	429c      	cmp	r4, r3
 80035b6:	d101      	bne.n	80035bc <__swbuf_r+0x84>
 80035b8:	68ac      	ldr	r4, [r5, #8]
 80035ba:	e7cc      	b.n	8003556 <__swbuf_r+0x1e>
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <__swbuf_r+0xa8>)
 80035be:	429c      	cmp	r4, r3
 80035c0:	d1c9      	bne.n	8003556 <__swbuf_r+0x1e>
 80035c2:	68ec      	ldr	r4, [r5, #12]
 80035c4:	e7c7      	b.n	8003556 <__swbuf_r+0x1e>
 80035c6:	0021      	movs	r1, r4
 80035c8:	0028      	movs	r0, r5
 80035ca:	f000 f80b 	bl	80035e4 <__swsetup_r>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d0c9      	beq.n	8003566 <__swbuf_r+0x2e>
 80035d2:	2601      	movs	r6, #1
 80035d4:	4276      	negs	r6, r6
 80035d6:	e7ea      	b.n	80035ae <__swbuf_r+0x76>
 80035d8:	080045e8 	.word	0x080045e8
 80035dc:	08004608 	.word	0x08004608
 80035e0:	080045c8 	.word	0x080045c8

080035e4 <__swsetup_r>:
 80035e4:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <__swsetup_r+0xe0>)
 80035e6:	b570      	push	{r4, r5, r6, lr}
 80035e8:	681d      	ldr	r5, [r3, #0]
 80035ea:	0006      	movs	r6, r0
 80035ec:	000c      	movs	r4, r1
 80035ee:	2d00      	cmp	r5, #0
 80035f0:	d005      	beq.n	80035fe <__swsetup_r+0x1a>
 80035f2:	69ab      	ldr	r3, [r5, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <__swsetup_r+0x1a>
 80035f8:	0028      	movs	r0, r5
 80035fa:	f000 f999 	bl	8003930 <__sinit>
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <__swsetup_r+0xe4>)
 8003600:	429c      	cmp	r4, r3
 8003602:	d10f      	bne.n	8003624 <__swsetup_r+0x40>
 8003604:	686c      	ldr	r4, [r5, #4]
 8003606:	230c      	movs	r3, #12
 8003608:	5ee2      	ldrsh	r2, [r4, r3]
 800360a:	b293      	uxth	r3, r2
 800360c:	0711      	lsls	r1, r2, #28
 800360e:	d42d      	bmi.n	800366c <__swsetup_r+0x88>
 8003610:	06d9      	lsls	r1, r3, #27
 8003612:	d411      	bmi.n	8003638 <__swsetup_r+0x54>
 8003614:	2309      	movs	r3, #9
 8003616:	2001      	movs	r0, #1
 8003618:	6033      	str	r3, [r6, #0]
 800361a:	3337      	adds	r3, #55	; 0x37
 800361c:	4313      	orrs	r3, r2
 800361e:	81a3      	strh	r3, [r4, #12]
 8003620:	4240      	negs	r0, r0
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <__swsetup_r+0xe8>)
 8003626:	429c      	cmp	r4, r3
 8003628:	d101      	bne.n	800362e <__swsetup_r+0x4a>
 800362a:	68ac      	ldr	r4, [r5, #8]
 800362c:	e7eb      	b.n	8003606 <__swsetup_r+0x22>
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <__swsetup_r+0xec>)
 8003630:	429c      	cmp	r4, r3
 8003632:	d1e8      	bne.n	8003606 <__swsetup_r+0x22>
 8003634:	68ec      	ldr	r4, [r5, #12]
 8003636:	e7e6      	b.n	8003606 <__swsetup_r+0x22>
 8003638:	075b      	lsls	r3, r3, #29
 800363a:	d513      	bpl.n	8003664 <__swsetup_r+0x80>
 800363c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800363e:	2900      	cmp	r1, #0
 8003640:	d008      	beq.n	8003654 <__swsetup_r+0x70>
 8003642:	0023      	movs	r3, r4
 8003644:	3344      	adds	r3, #68	; 0x44
 8003646:	4299      	cmp	r1, r3
 8003648:	d002      	beq.n	8003650 <__swsetup_r+0x6c>
 800364a:	0030      	movs	r0, r6
 800364c:	f000 fa8a 	bl	8003b64 <_free_r>
 8003650:	2300      	movs	r3, #0
 8003652:	6363      	str	r3, [r4, #52]	; 0x34
 8003654:	2224      	movs	r2, #36	; 0x24
 8003656:	89a3      	ldrh	r3, [r4, #12]
 8003658:	4393      	bics	r3, r2
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	2300      	movs	r3, #0
 800365e:	6063      	str	r3, [r4, #4]
 8003660:	6923      	ldr	r3, [r4, #16]
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	2308      	movs	r3, #8
 8003666:	89a2      	ldrh	r2, [r4, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	81a3      	strh	r3, [r4, #12]
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <__swsetup_r+0xa6>
 8003672:	21a0      	movs	r1, #160	; 0xa0
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	89a3      	ldrh	r3, [r4, #12]
 8003678:	0089      	lsls	r1, r1, #2
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	400b      	ands	r3, r1
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <__swsetup_r+0xa6>
 8003682:	0021      	movs	r1, r4
 8003684:	0030      	movs	r0, r6
 8003686:	f000 fa1f 	bl	8003ac8 <__smakebuf_r>
 800368a:	220c      	movs	r2, #12
 800368c:	5ea3      	ldrsh	r3, [r4, r2]
 800368e:	2001      	movs	r0, #1
 8003690:	001a      	movs	r2, r3
 8003692:	b299      	uxth	r1, r3
 8003694:	4002      	ands	r2, r0
 8003696:	4203      	tst	r3, r0
 8003698:	d00f      	beq.n	80036ba <__swsetup_r+0xd6>
 800369a:	2200      	movs	r2, #0
 800369c:	60a2      	str	r2, [r4, #8]
 800369e:	6962      	ldr	r2, [r4, #20]
 80036a0:	4252      	negs	r2, r2
 80036a2:	61a2      	str	r2, [r4, #24]
 80036a4:	2000      	movs	r0, #0
 80036a6:	6922      	ldr	r2, [r4, #16]
 80036a8:	4282      	cmp	r2, r0
 80036aa:	d1ba      	bne.n	8003622 <__swsetup_r+0x3e>
 80036ac:	060a      	lsls	r2, r1, #24
 80036ae:	d5b8      	bpl.n	8003622 <__swsetup_r+0x3e>
 80036b0:	2240      	movs	r2, #64	; 0x40
 80036b2:	4313      	orrs	r3, r2
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	3801      	subs	r0, #1
 80036b8:	e7b3      	b.n	8003622 <__swsetup_r+0x3e>
 80036ba:	0788      	lsls	r0, r1, #30
 80036bc:	d400      	bmi.n	80036c0 <__swsetup_r+0xdc>
 80036be:	6962      	ldr	r2, [r4, #20]
 80036c0:	60a2      	str	r2, [r4, #8]
 80036c2:	e7ef      	b.n	80036a4 <__swsetup_r+0xc0>
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	080045e8 	.word	0x080045e8
 80036cc:	08004608 	.word	0x08004608
 80036d0:	080045c8 	.word	0x080045c8

080036d4 <__sflush_r>:
 80036d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036d6:	898b      	ldrh	r3, [r1, #12]
 80036d8:	0005      	movs	r5, r0
 80036da:	000c      	movs	r4, r1
 80036dc:	071a      	lsls	r2, r3, #28
 80036de:	d45f      	bmi.n	80037a0 <__sflush_r+0xcc>
 80036e0:	684a      	ldr	r2, [r1, #4]
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	dc04      	bgt.n	80036f0 <__sflush_r+0x1c>
 80036e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	dc01      	bgt.n	80036f0 <__sflush_r+0x1c>
 80036ec:	2000      	movs	r0, #0
 80036ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80036f2:	2f00      	cmp	r7, #0
 80036f4:	d0fa      	beq.n	80036ec <__sflush_r+0x18>
 80036f6:	2200      	movs	r2, #0
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	682e      	ldr	r6, [r5, #0]
 80036fc:	602a      	str	r2, [r5, #0]
 80036fe:	001a      	movs	r2, r3
 8003700:	0149      	lsls	r1, r1, #5
 8003702:	400a      	ands	r2, r1
 8003704:	420b      	tst	r3, r1
 8003706:	d034      	beq.n	8003772 <__sflush_r+0x9e>
 8003708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	075b      	lsls	r3, r3, #29
 800370e:	d506      	bpl.n	800371e <__sflush_r+0x4a>
 8003710:	6863      	ldr	r3, [r4, #4]
 8003712:	1ac0      	subs	r0, r0, r3
 8003714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <__sflush_r+0x4a>
 800371a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800371c:	1ac0      	subs	r0, r0, r3
 800371e:	0002      	movs	r2, r0
 8003720:	6a21      	ldr	r1, [r4, #32]
 8003722:	2300      	movs	r3, #0
 8003724:	0028      	movs	r0, r5
 8003726:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003728:	47b8      	blx	r7
 800372a:	89a1      	ldrh	r1, [r4, #12]
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d106      	bne.n	800373e <__sflush_r+0x6a>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	2b1d      	cmp	r3, #29
 8003734:	d831      	bhi.n	800379a <__sflush_r+0xc6>
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <__sflush_r+0x114>)
 8003738:	40da      	lsrs	r2, r3
 800373a:	07d3      	lsls	r3, r2, #31
 800373c:	d52d      	bpl.n	800379a <__sflush_r+0xc6>
 800373e:	2300      	movs	r3, #0
 8003740:	6063      	str	r3, [r4, #4]
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	04cb      	lsls	r3, r1, #19
 8003748:	d505      	bpl.n	8003756 <__sflush_r+0x82>
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	d102      	bne.n	8003754 <__sflush_r+0x80>
 800374e:	682b      	ldr	r3, [r5, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d100      	bne.n	8003756 <__sflush_r+0x82>
 8003754:	6560      	str	r0, [r4, #84]	; 0x54
 8003756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003758:	602e      	str	r6, [r5, #0]
 800375a:	2900      	cmp	r1, #0
 800375c:	d0c6      	beq.n	80036ec <__sflush_r+0x18>
 800375e:	0023      	movs	r3, r4
 8003760:	3344      	adds	r3, #68	; 0x44
 8003762:	4299      	cmp	r1, r3
 8003764:	d002      	beq.n	800376c <__sflush_r+0x98>
 8003766:	0028      	movs	r0, r5
 8003768:	f000 f9fc 	bl	8003b64 <_free_r>
 800376c:	2000      	movs	r0, #0
 800376e:	6360      	str	r0, [r4, #52]	; 0x34
 8003770:	e7bd      	b.n	80036ee <__sflush_r+0x1a>
 8003772:	2301      	movs	r3, #1
 8003774:	0028      	movs	r0, r5
 8003776:	6a21      	ldr	r1, [r4, #32]
 8003778:	47b8      	blx	r7
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d1c5      	bne.n	800370a <__sflush_r+0x36>
 800377e:	682b      	ldr	r3, [r5, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0c2      	beq.n	800370a <__sflush_r+0x36>
 8003784:	2b1d      	cmp	r3, #29
 8003786:	d001      	beq.n	800378c <__sflush_r+0xb8>
 8003788:	2b16      	cmp	r3, #22
 800378a:	d101      	bne.n	8003790 <__sflush_r+0xbc>
 800378c:	602e      	str	r6, [r5, #0]
 800378e:	e7ad      	b.n	80036ec <__sflush_r+0x18>
 8003790:	2340      	movs	r3, #64	; 0x40
 8003792:	89a2      	ldrh	r2, [r4, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	e7a9      	b.n	80036ee <__sflush_r+0x1a>
 800379a:	2340      	movs	r3, #64	; 0x40
 800379c:	430b      	orrs	r3, r1
 800379e:	e7fa      	b.n	8003796 <__sflush_r+0xc2>
 80037a0:	690f      	ldr	r7, [r1, #16]
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	d0a2      	beq.n	80036ec <__sflush_r+0x18>
 80037a6:	680a      	ldr	r2, [r1, #0]
 80037a8:	600f      	str	r7, [r1, #0]
 80037aa:	1bd2      	subs	r2, r2, r7
 80037ac:	9201      	str	r2, [sp, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	079b      	lsls	r3, r3, #30
 80037b2:	d100      	bne.n	80037b6 <__sflush_r+0xe2>
 80037b4:	694a      	ldr	r2, [r1, #20]
 80037b6:	60a2      	str	r2, [r4, #8]
 80037b8:	9b01      	ldr	r3, [sp, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dc00      	bgt.n	80037c0 <__sflush_r+0xec>
 80037be:	e795      	b.n	80036ec <__sflush_r+0x18>
 80037c0:	003a      	movs	r2, r7
 80037c2:	0028      	movs	r0, r5
 80037c4:	9b01      	ldr	r3, [sp, #4]
 80037c6:	6a21      	ldr	r1, [r4, #32]
 80037c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037ca:	47b0      	blx	r6
 80037cc:	2800      	cmp	r0, #0
 80037ce:	dc06      	bgt.n	80037de <__sflush_r+0x10a>
 80037d0:	2340      	movs	r3, #64	; 0x40
 80037d2:	2001      	movs	r0, #1
 80037d4:	89a2      	ldrh	r2, [r4, #12]
 80037d6:	4240      	negs	r0, r0
 80037d8:	4313      	orrs	r3, r2
 80037da:	81a3      	strh	r3, [r4, #12]
 80037dc:	e787      	b.n	80036ee <__sflush_r+0x1a>
 80037de:	9b01      	ldr	r3, [sp, #4]
 80037e0:	183f      	adds	r7, r7, r0
 80037e2:	1a1b      	subs	r3, r3, r0
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	e7e7      	b.n	80037b8 <__sflush_r+0xe4>
 80037e8:	20400001 	.word	0x20400001

080037ec <_fflush_r>:
 80037ec:	690b      	ldr	r3, [r1, #16]
 80037ee:	b570      	push	{r4, r5, r6, lr}
 80037f0:	0005      	movs	r5, r0
 80037f2:	000c      	movs	r4, r1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <_fflush_r+0x12>
 80037f8:	2500      	movs	r5, #0
 80037fa:	0028      	movs	r0, r5
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	2800      	cmp	r0, #0
 8003800:	d004      	beq.n	800380c <_fflush_r+0x20>
 8003802:	6983      	ldr	r3, [r0, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <_fflush_r+0x20>
 8003808:	f000 f892 	bl	8003930 <__sinit>
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <_fflush_r+0x74>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d11b      	bne.n	800384a <_fflush_r+0x5e>
 8003812:	686c      	ldr	r4, [r5, #4]
 8003814:	220c      	movs	r2, #12
 8003816:	5ea3      	ldrsh	r3, [r4, r2]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ed      	beq.n	80037f8 <_fflush_r+0xc>
 800381c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800381e:	07d2      	lsls	r2, r2, #31
 8003820:	d404      	bmi.n	800382c <_fflush_r+0x40>
 8003822:	059b      	lsls	r3, r3, #22
 8003824:	d402      	bmi.n	800382c <_fflush_r+0x40>
 8003826:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003828:	f000 f923 	bl	8003a72 <__retarget_lock_acquire_recursive>
 800382c:	0028      	movs	r0, r5
 800382e:	0021      	movs	r1, r4
 8003830:	f7ff ff50 	bl	80036d4 <__sflush_r>
 8003834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003836:	0005      	movs	r5, r0
 8003838:	07db      	lsls	r3, r3, #31
 800383a:	d4de      	bmi.n	80037fa <_fflush_r+0xe>
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	059b      	lsls	r3, r3, #22
 8003840:	d4db      	bmi.n	80037fa <_fflush_r+0xe>
 8003842:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003844:	f000 f916 	bl	8003a74 <__retarget_lock_release_recursive>
 8003848:	e7d7      	b.n	80037fa <_fflush_r+0xe>
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <_fflush_r+0x78>)
 800384c:	429c      	cmp	r4, r3
 800384e:	d101      	bne.n	8003854 <_fflush_r+0x68>
 8003850:	68ac      	ldr	r4, [r5, #8]
 8003852:	e7df      	b.n	8003814 <_fflush_r+0x28>
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <_fflush_r+0x7c>)
 8003856:	429c      	cmp	r4, r3
 8003858:	d1dc      	bne.n	8003814 <_fflush_r+0x28>
 800385a:	68ec      	ldr	r4, [r5, #12]
 800385c:	e7da      	b.n	8003814 <_fflush_r+0x28>
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	080045e8 	.word	0x080045e8
 8003864:	08004608 	.word	0x08004608
 8003868:	080045c8 	.word	0x080045c8

0800386c <std>:
 800386c:	2300      	movs	r3, #0
 800386e:	b510      	push	{r4, lr}
 8003870:	0004      	movs	r4, r0
 8003872:	6003      	str	r3, [r0, #0]
 8003874:	6043      	str	r3, [r0, #4]
 8003876:	6083      	str	r3, [r0, #8]
 8003878:	8181      	strh	r1, [r0, #12]
 800387a:	6643      	str	r3, [r0, #100]	; 0x64
 800387c:	0019      	movs	r1, r3
 800387e:	81c2      	strh	r2, [r0, #14]
 8003880:	6103      	str	r3, [r0, #16]
 8003882:	6143      	str	r3, [r0, #20]
 8003884:	6183      	str	r3, [r0, #24]
 8003886:	2208      	movs	r2, #8
 8003888:	305c      	adds	r0, #92	; 0x5c
 800388a:	f7ff fcee 	bl	800326a <memset>
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <std+0x38>)
 8003890:	6224      	str	r4, [r4, #32]
 8003892:	6263      	str	r3, [r4, #36]	; 0x24
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <std+0x3c>)
 8003896:	62a3      	str	r3, [r4, #40]	; 0x28
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <std+0x40>)
 800389a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <std+0x44>)
 800389e:	6323      	str	r3, [r4, #48]	; 0x30
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	08004315 	.word	0x08004315
 80038a8:	0800433d 	.word	0x0800433d
 80038ac:	08004375 	.word	0x08004375
 80038b0:	080043a1 	.word	0x080043a1

080038b4 <_cleanup_r>:
 80038b4:	b510      	push	{r4, lr}
 80038b6:	4902      	ldr	r1, [pc, #8]	; (80038c0 <_cleanup_r+0xc>)
 80038b8:	f000 f8ba 	bl	8003a30 <_fwalk_reent>
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	080037ed 	.word	0x080037ed

080038c4 <__sfmoreglue>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	2568      	movs	r5, #104	; 0x68
 80038c8:	1e4a      	subs	r2, r1, #1
 80038ca:	4355      	muls	r5, r2
 80038cc:	000e      	movs	r6, r1
 80038ce:	0029      	movs	r1, r5
 80038d0:	3174      	adds	r1, #116	; 0x74
 80038d2:	f000 f9b3 	bl	8003c3c <_malloc_r>
 80038d6:	1e04      	subs	r4, r0, #0
 80038d8:	d008      	beq.n	80038ec <__sfmoreglue+0x28>
 80038da:	2100      	movs	r1, #0
 80038dc:	002a      	movs	r2, r5
 80038de:	6001      	str	r1, [r0, #0]
 80038e0:	6046      	str	r6, [r0, #4]
 80038e2:	300c      	adds	r0, #12
 80038e4:	60a0      	str	r0, [r4, #8]
 80038e6:	3268      	adds	r2, #104	; 0x68
 80038e8:	f7ff fcbf 	bl	800326a <memset>
 80038ec:	0020      	movs	r0, r4
 80038ee:	bd70      	pop	{r4, r5, r6, pc}

080038f0 <__sfp_lock_acquire>:
 80038f0:	b510      	push	{r4, lr}
 80038f2:	4802      	ldr	r0, [pc, #8]	; (80038fc <__sfp_lock_acquire+0xc>)
 80038f4:	f000 f8bd 	bl	8003a72 <__retarget_lock_acquire_recursive>
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	200005dd 	.word	0x200005dd

08003900 <__sfp_lock_release>:
 8003900:	b510      	push	{r4, lr}
 8003902:	4802      	ldr	r0, [pc, #8]	; (800390c <__sfp_lock_release+0xc>)
 8003904:	f000 f8b6 	bl	8003a74 <__retarget_lock_release_recursive>
 8003908:	bd10      	pop	{r4, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	200005dd 	.word	0x200005dd

08003910 <__sinit_lock_acquire>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4802      	ldr	r0, [pc, #8]	; (800391c <__sinit_lock_acquire+0xc>)
 8003914:	f000 f8ad 	bl	8003a72 <__retarget_lock_acquire_recursive>
 8003918:	bd10      	pop	{r4, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	200005de 	.word	0x200005de

08003920 <__sinit_lock_release>:
 8003920:	b510      	push	{r4, lr}
 8003922:	4802      	ldr	r0, [pc, #8]	; (800392c <__sinit_lock_release+0xc>)
 8003924:	f000 f8a6 	bl	8003a74 <__retarget_lock_release_recursive>
 8003928:	bd10      	pop	{r4, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	200005de 	.word	0x200005de

08003930 <__sinit>:
 8003930:	b513      	push	{r0, r1, r4, lr}
 8003932:	0004      	movs	r4, r0
 8003934:	f7ff ffec 	bl	8003910 <__sinit_lock_acquire>
 8003938:	69a3      	ldr	r3, [r4, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <__sinit+0x14>
 800393e:	f7ff ffef 	bl	8003920 <__sinit_lock_release>
 8003942:	bd13      	pop	{r0, r1, r4, pc}
 8003944:	64a3      	str	r3, [r4, #72]	; 0x48
 8003946:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003948:	6523      	str	r3, [r4, #80]	; 0x50
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <__sinit+0x68>)
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <__sinit+0x6c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	62a2      	str	r2, [r4, #40]	; 0x28
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	42a3      	cmp	r3, r4
 8003956:	d101      	bne.n	800395c <__sinit+0x2c>
 8003958:	2301      	movs	r3, #1
 800395a:	61a3      	str	r3, [r4, #24]
 800395c:	0020      	movs	r0, r4
 800395e:	f000 f81f 	bl	80039a0 <__sfp>
 8003962:	6060      	str	r0, [r4, #4]
 8003964:	0020      	movs	r0, r4
 8003966:	f000 f81b 	bl	80039a0 <__sfp>
 800396a:	60a0      	str	r0, [r4, #8]
 800396c:	0020      	movs	r0, r4
 800396e:	f000 f817 	bl	80039a0 <__sfp>
 8003972:	2200      	movs	r2, #0
 8003974:	2104      	movs	r1, #4
 8003976:	60e0      	str	r0, [r4, #12]
 8003978:	6860      	ldr	r0, [r4, #4]
 800397a:	f7ff ff77 	bl	800386c <std>
 800397e:	2201      	movs	r2, #1
 8003980:	2109      	movs	r1, #9
 8003982:	68a0      	ldr	r0, [r4, #8]
 8003984:	f7ff ff72 	bl	800386c <std>
 8003988:	2202      	movs	r2, #2
 800398a:	2112      	movs	r1, #18
 800398c:	68e0      	ldr	r0, [r4, #12]
 800398e:	f7ff ff6d 	bl	800386c <std>
 8003992:	2301      	movs	r3, #1
 8003994:	61a3      	str	r3, [r4, #24]
 8003996:	e7d2      	b.n	800393e <__sinit+0xe>
 8003998:	080045c4 	.word	0x080045c4
 800399c:	080038b5 	.word	0x080038b5

080039a0 <__sfp>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	0007      	movs	r7, r0
 80039a4:	f7ff ffa4 	bl	80038f0 <__sfp_lock_acquire>
 80039a8:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <__sfp+0x88>)
 80039aa:	681e      	ldr	r6, [r3, #0]
 80039ac:	69b3      	ldr	r3, [r6, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <__sfp+0x18>
 80039b2:	0030      	movs	r0, r6
 80039b4:	f7ff ffbc 	bl	8003930 <__sinit>
 80039b8:	3648      	adds	r6, #72	; 0x48
 80039ba:	68b4      	ldr	r4, [r6, #8]
 80039bc:	6873      	ldr	r3, [r6, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	d504      	bpl.n	80039cc <__sfp+0x2c>
 80039c2:	6833      	ldr	r3, [r6, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d022      	beq.n	8003a0e <__sfp+0x6e>
 80039c8:	6836      	ldr	r6, [r6, #0]
 80039ca:	e7f6      	b.n	80039ba <__sfp+0x1a>
 80039cc:	220c      	movs	r2, #12
 80039ce:	5ea5      	ldrsh	r5, [r4, r2]
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	d11a      	bne.n	8003a0a <__sfp+0x6a>
 80039d4:	0020      	movs	r0, r4
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <__sfp+0x8c>)
 80039d8:	3058      	adds	r0, #88	; 0x58
 80039da:	60e3      	str	r3, [r4, #12]
 80039dc:	6665      	str	r5, [r4, #100]	; 0x64
 80039de:	f000 f847 	bl	8003a70 <__retarget_lock_init_recursive>
 80039e2:	f7ff ff8d 	bl	8003900 <__sfp_lock_release>
 80039e6:	0020      	movs	r0, r4
 80039e8:	2208      	movs	r2, #8
 80039ea:	0029      	movs	r1, r5
 80039ec:	6025      	str	r5, [r4, #0]
 80039ee:	60a5      	str	r5, [r4, #8]
 80039f0:	6065      	str	r5, [r4, #4]
 80039f2:	6125      	str	r5, [r4, #16]
 80039f4:	6165      	str	r5, [r4, #20]
 80039f6:	61a5      	str	r5, [r4, #24]
 80039f8:	305c      	adds	r0, #92	; 0x5c
 80039fa:	f7ff fc36 	bl	800326a <memset>
 80039fe:	6365      	str	r5, [r4, #52]	; 0x34
 8003a00:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a02:	64a5      	str	r5, [r4, #72]	; 0x48
 8003a04:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003a06:	0020      	movs	r0, r4
 8003a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a0a:	3468      	adds	r4, #104	; 0x68
 8003a0c:	e7d7      	b.n	80039be <__sfp+0x1e>
 8003a0e:	2104      	movs	r1, #4
 8003a10:	0038      	movs	r0, r7
 8003a12:	f7ff ff57 	bl	80038c4 <__sfmoreglue>
 8003a16:	1e04      	subs	r4, r0, #0
 8003a18:	6030      	str	r0, [r6, #0]
 8003a1a:	d1d5      	bne.n	80039c8 <__sfp+0x28>
 8003a1c:	f7ff ff70 	bl	8003900 <__sfp_lock_release>
 8003a20:	230c      	movs	r3, #12
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	e7ef      	b.n	8003a06 <__sfp+0x66>
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	080045c4 	.word	0x080045c4
 8003a2c:	ffff0001 	.word	0xffff0001

08003a30 <_fwalk_reent>:
 8003a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a32:	0004      	movs	r4, r0
 8003a34:	0006      	movs	r6, r0
 8003a36:	2700      	movs	r7, #0
 8003a38:	9101      	str	r1, [sp, #4]
 8003a3a:	3448      	adds	r4, #72	; 0x48
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	68a5      	ldr	r5, [r4, #8]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	9b00      	ldr	r3, [sp, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	d504      	bpl.n	8003a54 <_fwalk_reent+0x24>
 8003a4a:	6824      	ldr	r4, [r4, #0]
 8003a4c:	2c00      	cmp	r4, #0
 8003a4e:	d1f5      	bne.n	8003a3c <_fwalk_reent+0xc>
 8003a50:	0038      	movs	r0, r7
 8003a52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a54:	89ab      	ldrh	r3, [r5, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d908      	bls.n	8003a6c <_fwalk_reent+0x3c>
 8003a5a:	220e      	movs	r2, #14
 8003a5c:	5eab      	ldrsh	r3, [r5, r2]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	d004      	beq.n	8003a6c <_fwalk_reent+0x3c>
 8003a62:	0029      	movs	r1, r5
 8003a64:	0030      	movs	r0, r6
 8003a66:	9b01      	ldr	r3, [sp, #4]
 8003a68:	4798      	blx	r3
 8003a6a:	4307      	orrs	r7, r0
 8003a6c:	3568      	adds	r5, #104	; 0x68
 8003a6e:	e7e8      	b.n	8003a42 <_fwalk_reent+0x12>

08003a70 <__retarget_lock_init_recursive>:
 8003a70:	4770      	bx	lr

08003a72 <__retarget_lock_acquire_recursive>:
 8003a72:	4770      	bx	lr

08003a74 <__retarget_lock_release_recursive>:
 8003a74:	4770      	bx	lr
	...

08003a78 <__swhatbuf_r>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	000e      	movs	r6, r1
 8003a7c:	001d      	movs	r5, r3
 8003a7e:	230e      	movs	r3, #14
 8003a80:	5ec9      	ldrsh	r1, [r1, r3]
 8003a82:	0014      	movs	r4, r2
 8003a84:	b096      	sub	sp, #88	; 0x58
 8003a86:	2900      	cmp	r1, #0
 8003a88:	da08      	bge.n	8003a9c <__swhatbuf_r+0x24>
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	5eb3      	ldrsh	r3, [r6, r2]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	602a      	str	r2, [r5, #0]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	d411      	bmi.n	8003aba <__swhatbuf_r+0x42>
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	e00f      	b.n	8003abc <__swhatbuf_r+0x44>
 8003a9c:	466a      	mov	r2, sp
 8003a9e:	f000 fcab 	bl	80043f8 <_fstat_r>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	dbf1      	blt.n	8003a8a <__swhatbuf_r+0x12>
 8003aa6:	23f0      	movs	r3, #240	; 0xf0
 8003aa8:	9901      	ldr	r1, [sp, #4]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	4019      	ands	r1, r3
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <__swhatbuf_r+0x4c>)
 8003ab0:	18c9      	adds	r1, r1, r3
 8003ab2:	424b      	negs	r3, r1
 8003ab4:	4159      	adcs	r1, r3
 8003ab6:	6029      	str	r1, [r5, #0]
 8003ab8:	e7ed      	b.n	8003a96 <__swhatbuf_r+0x1e>
 8003aba:	2340      	movs	r3, #64	; 0x40
 8003abc:	2000      	movs	r0, #0
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	b016      	add	sp, #88	; 0x58
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	ffffe000 	.word	0xffffe000

08003ac8 <__smakebuf_r>:
 8003ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aca:	2602      	movs	r6, #2
 8003acc:	898b      	ldrh	r3, [r1, #12]
 8003ace:	0005      	movs	r5, r0
 8003ad0:	000c      	movs	r4, r1
 8003ad2:	4233      	tst	r3, r6
 8003ad4:	d006      	beq.n	8003ae4 <__smakebuf_r+0x1c>
 8003ad6:	0023      	movs	r3, r4
 8003ad8:	3347      	adds	r3, #71	; 0x47
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	6123      	str	r3, [r4, #16]
 8003ade:	2301      	movs	r3, #1
 8003ae0:	6163      	str	r3, [r4, #20]
 8003ae2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003ae4:	466a      	mov	r2, sp
 8003ae6:	ab01      	add	r3, sp, #4
 8003ae8:	f7ff ffc6 	bl	8003a78 <__swhatbuf_r>
 8003aec:	9900      	ldr	r1, [sp, #0]
 8003aee:	0007      	movs	r7, r0
 8003af0:	0028      	movs	r0, r5
 8003af2:	f000 f8a3 	bl	8003c3c <_malloc_r>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d108      	bne.n	8003b0c <__smakebuf_r+0x44>
 8003afa:	220c      	movs	r2, #12
 8003afc:	5ea3      	ldrsh	r3, [r4, r2]
 8003afe:	059a      	lsls	r2, r3, #22
 8003b00:	d4ef      	bmi.n	8003ae2 <__smakebuf_r+0x1a>
 8003b02:	2203      	movs	r2, #3
 8003b04:	4393      	bics	r3, r2
 8003b06:	431e      	orrs	r6, r3
 8003b08:	81a6      	strh	r6, [r4, #12]
 8003b0a:	e7e4      	b.n	8003ad6 <__smakebuf_r+0xe>
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <__smakebuf_r+0x84>)
 8003b0e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	89a2      	ldrh	r2, [r4, #12]
 8003b14:	6020      	str	r0, [r4, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	9b00      	ldr	r3, [sp, #0]
 8003b1c:	6120      	str	r0, [r4, #16]
 8003b1e:	6163      	str	r3, [r4, #20]
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <__smakebuf_r+0x7a>
 8003b26:	0028      	movs	r0, r5
 8003b28:	230e      	movs	r3, #14
 8003b2a:	5ee1      	ldrsh	r1, [r4, r3]
 8003b2c:	f000 fc76 	bl	800441c <_isatty_r>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d006      	beq.n	8003b42 <__smakebuf_r+0x7a>
 8003b34:	2203      	movs	r2, #3
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	4393      	bics	r3, r2
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	89a0      	ldrh	r0, [r4, #12]
 8003b44:	4307      	orrs	r7, r0
 8003b46:	81a7      	strh	r7, [r4, #12]
 8003b48:	e7cb      	b.n	8003ae2 <__smakebuf_r+0x1a>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	080038b5 	.word	0x080038b5

08003b50 <malloc>:
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <malloc+0x10>)
 8003b54:	0001      	movs	r1, r0
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	f000 f870 	bl	8003c3c <_malloc_r>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	2000000c 	.word	0x2000000c

08003b64 <_free_r>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	0005      	movs	r5, r0
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d010      	beq.n	8003b8e <_free_r+0x2a>
 8003b6c:	1f0c      	subs	r4, r1, #4
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da00      	bge.n	8003b76 <_free_r+0x12>
 8003b74:	18e4      	adds	r4, r4, r3
 8003b76:	0028      	movs	r0, r5
 8003b78:	f000 fc82 	bl	8004480 <__malloc_lock>
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <_free_r+0x90>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <_free_r+0x2c>
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	6014      	str	r4, [r2, #0]
 8003b88:	0028      	movs	r0, r5
 8003b8a:	f000 fc81 	bl	8004490 <__malloc_unlock>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	d908      	bls.n	8003ba6 <_free_r+0x42>
 8003b94:	6821      	ldr	r1, [r4, #0]
 8003b96:	1860      	adds	r0, r4, r1
 8003b98:	4283      	cmp	r3, r0
 8003b9a:	d1f3      	bne.n	8003b84 <_free_r+0x20>
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	1841      	adds	r1, r0, r1
 8003ba2:	6021      	str	r1, [r4, #0]
 8003ba4:	e7ee      	b.n	8003b84 <_free_r+0x20>
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <_free_r+0x4e>
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	d9f9      	bls.n	8003ba6 <_free_r+0x42>
 8003bb2:	6811      	ldr	r1, [r2, #0]
 8003bb4:	1850      	adds	r0, r2, r1
 8003bb6:	42a0      	cmp	r0, r4
 8003bb8:	d10b      	bne.n	8003bd2 <_free_r+0x6e>
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	1809      	adds	r1, r1, r0
 8003bbe:	1850      	adds	r0, r2, r1
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	4283      	cmp	r3, r0
 8003bc4:	d1e0      	bne.n	8003b88 <_free_r+0x24>
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	1841      	adds	r1, r0, r1
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	6053      	str	r3, [r2, #4]
 8003bd0:	e7da      	b.n	8003b88 <_free_r+0x24>
 8003bd2:	42a0      	cmp	r0, r4
 8003bd4:	d902      	bls.n	8003bdc <_free_r+0x78>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	e7d5      	b.n	8003b88 <_free_r+0x24>
 8003bdc:	6821      	ldr	r1, [r4, #0]
 8003bde:	1860      	adds	r0, r4, r1
 8003be0:	4283      	cmp	r3, r0
 8003be2:	d103      	bne.n	8003bec <_free_r+0x88>
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	1841      	adds	r1, r0, r1
 8003bea:	6021      	str	r1, [r4, #0]
 8003bec:	6063      	str	r3, [r4, #4]
 8003bee:	6054      	str	r4, [r2, #4]
 8003bf0:	e7ca      	b.n	8003b88 <_free_r+0x24>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	200005e0 	.word	0x200005e0

08003bf8 <sbrk_aligned>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4e0f      	ldr	r6, [pc, #60]	; (8003c38 <sbrk_aligned+0x40>)
 8003bfc:	000d      	movs	r5, r1
 8003bfe:	6831      	ldr	r1, [r6, #0]
 8003c00:	0004      	movs	r4, r0
 8003c02:	2900      	cmp	r1, #0
 8003c04:	d102      	bne.n	8003c0c <sbrk_aligned+0x14>
 8003c06:	f000 fb73 	bl	80042f0 <_sbrk_r>
 8003c0a:	6030      	str	r0, [r6, #0]
 8003c0c:	0029      	movs	r1, r5
 8003c0e:	0020      	movs	r0, r4
 8003c10:	f000 fb6e 	bl	80042f0 <_sbrk_r>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d00a      	beq.n	8003c2e <sbrk_aligned+0x36>
 8003c18:	2303      	movs	r3, #3
 8003c1a:	1cc5      	adds	r5, r0, #3
 8003c1c:	439d      	bics	r5, r3
 8003c1e:	42a8      	cmp	r0, r5
 8003c20:	d007      	beq.n	8003c32 <sbrk_aligned+0x3a>
 8003c22:	1a29      	subs	r1, r5, r0
 8003c24:	0020      	movs	r0, r4
 8003c26:	f000 fb63 	bl	80042f0 <_sbrk_r>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	d101      	bne.n	8003c32 <sbrk_aligned+0x3a>
 8003c2e:	2501      	movs	r5, #1
 8003c30:	426d      	negs	r5, r5
 8003c32:	0028      	movs	r0, r5
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	200005e4 	.word	0x200005e4

08003c3c <_malloc_r>:
 8003c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3e:	2203      	movs	r2, #3
 8003c40:	1ccb      	adds	r3, r1, #3
 8003c42:	4393      	bics	r3, r2
 8003c44:	3308      	adds	r3, #8
 8003c46:	0006      	movs	r6, r0
 8003c48:	001f      	movs	r7, r3
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d232      	bcs.n	8003cb4 <_malloc_r+0x78>
 8003c4e:	270c      	movs	r7, #12
 8003c50:	42b9      	cmp	r1, r7
 8003c52:	d831      	bhi.n	8003cb8 <_malloc_r+0x7c>
 8003c54:	0030      	movs	r0, r6
 8003c56:	f000 fc13 	bl	8004480 <__malloc_lock>
 8003c5a:	4d32      	ldr	r5, [pc, #200]	; (8003d24 <_malloc_r+0xe8>)
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	001c      	movs	r4, r3
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	d12e      	bne.n	8003cc2 <_malloc_r+0x86>
 8003c64:	0039      	movs	r1, r7
 8003c66:	0030      	movs	r0, r6
 8003c68:	f7ff ffc6 	bl	8003bf8 <sbrk_aligned>
 8003c6c:	0004      	movs	r4, r0
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	d11e      	bne.n	8003cb0 <_malloc_r+0x74>
 8003c72:	682c      	ldr	r4, [r5, #0]
 8003c74:	0025      	movs	r5, r4
 8003c76:	2d00      	cmp	r5, #0
 8003c78:	d14a      	bne.n	8003d10 <_malloc_r+0xd4>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0029      	movs	r1, r5
 8003c7e:	18e3      	adds	r3, r4, r3
 8003c80:	0030      	movs	r0, r6
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	f000 fb34 	bl	80042f0 <_sbrk_r>
 8003c88:	9b01      	ldr	r3, [sp, #4]
 8003c8a:	4283      	cmp	r3, r0
 8003c8c:	d143      	bne.n	8003d16 <_malloc_r+0xda>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	3703      	adds	r7, #3
 8003c92:	1aff      	subs	r7, r7, r3
 8003c94:	2303      	movs	r3, #3
 8003c96:	439f      	bics	r7, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	2f0c      	cmp	r7, #12
 8003c9c:	d200      	bcs.n	8003ca0 <_malloc_r+0x64>
 8003c9e:	270c      	movs	r7, #12
 8003ca0:	0039      	movs	r1, r7
 8003ca2:	0030      	movs	r0, r6
 8003ca4:	f7ff ffa8 	bl	8003bf8 <sbrk_aligned>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d034      	beq.n	8003d16 <_malloc_r+0xda>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	19df      	adds	r7, r3, r7
 8003cb0:	6027      	str	r7, [r4, #0]
 8003cb2:	e013      	b.n	8003cdc <_malloc_r+0xa0>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	dacb      	bge.n	8003c50 <_malloc_r+0x14>
 8003cb8:	230c      	movs	r3, #12
 8003cba:	2500      	movs	r5, #0
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	0028      	movs	r0, r5
 8003cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	1bd1      	subs	r1, r2, r7
 8003cc6:	d420      	bmi.n	8003d0a <_malloc_r+0xce>
 8003cc8:	290b      	cmp	r1, #11
 8003cca:	d917      	bls.n	8003cfc <_malloc_r+0xc0>
 8003ccc:	19e2      	adds	r2, r4, r7
 8003cce:	6027      	str	r7, [r4, #0]
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	d111      	bne.n	8003cf8 <_malloc_r+0xbc>
 8003cd4:	602a      	str	r2, [r5, #0]
 8003cd6:	6863      	ldr	r3, [r4, #4]
 8003cd8:	6011      	str	r1, [r2, #0]
 8003cda:	6053      	str	r3, [r2, #4]
 8003cdc:	0030      	movs	r0, r6
 8003cde:	0025      	movs	r5, r4
 8003ce0:	f000 fbd6 	bl	8004490 <__malloc_unlock>
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	350b      	adds	r5, #11
 8003ce8:	1d23      	adds	r3, r4, #4
 8003cea:	4395      	bics	r5, r2
 8003cec:	1aea      	subs	r2, r5, r3
 8003cee:	429d      	cmp	r5, r3
 8003cf0:	d0e5      	beq.n	8003cbe <_malloc_r+0x82>
 8003cf2:	1b5b      	subs	r3, r3, r5
 8003cf4:	50a3      	str	r3, [r4, r2]
 8003cf6:	e7e2      	b.n	8003cbe <_malloc_r+0x82>
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	e7ec      	b.n	8003cd6 <_malloc_r+0x9a>
 8003cfc:	6862      	ldr	r2, [r4, #4]
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	d101      	bne.n	8003d06 <_malloc_r+0xca>
 8003d02:	602a      	str	r2, [r5, #0]
 8003d04:	e7ea      	b.n	8003cdc <_malloc_r+0xa0>
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	e7e8      	b.n	8003cdc <_malloc_r+0xa0>
 8003d0a:	0023      	movs	r3, r4
 8003d0c:	6864      	ldr	r4, [r4, #4]
 8003d0e:	e7a7      	b.n	8003c60 <_malloc_r+0x24>
 8003d10:	002c      	movs	r4, r5
 8003d12:	686d      	ldr	r5, [r5, #4]
 8003d14:	e7af      	b.n	8003c76 <_malloc_r+0x3a>
 8003d16:	230c      	movs	r3, #12
 8003d18:	0030      	movs	r0, r6
 8003d1a:	6033      	str	r3, [r6, #0]
 8003d1c:	f000 fbb8 	bl	8004490 <__malloc_unlock>
 8003d20:	e7cd      	b.n	8003cbe <_malloc_r+0x82>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	200005e0 	.word	0x200005e0

08003d28 <__sfputc_r>:
 8003d28:	6893      	ldr	r3, [r2, #8]
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da04      	bge.n	8003d3e <__sfputc_r+0x16>
 8003d34:	6994      	ldr	r4, [r2, #24]
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	db07      	blt.n	8003d4a <__sfputc_r+0x22>
 8003d3a:	290a      	cmp	r1, #10
 8003d3c:	d005      	beq.n	8003d4a <__sfputc_r+0x22>
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	1c58      	adds	r0, r3, #1
 8003d42:	6010      	str	r0, [r2, #0]
 8003d44:	7019      	strb	r1, [r3, #0]
 8003d46:	0008      	movs	r0, r1
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	f7ff fbf5 	bl	8003538 <__swbuf_r>
 8003d4e:	0001      	movs	r1, r0
 8003d50:	e7f9      	b.n	8003d46 <__sfputc_r+0x1e>

08003d52 <__sfputs_r>:
 8003d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d54:	0006      	movs	r6, r0
 8003d56:	000f      	movs	r7, r1
 8003d58:	0014      	movs	r4, r2
 8003d5a:	18d5      	adds	r5, r2, r3
 8003d5c:	42ac      	cmp	r4, r5
 8003d5e:	d101      	bne.n	8003d64 <__sfputs_r+0x12>
 8003d60:	2000      	movs	r0, #0
 8003d62:	e007      	b.n	8003d74 <__sfputs_r+0x22>
 8003d64:	7821      	ldrb	r1, [r4, #0]
 8003d66:	003a      	movs	r2, r7
 8003d68:	0030      	movs	r0, r6
 8003d6a:	f7ff ffdd 	bl	8003d28 <__sfputc_r>
 8003d6e:	3401      	adds	r4, #1
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d1f3      	bne.n	8003d5c <__sfputs_r+0xa>
 8003d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d78 <_vfiprintf_r>:
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	b0a1      	sub	sp, #132	; 0x84
 8003d7c:	0006      	movs	r6, r0
 8003d7e:	000c      	movs	r4, r1
 8003d80:	001f      	movs	r7, r3
 8003d82:	9203      	str	r2, [sp, #12]
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d004      	beq.n	8003d92 <_vfiprintf_r+0x1a>
 8003d88:	6983      	ldr	r3, [r0, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <_vfiprintf_r+0x1a>
 8003d8e:	f7ff fdcf 	bl	8003930 <__sinit>
 8003d92:	4b8e      	ldr	r3, [pc, #568]	; (8003fcc <_vfiprintf_r+0x254>)
 8003d94:	429c      	cmp	r4, r3
 8003d96:	d11c      	bne.n	8003dd2 <_vfiprintf_r+0x5a>
 8003d98:	6874      	ldr	r4, [r6, #4]
 8003d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d405      	bmi.n	8003dac <_vfiprintf_r+0x34>
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	059b      	lsls	r3, r3, #22
 8003da4:	d402      	bmi.n	8003dac <_vfiprintf_r+0x34>
 8003da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003da8:	f7ff fe63 	bl	8003a72 <__retarget_lock_acquire_recursive>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	071b      	lsls	r3, r3, #28
 8003db0:	d502      	bpl.n	8003db8 <_vfiprintf_r+0x40>
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <_vfiprintf_r+0x7c>
 8003db8:	0021      	movs	r1, r4
 8003dba:	0030      	movs	r0, r6
 8003dbc:	f7ff fc12 	bl	80035e4 <__swsetup_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d017      	beq.n	8003df4 <_vfiprintf_r+0x7c>
 8003dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dc6:	07db      	lsls	r3, r3, #31
 8003dc8:	d50d      	bpl.n	8003de6 <_vfiprintf_r+0x6e>
 8003dca:	2001      	movs	r0, #1
 8003dcc:	4240      	negs	r0, r0
 8003dce:	b021      	add	sp, #132	; 0x84
 8003dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd2:	4b7f      	ldr	r3, [pc, #508]	; (8003fd0 <_vfiprintf_r+0x258>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d101      	bne.n	8003ddc <_vfiprintf_r+0x64>
 8003dd8:	68b4      	ldr	r4, [r6, #8]
 8003dda:	e7de      	b.n	8003d9a <_vfiprintf_r+0x22>
 8003ddc:	4b7d      	ldr	r3, [pc, #500]	; (8003fd4 <_vfiprintf_r+0x25c>)
 8003dde:	429c      	cmp	r4, r3
 8003de0:	d1db      	bne.n	8003d9a <_vfiprintf_r+0x22>
 8003de2:	68f4      	ldr	r4, [r6, #12]
 8003de4:	e7d9      	b.n	8003d9a <_vfiprintf_r+0x22>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	059b      	lsls	r3, r3, #22
 8003dea:	d4ee      	bmi.n	8003dca <_vfiprintf_r+0x52>
 8003dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dee:	f7ff fe41 	bl	8003a74 <__retarget_lock_release_recursive>
 8003df2:	e7ea      	b.n	8003dca <_vfiprintf_r+0x52>
 8003df4:	2300      	movs	r3, #0
 8003df6:	ad08      	add	r5, sp, #32
 8003df8:	616b      	str	r3, [r5, #20]
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	766b      	strb	r3, [r5, #25]
 8003dfe:	3310      	adds	r3, #16
 8003e00:	76ab      	strb	r3, [r5, #26]
 8003e02:	9707      	str	r7, [sp, #28]
 8003e04:	9f03      	ldr	r7, [sp, #12]
 8003e06:	783b      	ldrb	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <_vfiprintf_r+0x98>
 8003e0c:	2b25      	cmp	r3, #37	; 0x25
 8003e0e:	d14e      	bne.n	8003eae <_vfiprintf_r+0x136>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	1afb      	subs	r3, r7, r3
 8003e14:	9305      	str	r3, [sp, #20]
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	429f      	cmp	r7, r3
 8003e1a:	d00d      	beq.n	8003e38 <_vfiprintf_r+0xc0>
 8003e1c:	9b05      	ldr	r3, [sp, #20]
 8003e1e:	0021      	movs	r1, r4
 8003e20:	0030      	movs	r0, r6
 8003e22:	9a03      	ldr	r2, [sp, #12]
 8003e24:	f7ff ff95 	bl	8003d52 <__sfputs_r>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d100      	bne.n	8003e2e <_vfiprintf_r+0xb6>
 8003e2c:	e0b5      	b.n	8003f9a <_vfiprintf_r+0x222>
 8003e2e:	696a      	ldr	r2, [r5, #20]
 8003e30:	9b05      	ldr	r3, [sp, #20]
 8003e32:	4694      	mov	ip, r2
 8003e34:	4463      	add	r3, ip
 8003e36:	616b      	str	r3, [r5, #20]
 8003e38:	783b      	ldrb	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d100      	bne.n	8003e40 <_vfiprintf_r+0xc8>
 8003e3e:	e0ac      	b.n	8003f9a <_vfiprintf_r+0x222>
 8003e40:	2201      	movs	r2, #1
 8003e42:	1c7b      	adds	r3, r7, #1
 8003e44:	9303      	str	r3, [sp, #12]
 8003e46:	2300      	movs	r3, #0
 8003e48:	4252      	negs	r2, r2
 8003e4a:	606a      	str	r2, [r5, #4]
 8003e4c:	a904      	add	r1, sp, #16
 8003e4e:	3254      	adds	r2, #84	; 0x54
 8003e50:	1852      	adds	r2, r2, r1
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	60eb      	str	r3, [r5, #12]
 8003e56:	60ab      	str	r3, [r5, #8]
 8003e58:	7013      	strb	r3, [r2, #0]
 8003e5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	2205      	movs	r2, #5
 8003e60:	7819      	ldrb	r1, [r3, #0]
 8003e62:	485d      	ldr	r0, [pc, #372]	; (8003fd8 <_vfiprintf_r+0x260>)
 8003e64:	f000 fb00 	bl	8004468 <memchr>
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	1c5f      	adds	r7, r3, #1
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d120      	bne.n	8003eb2 <_vfiprintf_r+0x13a>
 8003e70:	682a      	ldr	r2, [r5, #0]
 8003e72:	06d3      	lsls	r3, r2, #27
 8003e74:	d504      	bpl.n	8003e80 <_vfiprintf_r+0x108>
 8003e76:	2353      	movs	r3, #83	; 0x53
 8003e78:	a904      	add	r1, sp, #16
 8003e7a:	185b      	adds	r3, r3, r1
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	7019      	strb	r1, [r3, #0]
 8003e80:	0713      	lsls	r3, r2, #28
 8003e82:	d504      	bpl.n	8003e8e <_vfiprintf_r+0x116>
 8003e84:	2353      	movs	r3, #83	; 0x53
 8003e86:	a904      	add	r1, sp, #16
 8003e88:	185b      	adds	r3, r3, r1
 8003e8a:	212b      	movs	r1, #43	; 0x2b
 8003e8c:	7019      	strb	r1, [r3, #0]
 8003e8e:	9b03      	ldr	r3, [sp, #12]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b2a      	cmp	r3, #42	; 0x2a
 8003e94:	d016      	beq.n	8003ec4 <_vfiprintf_r+0x14c>
 8003e96:	2100      	movs	r1, #0
 8003e98:	68eb      	ldr	r3, [r5, #12]
 8003e9a:	9f03      	ldr	r7, [sp, #12]
 8003e9c:	783a      	ldrb	r2, [r7, #0]
 8003e9e:	1c78      	adds	r0, r7, #1
 8003ea0:	3a30      	subs	r2, #48	; 0x30
 8003ea2:	4684      	mov	ip, r0
 8003ea4:	2a09      	cmp	r2, #9
 8003ea6:	d94f      	bls.n	8003f48 <_vfiprintf_r+0x1d0>
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d111      	bne.n	8003ed0 <_vfiprintf_r+0x158>
 8003eac:	e017      	b.n	8003ede <_vfiprintf_r+0x166>
 8003eae:	3701      	adds	r7, #1
 8003eb0:	e7a9      	b.n	8003e06 <_vfiprintf_r+0x8e>
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <_vfiprintf_r+0x260>)
 8003eb4:	682a      	ldr	r2, [r5, #0]
 8003eb6:	1ac0      	subs	r0, r0, r3
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4083      	lsls	r3, r0
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	9703      	str	r7, [sp, #12]
 8003ec2:	e7cb      	b.n	8003e5c <_vfiprintf_r+0xe4>
 8003ec4:	9b07      	ldr	r3, [sp, #28]
 8003ec6:	1d19      	adds	r1, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	9107      	str	r1, [sp, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db01      	blt.n	8003ed4 <_vfiprintf_r+0x15c>
 8003ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ed2:	e004      	b.n	8003ede <_vfiprintf_r+0x166>
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	60eb      	str	r3, [r5, #12]
 8003ed8:	2302      	movs	r3, #2
 8003eda:	4313      	orrs	r3, r2
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	783b      	ldrb	r3, [r7, #0]
 8003ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee2:	d10a      	bne.n	8003efa <_vfiprintf_r+0x182>
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee8:	d137      	bne.n	8003f5a <_vfiprintf_r+0x1e2>
 8003eea:	9b07      	ldr	r3, [sp, #28]
 8003eec:	3702      	adds	r7, #2
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	9207      	str	r2, [sp, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db2d      	blt.n	8003f54 <_vfiprintf_r+0x1dc>
 8003ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8003efa:	2203      	movs	r2, #3
 8003efc:	7839      	ldrb	r1, [r7, #0]
 8003efe:	4837      	ldr	r0, [pc, #220]	; (8003fdc <_vfiprintf_r+0x264>)
 8003f00:	f000 fab2 	bl	8004468 <memchr>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d007      	beq.n	8003f18 <_vfiprintf_r+0x1a0>
 8003f08:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <_vfiprintf_r+0x264>)
 8003f0a:	682a      	ldr	r2, [r5, #0]
 8003f0c:	1ac0      	subs	r0, r0, r3
 8003f0e:	2340      	movs	r3, #64	; 0x40
 8003f10:	4083      	lsls	r3, r0
 8003f12:	4313      	orrs	r3, r2
 8003f14:	3701      	adds	r7, #1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	7839      	ldrb	r1, [r7, #0]
 8003f1a:	1c7b      	adds	r3, r7, #1
 8003f1c:	2206      	movs	r2, #6
 8003f1e:	4830      	ldr	r0, [pc, #192]	; (8003fe0 <_vfiprintf_r+0x268>)
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	7629      	strb	r1, [r5, #24]
 8003f24:	f000 faa0 	bl	8004468 <memchr>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d045      	beq.n	8003fb8 <_vfiprintf_r+0x240>
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <_vfiprintf_r+0x26c>)
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d127      	bne.n	8003f82 <_vfiprintf_r+0x20a>
 8003f32:	2207      	movs	r2, #7
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	3307      	adds	r3, #7
 8003f38:	4393      	bics	r3, r2
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	9307      	str	r3, [sp, #28]
 8003f3e:	696b      	ldr	r3, [r5, #20]
 8003f40:	9a04      	ldr	r2, [sp, #16]
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	616b      	str	r3, [r5, #20]
 8003f46:	e75d      	b.n	8003e04 <_vfiprintf_r+0x8c>
 8003f48:	210a      	movs	r1, #10
 8003f4a:	434b      	muls	r3, r1
 8003f4c:	4667      	mov	r7, ip
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	3909      	subs	r1, #9
 8003f52:	e7a3      	b.n	8003e9c <_vfiprintf_r+0x124>
 8003f54:	2301      	movs	r3, #1
 8003f56:	425b      	negs	r3, r3
 8003f58:	e7ce      	b.n	8003ef8 <_vfiprintf_r+0x180>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	3701      	adds	r7, #1
 8003f60:	606b      	str	r3, [r5, #4]
 8003f62:	7839      	ldrb	r1, [r7, #0]
 8003f64:	1c78      	adds	r0, r7, #1
 8003f66:	3930      	subs	r1, #48	; 0x30
 8003f68:	4684      	mov	ip, r0
 8003f6a:	2909      	cmp	r1, #9
 8003f6c:	d903      	bls.n	8003f76 <_vfiprintf_r+0x1fe>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0c3      	beq.n	8003efa <_vfiprintf_r+0x182>
 8003f72:	9209      	str	r2, [sp, #36]	; 0x24
 8003f74:	e7c1      	b.n	8003efa <_vfiprintf_r+0x182>
 8003f76:	230a      	movs	r3, #10
 8003f78:	435a      	muls	r2, r3
 8003f7a:	4667      	mov	r7, ip
 8003f7c:	1852      	adds	r2, r2, r1
 8003f7e:	3b09      	subs	r3, #9
 8003f80:	e7ef      	b.n	8003f62 <_vfiprintf_r+0x1ea>
 8003f82:	ab07      	add	r3, sp, #28
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	0022      	movs	r2, r4
 8003f88:	0029      	movs	r1, r5
 8003f8a:	0030      	movs	r0, r6
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <_vfiprintf_r+0x270>)
 8003f8e:	e000      	b.n	8003f92 <_vfiprintf_r+0x21a>
 8003f90:	bf00      	nop
 8003f92:	9004      	str	r0, [sp, #16]
 8003f94:	9b04      	ldr	r3, [sp, #16]
 8003f96:	3301      	adds	r3, #1
 8003f98:	d1d1      	bne.n	8003f3e <_vfiprintf_r+0x1c6>
 8003f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f9c:	07db      	lsls	r3, r3, #31
 8003f9e:	d405      	bmi.n	8003fac <_vfiprintf_r+0x234>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	059b      	lsls	r3, r3, #22
 8003fa4:	d402      	bmi.n	8003fac <_vfiprintf_r+0x234>
 8003fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fa8:	f7ff fd64 	bl	8003a74 <__retarget_lock_release_recursive>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	065b      	lsls	r3, r3, #25
 8003fb0:	d500      	bpl.n	8003fb4 <_vfiprintf_r+0x23c>
 8003fb2:	e70a      	b.n	8003dca <_vfiprintf_r+0x52>
 8003fb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003fb6:	e70a      	b.n	8003dce <_vfiprintf_r+0x56>
 8003fb8:	ab07      	add	r3, sp, #28
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	0022      	movs	r2, r4
 8003fbe:	0029      	movs	r1, r5
 8003fc0:	0030      	movs	r0, r6
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <_vfiprintf_r+0x270>)
 8003fc4:	f000 f882 	bl	80040cc <_printf_i>
 8003fc8:	e7e3      	b.n	8003f92 <_vfiprintf_r+0x21a>
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	080045e8 	.word	0x080045e8
 8003fd0:	08004608 	.word	0x08004608
 8003fd4:	080045c8 	.word	0x080045c8
 8003fd8:	08004628 	.word	0x08004628
 8003fdc:	0800462e 	.word	0x0800462e
 8003fe0:	08004632 	.word	0x08004632
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d53 	.word	0x08003d53

08003fec <_printf_common>:
 8003fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fee:	0015      	movs	r5, r2
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	688a      	ldr	r2, [r1, #8]
 8003ff4:	690b      	ldr	r3, [r1, #16]
 8003ff6:	000c      	movs	r4, r1
 8003ff8:	9000      	str	r0, [sp, #0]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	da00      	bge.n	8004000 <_printf_common+0x14>
 8003ffe:	0013      	movs	r3, r2
 8004000:	0022      	movs	r2, r4
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	3243      	adds	r2, #67	; 0x43
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	2a00      	cmp	r2, #0
 800400a:	d001      	beq.n	8004010 <_printf_common+0x24>
 800400c:	3301      	adds	r3, #1
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	069b      	lsls	r3, r3, #26
 8004014:	d502      	bpl.n	800401c <_printf_common+0x30>
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	3302      	adds	r3, #2
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	2306      	movs	r3, #6
 8004020:	0017      	movs	r7, r2
 8004022:	401f      	ands	r7, r3
 8004024:	421a      	tst	r2, r3
 8004026:	d027      	beq.n	8004078 <_printf_common+0x8c>
 8004028:	0023      	movs	r3, r4
 800402a:	3343      	adds	r3, #67	; 0x43
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	4193      	sbcs	r3, r2
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	0692      	lsls	r2, r2, #26
 8004036:	d430      	bmi.n	800409a <_printf_common+0xae>
 8004038:	0022      	movs	r2, r4
 800403a:	9901      	ldr	r1, [sp, #4]
 800403c:	9800      	ldr	r0, [sp, #0]
 800403e:	9e08      	ldr	r6, [sp, #32]
 8004040:	3243      	adds	r2, #67	; 0x43
 8004042:	47b0      	blx	r6
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d025      	beq.n	8004094 <_printf_common+0xa8>
 8004048:	2306      	movs	r3, #6
 800404a:	6820      	ldr	r0, [r4, #0]
 800404c:	682a      	ldr	r2, [r5, #0]
 800404e:	68e1      	ldr	r1, [r4, #12]
 8004050:	2500      	movs	r5, #0
 8004052:	4003      	ands	r3, r0
 8004054:	2b04      	cmp	r3, #4
 8004056:	d103      	bne.n	8004060 <_printf_common+0x74>
 8004058:	1a8d      	subs	r5, r1, r2
 800405a:	43eb      	mvns	r3, r5
 800405c:	17db      	asrs	r3, r3, #31
 800405e:	401d      	ands	r5, r3
 8004060:	68a3      	ldr	r3, [r4, #8]
 8004062:	6922      	ldr	r2, [r4, #16]
 8004064:	4293      	cmp	r3, r2
 8004066:	dd01      	ble.n	800406c <_printf_common+0x80>
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	18ed      	adds	r5, r5, r3
 800406c:	2700      	movs	r7, #0
 800406e:	42bd      	cmp	r5, r7
 8004070:	d120      	bne.n	80040b4 <_printf_common+0xc8>
 8004072:	2000      	movs	r0, #0
 8004074:	e010      	b.n	8004098 <_printf_common+0xac>
 8004076:	3701      	adds	r7, #1
 8004078:	68e3      	ldr	r3, [r4, #12]
 800407a:	682a      	ldr	r2, [r5, #0]
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	42bb      	cmp	r3, r7
 8004080:	ddd2      	ble.n	8004028 <_printf_common+0x3c>
 8004082:	0022      	movs	r2, r4
 8004084:	2301      	movs	r3, #1
 8004086:	9901      	ldr	r1, [sp, #4]
 8004088:	9800      	ldr	r0, [sp, #0]
 800408a:	9e08      	ldr	r6, [sp, #32]
 800408c:	3219      	adds	r2, #25
 800408e:	47b0      	blx	r6
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d1f0      	bne.n	8004076 <_printf_common+0x8a>
 8004094:	2001      	movs	r0, #1
 8004096:	4240      	negs	r0, r0
 8004098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800409a:	2030      	movs	r0, #48	; 0x30
 800409c:	18e1      	adds	r1, r4, r3
 800409e:	3143      	adds	r1, #67	; 0x43
 80040a0:	7008      	strb	r0, [r1, #0]
 80040a2:	0021      	movs	r1, r4
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	3145      	adds	r1, #69	; 0x45
 80040a8:	7809      	ldrb	r1, [r1, #0]
 80040aa:	18a2      	adds	r2, r4, r2
 80040ac:	3243      	adds	r2, #67	; 0x43
 80040ae:	3302      	adds	r3, #2
 80040b0:	7011      	strb	r1, [r2, #0]
 80040b2:	e7c1      	b.n	8004038 <_printf_common+0x4c>
 80040b4:	0022      	movs	r2, r4
 80040b6:	2301      	movs	r3, #1
 80040b8:	9901      	ldr	r1, [sp, #4]
 80040ba:	9800      	ldr	r0, [sp, #0]
 80040bc:	9e08      	ldr	r6, [sp, #32]
 80040be:	321a      	adds	r2, #26
 80040c0:	47b0      	blx	r6
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	d0e6      	beq.n	8004094 <_printf_common+0xa8>
 80040c6:	3701      	adds	r7, #1
 80040c8:	e7d1      	b.n	800406e <_printf_common+0x82>
	...

080040cc <_printf_i>:
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	b08b      	sub	sp, #44	; 0x2c
 80040d0:	9206      	str	r2, [sp, #24]
 80040d2:	000a      	movs	r2, r1
 80040d4:	3243      	adds	r2, #67	; 0x43
 80040d6:	9307      	str	r3, [sp, #28]
 80040d8:	9005      	str	r0, [sp, #20]
 80040da:	9204      	str	r2, [sp, #16]
 80040dc:	7e0a      	ldrb	r2, [r1, #24]
 80040de:	000c      	movs	r4, r1
 80040e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040e2:	2a78      	cmp	r2, #120	; 0x78
 80040e4:	d807      	bhi.n	80040f6 <_printf_i+0x2a>
 80040e6:	2a62      	cmp	r2, #98	; 0x62
 80040e8:	d809      	bhi.n	80040fe <_printf_i+0x32>
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d100      	bne.n	80040f0 <_printf_i+0x24>
 80040ee:	e0c1      	b.n	8004274 <_printf_i+0x1a8>
 80040f0:	2a58      	cmp	r2, #88	; 0x58
 80040f2:	d100      	bne.n	80040f6 <_printf_i+0x2a>
 80040f4:	e08c      	b.n	8004210 <_printf_i+0x144>
 80040f6:	0026      	movs	r6, r4
 80040f8:	3642      	adds	r6, #66	; 0x42
 80040fa:	7032      	strb	r2, [r6, #0]
 80040fc:	e022      	b.n	8004144 <_printf_i+0x78>
 80040fe:	0010      	movs	r0, r2
 8004100:	3863      	subs	r0, #99	; 0x63
 8004102:	2815      	cmp	r0, #21
 8004104:	d8f7      	bhi.n	80040f6 <_printf_i+0x2a>
 8004106:	f7fb ffff 	bl	8000108 <__gnu_thumb1_case_shi>
 800410a:	0016      	.short	0x0016
 800410c:	fff6001f 	.word	0xfff6001f
 8004110:	fff6fff6 	.word	0xfff6fff6
 8004114:	001ffff6 	.word	0x001ffff6
 8004118:	fff6fff6 	.word	0xfff6fff6
 800411c:	fff6fff6 	.word	0xfff6fff6
 8004120:	003600a8 	.word	0x003600a8
 8004124:	fff6009a 	.word	0xfff6009a
 8004128:	00b9fff6 	.word	0x00b9fff6
 800412c:	0036fff6 	.word	0x0036fff6
 8004130:	fff6fff6 	.word	0xfff6fff6
 8004134:	009e      	.short	0x009e
 8004136:	0026      	movs	r6, r4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	3642      	adds	r6, #66	; 0x42
 800413c:	1d11      	adds	r1, r2, #4
 800413e:	6019      	str	r1, [r3, #0]
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	7033      	strb	r3, [r6, #0]
 8004144:	2301      	movs	r3, #1
 8004146:	e0a7      	b.n	8004298 <_printf_i+0x1cc>
 8004148:	6808      	ldr	r0, [r1, #0]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	1d0a      	adds	r2, r1, #4
 800414e:	0605      	lsls	r5, r0, #24
 8004150:	d50b      	bpl.n	800416a <_printf_i+0x9e>
 8004152:	680d      	ldr	r5, [r1, #0]
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	2d00      	cmp	r5, #0
 8004158:	da03      	bge.n	8004162 <_printf_i+0x96>
 800415a:	232d      	movs	r3, #45	; 0x2d
 800415c:	9a04      	ldr	r2, [sp, #16]
 800415e:	426d      	negs	r5, r5
 8004160:	7013      	strb	r3, [r2, #0]
 8004162:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <_printf_i+0x21c>)
 8004164:	270a      	movs	r7, #10
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	e01b      	b.n	80041a2 <_printf_i+0xd6>
 800416a:	680d      	ldr	r5, [r1, #0]
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	0641      	lsls	r1, r0, #25
 8004170:	d5f1      	bpl.n	8004156 <_printf_i+0x8a>
 8004172:	b22d      	sxth	r5, r5
 8004174:	e7ef      	b.n	8004156 <_printf_i+0x8a>
 8004176:	680d      	ldr	r5, [r1, #0]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	1d08      	adds	r0, r1, #4
 800417c:	6018      	str	r0, [r3, #0]
 800417e:	062e      	lsls	r6, r5, #24
 8004180:	d501      	bpl.n	8004186 <_printf_i+0xba>
 8004182:	680d      	ldr	r5, [r1, #0]
 8004184:	e003      	b.n	800418e <_printf_i+0xc2>
 8004186:	066d      	lsls	r5, r5, #25
 8004188:	d5fb      	bpl.n	8004182 <_printf_i+0xb6>
 800418a:	680d      	ldr	r5, [r1, #0]
 800418c:	b2ad      	uxth	r5, r5
 800418e:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <_printf_i+0x21c>)
 8004190:	2708      	movs	r7, #8
 8004192:	9303      	str	r3, [sp, #12]
 8004194:	2a6f      	cmp	r2, #111	; 0x6f
 8004196:	d000      	beq.n	800419a <_printf_i+0xce>
 8004198:	3702      	adds	r7, #2
 800419a:	0023      	movs	r3, r4
 800419c:	2200      	movs	r2, #0
 800419e:	3343      	adds	r3, #67	; 0x43
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	6863      	ldr	r3, [r4, #4]
 80041a4:	60a3      	str	r3, [r4, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db03      	blt.n	80041b2 <_printf_i+0xe6>
 80041aa:	2204      	movs	r2, #4
 80041ac:	6821      	ldr	r1, [r4, #0]
 80041ae:	4391      	bics	r1, r2
 80041b0:	6021      	str	r1, [r4, #0]
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	d102      	bne.n	80041bc <_printf_i+0xf0>
 80041b6:	9e04      	ldr	r6, [sp, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <_printf_i+0x10a>
 80041bc:	9e04      	ldr	r6, [sp, #16]
 80041be:	0028      	movs	r0, r5
 80041c0:	0039      	movs	r1, r7
 80041c2:	f7fc f831 	bl	8000228 <__aeabi_uidivmod>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	3e01      	subs	r6, #1
 80041ca:	5c5b      	ldrb	r3, [r3, r1]
 80041cc:	7033      	strb	r3, [r6, #0]
 80041ce:	002b      	movs	r3, r5
 80041d0:	0005      	movs	r5, r0
 80041d2:	429f      	cmp	r7, r3
 80041d4:	d9f3      	bls.n	80041be <_printf_i+0xf2>
 80041d6:	2f08      	cmp	r7, #8
 80041d8:	d109      	bne.n	80041ee <_printf_i+0x122>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07db      	lsls	r3, r3, #31
 80041de:	d506      	bpl.n	80041ee <_printf_i+0x122>
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	6922      	ldr	r2, [r4, #16]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	dc02      	bgt.n	80041ee <_printf_i+0x122>
 80041e8:	2330      	movs	r3, #48	; 0x30
 80041ea:	3e01      	subs	r6, #1
 80041ec:	7033      	strb	r3, [r6, #0]
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	1b9b      	subs	r3, r3, r6
 80041f2:	6123      	str	r3, [r4, #16]
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	0021      	movs	r1, r4
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	9805      	ldr	r0, [sp, #20]
 80041fc:	9b06      	ldr	r3, [sp, #24]
 80041fe:	aa09      	add	r2, sp, #36	; 0x24
 8004200:	f7ff fef4 	bl	8003fec <_printf_common>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d14c      	bne.n	80042a2 <_printf_i+0x1d6>
 8004208:	2001      	movs	r0, #1
 800420a:	4240      	negs	r0, r0
 800420c:	b00b      	add	sp, #44	; 0x2c
 800420e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004210:	3145      	adds	r1, #69	; 0x45
 8004212:	700a      	strb	r2, [r1, #0]
 8004214:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <_printf_i+0x21c>)
 8004216:	9203      	str	r2, [sp, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	ca20      	ldmia	r2!, {r5}
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	0608      	lsls	r0, r1, #24
 8004222:	d516      	bpl.n	8004252 <_printf_i+0x186>
 8004224:	07cb      	lsls	r3, r1, #31
 8004226:	d502      	bpl.n	800422e <_printf_i+0x162>
 8004228:	2320      	movs	r3, #32
 800422a:	4319      	orrs	r1, r3
 800422c:	6021      	str	r1, [r4, #0]
 800422e:	2710      	movs	r7, #16
 8004230:	2d00      	cmp	r5, #0
 8004232:	d1b2      	bne.n	800419a <_printf_i+0xce>
 8004234:	2320      	movs	r3, #32
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	439a      	bics	r2, r3
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	e7ad      	b.n	800419a <_printf_i+0xce>
 800423e:	2220      	movs	r2, #32
 8004240:	6809      	ldr	r1, [r1, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	6022      	str	r2, [r4, #0]
 8004246:	0022      	movs	r2, r4
 8004248:	2178      	movs	r1, #120	; 0x78
 800424a:	3245      	adds	r2, #69	; 0x45
 800424c:	7011      	strb	r1, [r2, #0]
 800424e:	4a27      	ldr	r2, [pc, #156]	; (80042ec <_printf_i+0x220>)
 8004250:	e7e1      	b.n	8004216 <_printf_i+0x14a>
 8004252:	0648      	lsls	r0, r1, #25
 8004254:	d5e6      	bpl.n	8004224 <_printf_i+0x158>
 8004256:	b2ad      	uxth	r5, r5
 8004258:	e7e4      	b.n	8004224 <_printf_i+0x158>
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	680d      	ldr	r5, [r1, #0]
 800425e:	1d10      	adds	r0, r2, #4
 8004260:	6949      	ldr	r1, [r1, #20]
 8004262:	6018      	str	r0, [r3, #0]
 8004264:	6813      	ldr	r3, [r2, #0]
 8004266:	062e      	lsls	r6, r5, #24
 8004268:	d501      	bpl.n	800426e <_printf_i+0x1a2>
 800426a:	6019      	str	r1, [r3, #0]
 800426c:	e002      	b.n	8004274 <_printf_i+0x1a8>
 800426e:	066d      	lsls	r5, r5, #25
 8004270:	d5fb      	bpl.n	800426a <_printf_i+0x19e>
 8004272:	8019      	strh	r1, [r3, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	9e04      	ldr	r6, [sp, #16]
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	e7bb      	b.n	80041f4 <_printf_i+0x128>
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	1d11      	adds	r1, r2, #4
 8004280:	6019      	str	r1, [r3, #0]
 8004282:	6816      	ldr	r6, [r2, #0]
 8004284:	2100      	movs	r1, #0
 8004286:	0030      	movs	r0, r6
 8004288:	6862      	ldr	r2, [r4, #4]
 800428a:	f000 f8ed 	bl	8004468 <memchr>
 800428e:	2800      	cmp	r0, #0
 8004290:	d001      	beq.n	8004296 <_printf_i+0x1ca>
 8004292:	1b80      	subs	r0, r0, r6
 8004294:	6060      	str	r0, [r4, #4]
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	2300      	movs	r3, #0
 800429c:	9a04      	ldr	r2, [sp, #16]
 800429e:	7013      	strb	r3, [r2, #0]
 80042a0:	e7a8      	b.n	80041f4 <_printf_i+0x128>
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	0032      	movs	r2, r6
 80042a6:	9906      	ldr	r1, [sp, #24]
 80042a8:	9805      	ldr	r0, [sp, #20]
 80042aa:	9d07      	ldr	r5, [sp, #28]
 80042ac:	47a8      	blx	r5
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d0aa      	beq.n	8004208 <_printf_i+0x13c>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d415      	bmi.n	80042e4 <_printf_i+0x218>
 80042b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ba:	68e0      	ldr	r0, [r4, #12]
 80042bc:	4298      	cmp	r0, r3
 80042be:	daa5      	bge.n	800420c <_printf_i+0x140>
 80042c0:	0018      	movs	r0, r3
 80042c2:	e7a3      	b.n	800420c <_printf_i+0x140>
 80042c4:	0022      	movs	r2, r4
 80042c6:	2301      	movs	r3, #1
 80042c8:	9906      	ldr	r1, [sp, #24]
 80042ca:	9805      	ldr	r0, [sp, #20]
 80042cc:	9e07      	ldr	r6, [sp, #28]
 80042ce:	3219      	adds	r2, #25
 80042d0:	47b0      	blx	r6
 80042d2:	1c43      	adds	r3, r0, #1
 80042d4:	d098      	beq.n	8004208 <_printf_i+0x13c>
 80042d6:	3501      	adds	r5, #1
 80042d8:	68e3      	ldr	r3, [r4, #12]
 80042da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	42ab      	cmp	r3, r5
 80042e0:	dcf0      	bgt.n	80042c4 <_printf_i+0x1f8>
 80042e2:	e7e9      	b.n	80042b8 <_printf_i+0x1ec>
 80042e4:	2500      	movs	r5, #0
 80042e6:	e7f7      	b.n	80042d8 <_printf_i+0x20c>
 80042e8:	08004639 	.word	0x08004639
 80042ec:	0800464a 	.word	0x0800464a

080042f0 <_sbrk_r>:
 80042f0:	2300      	movs	r3, #0
 80042f2:	b570      	push	{r4, r5, r6, lr}
 80042f4:	4d06      	ldr	r5, [pc, #24]	; (8004310 <_sbrk_r+0x20>)
 80042f6:	0004      	movs	r4, r0
 80042f8:	0008      	movs	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc fc12 	bl	8000b24 <_sbrk>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d103      	bne.n	800430c <_sbrk_r+0x1c>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d000      	beq.n	800430c <_sbrk_r+0x1c>
 800430a:	6023      	str	r3, [r4, #0]
 800430c:	bd70      	pop	{r4, r5, r6, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	200005e8 	.word	0x200005e8

08004314 <__sread>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	000c      	movs	r4, r1
 8004318:	250e      	movs	r5, #14
 800431a:	5f49      	ldrsh	r1, [r1, r5]
 800431c:	f000 f8c0 	bl	80044a0 <_read_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	db03      	blt.n	800432c <__sread+0x18>
 8004324:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004326:	181b      	adds	r3, r3, r0
 8004328:	6563      	str	r3, [r4, #84]	; 0x54
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	4a02      	ldr	r2, [pc, #8]	; (8004338 <__sread+0x24>)
 8004330:	4013      	ands	r3, r2
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	e7f9      	b.n	800432a <__sread+0x16>
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	ffffefff 	.word	0xffffefff

0800433c <__swrite>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	001f      	movs	r7, r3
 8004340:	898b      	ldrh	r3, [r1, #12]
 8004342:	0005      	movs	r5, r0
 8004344:	000c      	movs	r4, r1
 8004346:	0016      	movs	r6, r2
 8004348:	05db      	lsls	r3, r3, #23
 800434a:	d505      	bpl.n	8004358 <__swrite+0x1c>
 800434c:	230e      	movs	r3, #14
 800434e:	5ec9      	ldrsh	r1, [r1, r3]
 8004350:	2200      	movs	r2, #0
 8004352:	2302      	movs	r3, #2
 8004354:	f000 f874 	bl	8004440 <_lseek_r>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <__swrite+0x34>)
 800435c:	0028      	movs	r0, r5
 800435e:	4013      	ands	r3, r2
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	0032      	movs	r2, r6
 8004364:	230e      	movs	r3, #14
 8004366:	5ee1      	ldrsh	r1, [r4, r3]
 8004368:	003b      	movs	r3, r7
 800436a:	f000 f81f 	bl	80043ac <_write_r>
 800436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004370:	ffffefff 	.word	0xffffefff

08004374 <__sseek>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	000c      	movs	r4, r1
 8004378:	250e      	movs	r5, #14
 800437a:	5f49      	ldrsh	r1, [r1, r5]
 800437c:	f000 f860 	bl	8004440 <_lseek_r>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	1c42      	adds	r2, r0, #1
 8004384:	d103      	bne.n	800438e <__sseek+0x1a>
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <__sseek+0x28>)
 8004388:	4013      	ands	r3, r2
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	bd70      	pop	{r4, r5, r6, pc}
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	0152      	lsls	r2, r2, #5
 8004392:	4313      	orrs	r3, r2
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	6560      	str	r0, [r4, #84]	; 0x54
 8004398:	e7f8      	b.n	800438c <__sseek+0x18>
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	ffffefff 	.word	0xffffefff

080043a0 <__sclose>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	230e      	movs	r3, #14
 80043a4:	5ec9      	ldrsh	r1, [r1, r3]
 80043a6:	f000 f815 	bl	80043d4 <_close_r>
 80043aa:	bd10      	pop	{r4, pc}

080043ac <_write_r>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	0004      	movs	r4, r0
 80043b0:	0008      	movs	r0, r1
 80043b2:	0011      	movs	r1, r2
 80043b4:	001a      	movs	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	4d05      	ldr	r5, [pc, #20]	; (80043d0 <_write_r+0x24>)
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	f7fc f9f4 	bl	80007a8 <_write>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d103      	bne.n	80043cc <_write_r+0x20>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d000      	beq.n	80043cc <_write_r+0x20>
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	200005e8 	.word	0x200005e8

080043d4 <_close_r>:
 80043d4:	2300      	movs	r3, #0
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	4d06      	ldr	r5, [pc, #24]	; (80043f4 <_close_r+0x20>)
 80043da:	0004      	movs	r4, r0
 80043dc:	0008      	movs	r0, r1
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	f7fc fa3e 	bl	8000860 <_close>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d103      	bne.n	80043f0 <_close_r+0x1c>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d000      	beq.n	80043f0 <_close_r+0x1c>
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	200005e8 	.word	0x200005e8

080043f8 <_fstat_r>:
 80043f8:	2300      	movs	r3, #0
 80043fa:	b570      	push	{r4, r5, r6, lr}
 80043fc:	4d06      	ldr	r5, [pc, #24]	; (8004418 <_fstat_r+0x20>)
 80043fe:	0004      	movs	r4, r0
 8004400:	0008      	movs	r0, r1
 8004402:	0011      	movs	r1, r2
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	f7fc fa59 	bl	80008bc <_fstat>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d103      	bne.n	8004416 <_fstat_r+0x1e>
 800440e:	682b      	ldr	r3, [r5, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d000      	beq.n	8004416 <_fstat_r+0x1e>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	200005e8 	.word	0x200005e8

0800441c <_isatty_r>:
 800441c:	2300      	movs	r3, #0
 800441e:	b570      	push	{r4, r5, r6, lr}
 8004420:	4d06      	ldr	r5, [pc, #24]	; (800443c <_isatty_r+0x20>)
 8004422:	0004      	movs	r4, r0
 8004424:	0008      	movs	r0, r1
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f7fc f9b2 	bl	8000790 <_isatty>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d103      	bne.n	8004438 <_isatty_r+0x1c>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d000      	beq.n	8004438 <_isatty_r+0x1c>
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	bd70      	pop	{r4, r5, r6, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	200005e8 	.word	0x200005e8

08004440 <_lseek_r>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	0004      	movs	r4, r0
 8004444:	0008      	movs	r0, r1
 8004446:	0011      	movs	r1, r2
 8004448:	001a      	movs	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	4d05      	ldr	r5, [pc, #20]	; (8004464 <_lseek_r+0x24>)
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	f7fc fa12 	bl	8000878 <_lseek>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d103      	bne.n	8004460 <_lseek_r+0x20>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d000      	beq.n	8004460 <_lseek_r+0x20>
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	200005e8 	.word	0x200005e8

08004468 <memchr>:
 8004468:	b2c9      	uxtb	r1, r1
 800446a:	1882      	adds	r2, r0, r2
 800446c:	4290      	cmp	r0, r2
 800446e:	d101      	bne.n	8004474 <memchr+0xc>
 8004470:	2000      	movs	r0, #0
 8004472:	4770      	bx	lr
 8004474:	7803      	ldrb	r3, [r0, #0]
 8004476:	428b      	cmp	r3, r1
 8004478:	d0fb      	beq.n	8004472 <memchr+0xa>
 800447a:	3001      	adds	r0, #1
 800447c:	e7f6      	b.n	800446c <memchr+0x4>
	...

08004480 <__malloc_lock>:
 8004480:	b510      	push	{r4, lr}
 8004482:	4802      	ldr	r0, [pc, #8]	; (800448c <__malloc_lock+0xc>)
 8004484:	f7ff faf5 	bl	8003a72 <__retarget_lock_acquire_recursive>
 8004488:	bd10      	pop	{r4, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	200005dc 	.word	0x200005dc

08004490 <__malloc_unlock>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4802      	ldr	r0, [pc, #8]	; (800449c <__malloc_unlock+0xc>)
 8004494:	f7ff faee 	bl	8003a74 <__retarget_lock_release_recursive>
 8004498:	bd10      	pop	{r4, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	200005dc 	.word	0x200005dc

080044a0 <_read_r>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	0004      	movs	r4, r0
 80044a4:	0008      	movs	r0, r1
 80044a6:	0011      	movs	r1, r2
 80044a8:	001a      	movs	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	4d05      	ldr	r5, [pc, #20]	; (80044c4 <_read_r+0x24>)
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fc f9ea 	bl	8000888 <_read>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d103      	bne.n	80044c0 <_read_r+0x20>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d000      	beq.n	80044c0 <_read_r+0x20>
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	200005e8 	.word	0x200005e8

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
