import numpy as np
import matplotlib.pyplot as plt
import scipy.signal
from scipy.signal import firwin, lfilter


sr_nominal = 96000
sr_end_error = 0.1
batch_size = 1000
batch_count = 49
freq = 1000

fir_coeff = np.array([
    -0.000000006678194102749421939593360000517,
     0.00000000880791495008315353330062509379 ,
    -0.000000009172698699641088373852642549443,
     0.000000001070119261258104316833809472557,
     0.000000021674760922856488005928710409084,
    -0.000000063077126264445959310962752913249,
     0.000000120626835589643400273941785741383,
    -0.000000180670165977397411338837814390179,
     0.000000215627161079993530968807857045588,
    -0.000000185679352785723681063456344531026,
     0.000000047257551016538660276615230887431,
     0.000000230846407885613599288493675600054,
    -0.000000645650956007335081790455243166971,
     0.000001137832800767492011609241346625776,
    -0.000001577877770146332778709342969936102,
     0.000001770734095016138683821214049041171,
    -0.000001487646288421046252378092747403748,
     0.000000528297249910982835322892717244692,
     0.000001193055034910594302158628500498683,
    -0.000003555468396514125928976153209748468,
     0.000006162083265566634983096544475600354,
    -0.000008328369412525252080277925192941524,
     0.000009158962636163382793771069179111777,
    -0.000007728732560438702673495312001072932,
     0.000003356503219650042620363517703596656,
     0.000004074898577190629813565055789004177,
    -0.000013832546917341783678217365105567183,
     0.000024183520841251050716332049450585373,
    -0.000032481953967902614001383998498795336,
     0.000035560587992807877306088160107577778,
    -0.000030428300476375657565878893318078724,
     0.000015184611900244836385216566643219238,
     0.000010033802827974505218733801414909834,
    -0.000042334265214740764984250459557202362,
     0.000075860810380170556476049636973613133,
    -0.000102332620238450113284676967762010236,
     0.000112429377146154222235144293229325285,
    -0.00009792076097358523622052328683196265 ,
     0.00005419856278116497085711733561197434 ,
     0.000017346738378174683138915196378704309,
    -0.000107790505283356262606654640823222735,
     0.000200642272345427901542036508431010589,
    -0.000273771159036041678794953790898603074,
     0.000303351090353569342525363872198340687,
    -0.000269373300278080338686359507249790113,
     0.000161738857684445006728315985533583898,
     0.000014472716058524462428734255747819759,
    -0.000236120601894308193742511026158581444,
     0.000462859982079071312528750770098895373,
    -0.000642484874578163060905577896875229271,
     0.000720552144366151583326773888416028058,
    -0.000652955606864147786345953239361961096,
     0.000419062707598282099211856044362889406,
    -0.000032325055111503671421285810438916997,
    -0.000454814781486944221065155113947753307,
     0.000954217013876838631401822166111514889,
    -0.001354588859016715501545902178293090401,
     0.001542312889409599898499214631897302752,
    -0.001427386446697568363889407905276129895,
     0.000969404477215352836788619939056843577,
    -0.000197460484439163503874239968816084456,
    -0.000781959123626829949796346319601525465,
     0.001793358321967176115252495804952559411,
    -0.002618177330649461547612544265462020121,
     0.00303573101204225072324849321603323915 ,
    -0.002872600384499022357909225888761284295,
     0.002050768319487182491517307525441538019,
    -0.000623303465482504719455403296990425588,
    -0.001212771833045533454234488068834707519,
     0.003133443378539561320617057305071284645,
    -0.004735993323442525340660758104149863357,
     0.005613334868113616787921316131360072177,
    -0.005442414266205911066442979517887579277,
     0.00406960013126340253153401249619491864 ,
    -0.001573862976684701738341876087190485123,
    -0.001709669688188539607431870592790801311,
     0.005217339831147538471711744278991318424,
    -0.008238093023381970123053541499302809825,
     0.010039377664979941273681873781242757104,
    -0.01001829546575144433417925426965666702 ,
     0.007850353393772845078668609630767605267,
    -0.003604721997070347259961575758779872558,
    -0.002202553943486765600234811302016169066,
     0.008637244466541293963501857433584518731,
    -0.014463614433927273958402359710362361511,
     0.018338641932858824185048618460314173717,
    -0.019057083510148845745257872863476222847,
     0.015808098749949605482667536193730484229,
    -0.008398131201703859863294532317468110705,
    -0.00260275240042005589699569689798863692 ,
     0.0158222729552457593016345782643838902  ,
    -0.02916642451389185597410147465780028142 ,
     0.04000363595337116245920228152499475982 ,
    -0.045403695821896884743384958937895135023,
     0.042334813297102612261735288257114007138,
    -0.027623873489417759968800325509619142395,
    -0.00282775692390119324365338471238828788 ,
     0.057504640043044986941200846786159672774,
    -0.167363136399017425892665755782218184322,
     0.621158961900943995537716091348556801677,
     0.621158961900943995537716091348556801677,
    -0.167363136399017425892665755782218184322,
     0.057504640043044986941200846786159672774,
    -0.00282775692390119324365338471238828788 ,
    -0.027623873489417759968800325509619142395,
     0.042334813297102612261735288257114007138,
    -0.045403695821896884743384958937895135023,
     0.04000363595337116245920228152499475982 ,
    -0.02916642451389185597410147465780028142 ,
     0.0158222729552457593016345782643838902  ,
    -0.00260275240042005589699569689798863692 ,
    -0.008398131201703859863294532317468110705,
     0.015808098749949605482667536193730484229,
    -0.019057083510148845745257872863476222847,
     0.018338641932858824185048618460314173717,
    -0.014463614433927273958402359710362361511,
     0.008637244466541293963501857433584518731,
    -0.002202553943486765600234811302016169066,
    -0.003604721997070347259961575758779872558,
     0.007850353393772845078668609630767605267,
    -0.01001829546575144433417925426965666702 ,
     0.010039377664979941273681873781242757104,
    -0.008238093023381970123053541499302809825,
     0.005217339831147538471711744278991318424,
    -0.001709669688188539607431870592790801311,
    -0.001573862976684701738341876087190485123,
     0.00406960013126340253153401249619491864 ,
    -0.005442414266205911066442979517887579277,
     0.005613334868113616787921316131360072177,
    -0.004735993323442525340660758104149863357,
     0.003133443378539561320617057305071284645,
    -0.001212771833045533454234488068834707519,
    -0.000623303465482504719455403296990425588,
     0.002050768319487182491517307525441538019,
    -0.002872600384499022357909225888761284295,
     0.00303573101204225072324849321603323915 ,
    -0.002618177330649461547612544265462020121,
     0.001793358321967176115252495804952559411,
    -0.000781959123626829949796346319601525465,
    -0.000197460484439163503874239968816084456,
     0.000969404477215352836788619939056843577,
    -0.001427386446697568363889407905276129895,
     0.001542312889409599898499214631897302752,
    -0.001354588859016715501545902178293090401,
     0.000954217013876838631401822166111514889,
    -0.000454814781486944221065155113947753307,
    -0.000032325055111503671421285810438916997,
     0.000419062707598282099211856044362889406,
    -0.000652955606864147786345953239361961096,
     0.000720552144366151583326773888416028058,
    -0.000642484874578163060905577896875229271,
     0.000462859982079071312528750770098895373,
    -0.000236120601894308193742511026158581444,
     0.000014472716058524462428734255747819759,
     0.000161738857684445006728315985533583898,
    -0.000269373300278080338686359507249790113,
     0.000303351090353569342525363872198340687,
    -0.000273771159036041678794953790898603074,
     0.000200642272345427901542036508431010589,
    -0.000107790505283356262606654640823222735,
     0.000017346738378174683138915196378704309,
     0.00005419856278116497085711733561197434 ,
    -0.00009792076097358523622052328683196265 ,
     0.000112429377146154222235144293229325285,
    -0.000102332620238450113284676967762010236,
     0.000075860810380170556476049636973613133,
    -0.000042334265214740764984250459557202362,
     0.000010033802827974505218733801414909834,
     0.000015184611900244836385216566643219238,
    -0.000030428300476375657565878893318078724,
     0.000035560587992807877306088160107577778,
    -0.000032481953967902614001383998498795336,
     0.000024183520841251050716332049450585373,
    -0.000013832546917341783678217365105567183,
     0.000004074898577190629813565055789004177,
     0.000003356503219650042620363517703596656,
    -0.000007728732560438702673495312001072932,
     0.000009158962636163382793771069179111777,
    -0.000008328369412525252080277925192941524,
     0.000006162083265566634983096544475600354,
    -0.000003555468396514125928976153209748468,
     0.000001193055034910594302158628500498683,
     0.000000528297249910982835322892717244692,
    -0.000001487646288421046252378092747403748,
     0.000001770734095016138683821214049041171,
    -0.000001577877770146332778709342969936102,
     0.000001137832800767492011609241346625776,
    -0.000000645650956007335081790455243166971,
     0.000000230846407885613599288493675600054,
     0.000000047257551016538660276615230887431,
    -0.000000185679352785723681063456344531026,
     0.000000215627161079993530968807857045588,
    -0.000000180670165977397411338837814390179,
     0.000000120626835589643400273941785741383,
    -0.000000063077126264445959310962752913249,
     0.000000021674760922856488005928710409084,
     0.000000001070119261258104316833809472557,
    -0.000000009172698699641088373852642549443,
     0.00000000880791495008315353330062509379 ,
    -0.000000006678194102749421939593360000517
])


def batch_input_values(sr, start_time, duration):
    return np.sin(
        np.arange(
            2 * np.pi * freq * start_time,
            2 * np.pi * freq * (start_time + duration),
            2 * np.pi * freq / sr
        )
    )


def process_batches(proc_func):
    srs = np.linspace(sr_nominal * (1 - sr_end_error), sr_nominal * (1 + sr_end_error), batch_count)
    batch_duration = batch_size / sr_nominal
    batch_outputs = []
    for i in range(batch_count):
        batch_input = batch_input_values(srs[i], i * batch_duration, batch_duration)
        batch_outputs.append(proc_func(batch_input))
    combined_output = np.concatenate(batch_outputs)
    return combined_output


def basic_proc_func(arr_in):
    return arr_in


def better_proc_func(arr_in):
    arr_len = len(arr_in)
    step_des = 1 / batch_size
    step_act = 1 / arr_len
    arr_out = np.empty(batch_size)
    for i in range(batch_size):
        time = step_des * i
        samp_idx_in = time / step_act
        low_samp_idx = int(np.floor(samp_idx_in))
        high_samp_idx = low_samp_idx + 1
        lerp_factor = samp_idx_in - low_samp_idx
        if high_samp_idx >= arr_len:
            arr_out[i] = arr_in[low_samp_idx]
        else:
            arr_out[i] = (1 - lerp_factor) * arr_in[low_samp_idx] + lerp_factor * arr_in[high_samp_idx]
    return arr_out


fir_len = 200
#fir_coeff = firwin(fir_len, 0.85)
prev_ins = np.zeros(fir_len - 1)
prev_outs = np.zeros(fir_len - 1)


def fir_better_proc_func(arr_in):
    global prev_ins, prev_outs
    arr_len = len(arr_in)
    print(arr_len)
    step_des = 1 / batch_size
    step_act = 1 / arr_len
    arr_out = np.empty(batch_size)
    if arr_len > batch_size:
        arr_in_f, prev_ins = scipy.signal.lfilter(fir_coeff, 1, arr_in, zi=prev_ins)
    else:
        arr_in_f = arr_in
        prev_ins = scipy.signal.lfilter(fir_coeff, 1, arr_in, zi=prev_ins)[1]
    for i in range(batch_size):
        time = step_des * i
        samp_idx_in = time / step_act
        low_samp_idx = int(np.floor(samp_idx_in))
        high_samp_idx = low_samp_idx + 1
        lerp_factor = samp_idx_in - low_samp_idx
        if high_samp_idx >= arr_len:
            arr_out[i] = arr_in[low_samp_idx]
        else:
            arr_out[i] = (1 - lerp_factor) * arr_in_f[low_samp_idx] + lerp_factor * arr_in_f[high_samp_idx]
    if arr_len < batch_size:
        arr_out_f, prev_outs = scipy.signal.lfilter(fir_coeff, 1, arr_out, zi=prev_outs)
    else:
        arr_out_f = arr_out
        prev_outs = scipy.signal.lfilter(fir_coeff, 1, arr_out, zi=prev_outs)[1]
    return arr_out_f


def np_res_poly_proc_func(arr_in):
    arr_len = len(arr_in)
    return scipy.signal.resample_poly(arr_in, batch_size, arr_len)


dur_total = batch_count * batch_size / sr_nominal
proc_vals = process_batches(fir_better_proc_func)[:(batch_count * batch_size)]
true_vals = batch_input_values(sr_nominal, -99.5 / sr_nominal, dur_total)

cc = true_vals - proc_vals

plt.scatter(np.arange(0, dur_total, 1 / sr_nominal), true_vals)
plt.scatter(np.arange(0, dur_total, 1 / sr_nominal), proc_vals)
plt.scatter(np.arange(0, dur_total, 1 / sr_nominal), cc)
plt.show()
